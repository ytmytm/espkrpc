services {
  name: "krpcmj"
  procedures {
    name: "AscentNow"
    parameters {
      name: "Alt"
      type: "double"
    }
    parameters {
      name: "Inc"
      type: "float"
    }
  }
  procedures {
    name: "AscentRdzv"
    parameters {
      name: "Targ"
      type: "uint64"
    }
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
  }
  procedures {
    name: "AscentIntoPlane"
  }
  procedures {
    name: "dvstats"
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "ReturnType.List(List(double))"
  }
  procedures {
    name: "NextTimeAlt"
    parameters {
      name: "alt"
      type: "double"
    }
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "closestAppTime"
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "closestAppDist"
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "relativeInc"
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "IsEqAn"
    has_return_type: true
    return_type: "bool"
  }
  procedures {
    name: "IsEqDn"
    has_return_type: true
    return_type: "bool"
  }
  procedures {
    name: "timeEqAn"
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "timeEqDn"
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "IsTgtAn"
    has_return_type: true
    return_type: "bool"
  }
  procedures {
    name: "IsTgtDn"
    has_return_type: true
    return_type: "bool"
  }
  procedures {
    name: "timeTgtAn"
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "timeTgtDn"
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "ClosestAppVel"
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "relativeVel"
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "phaseAngle"
    has_return_type: true
    return_type: "double"
  }
  procedures {
    name: "biome"
    has_return_type: true
    return_type: "string"
  }
  procedures {
    name: "LandNow"
  }
  procedures {
    name: "LandTarget"
  }
  procedures {
    name: "LandPickTarget"
  }
  procedures {
    name: "LandSetTarget"
    parameters {
      name: "lat"
      type: "double"
    }
    parameters {
      name: "lon"
      type: "double"
    }
  }
  procedures {
    name: "ExecuteNextNode"
  }
  procedures {
    name: "ExecuteAllNodes"
  }
  procedures {
    name: "AbortExecution"
  }
  procedures {
    name: "mpMatchplanes"
  }
  procedures {
    name: "mpCirc"
    parameters {
      name: "time"
      type: "double"
    }
  }
  procedures {
    name: "mpApa"
    parameters {
      name: "time"
      type: "double"
    }
    parameters {
      name: "apa"
      type: "double"
    }
  }
  procedures {
    name: "mpPea"
    parameters {
      name: "time"
      type: "double"
    }
    parameters {
      name: "pea"
      type: "double"
    }
  }
  procedures {
    name: "mpInc"
    parameters {
      name: "time"
      type: "double"
    }
    parameters {
      name: "inc"
      type: "double"
    }
  }
  procedures {
    name: "mpMatchVelocity"
    parameters {
      name: "time"
      type: "double"
    }
  }
  procedures {
    name: "mpHohmann"
  }
  procedures {
    name: "mpPlanet"
  }
  procedures {
    name: "mpFineTuneCa"
    parameters {
      name: "distance"
      type: "double"
    }
  }
  procedures {
    name: "saSurface"
    parameters {
      name: "hdg"
      type: "float"
    }
    parameters {
      name: "pit"
      type: "float"
    }
    parameters {
      name: "rol"
      type: "float"
    }
  }
  procedures {
    name: "saForceroll"
    parameters {
      name: "rol"
      type: "float"
    }
  }
  procedures {
    name: "saForcerollClear"
  }
  procedures {
    name: "WarptoApa"
  }
  procedures {
    name: "get_apvessel"
    has_return_type: true
    return_type: "uint64"
    attributes: "Property.Get(apvessel)"
    attributes: "ReturnType.Class(SpaceCenter.Vessel)"
  }
  procedures {
    name: "set_apvessel"
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Property.Set(apvessel)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
  }
  procedures {
    name: "get_apStatus"
    has_return_type: true
    return_type: "int32"
    attributes: "Property.Get(apStatus)"
  }
  procedures {
    name: "get_AscentAP"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(AscentAP)"
  }
  procedures {
    name: "set_AscentAP"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(AscentAP)"
  }
  procedures {
    name: "get_AscentAlt"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(AscentAlt)"
  }
  procedures {
    name: "set_AscentAlt"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(AscentAlt)"
  }
  procedures {
    name: "get_AscentInc"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(AscentInc)"
  }
  procedures {
    name: "set_AscentInc"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(AscentInc)"
  }
  procedures {
    name: "get_AscentLanDifference"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(AscentLanDifference)"
  }
  procedures {
    name: "set_AscentLanDifference"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(AscentLanDifference)"
  }
  procedures {
    name: "get_AscentPhaseAngle"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(AscentPhaseAngle)"
  }
  procedures {
    name: "set_AscentPhaseAngle"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(AscentPhaseAngle)"
  }
  procedures {
    name: "get_AscentLimitAOA"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(AscentLimitAOA)"
  }
  procedures {
    name: "set_AscentLimitAOA"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(AscentLimitAOA)"
  }
  procedures {
    name: "get_AscentMaxAOA"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(AscentMaxAOA)"
  }
  procedures {
    name: "set_AscentMaxAOA"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(AscentMaxAOA)"
  }
  procedures {
    name: "get_AscentTurnRoll"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(AscentTurnRoll)"
  }
  procedures {
    name: "set_AscentTurnRoll"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(AscentTurnRoll)"
  }
  procedures {
    name: "get_AscentClimbRoll"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(AscentClimbRoll)"
  }
  procedures {
    name: "set_AscentClimbRoll"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(AscentClimbRoll)"
  }
  procedures {
    name: "get_AscentForceRoll"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(AscentForceRoll)"
  }
  procedures {
    name: "set_AscentForceRoll"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(AscentForceRoll)"
  }
  procedures {
    name: "get_AscentCorrectiveSteering"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(AscentCorrectiveSteering)"
  }
  procedures {
    name: "set_AscentCorrectiveSteering"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(AscentCorrectiveSteering)"
  }
  procedures {
    name: "get_AscentStatus"
    has_return_type: true
    return_type: "string"
    attributes: "Property.Get(AscentStatus)"
  }
  procedures {
    name: "get_CoreLimitThrottle"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(CoreLimitThrottle)"
  }
  procedures {
    name: "set_CoreLimitThrottle"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(CoreLimitThrottle)"
  }
  procedures {
    name: "get_CoreMaxThrottle"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(CoreMaxThrottle)"
  }
  procedures {
    name: "set_CoreMaxThrottle"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(CoreMaxThrottle)"
  }
  procedures {
    name: "get_CoreLimitTerminalV"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(CoreLimitTerminalV)"
  }
  procedures {
    name: "set_CoreLimitTerminalV"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(CoreLimitTerminalV)"
  }
  procedures {
    name: "get_CoreLimitQ"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(CoreLimitQ)"
  }
  procedures {
    name: "set_CoreLimitQ"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(CoreLimitQ)"
  }
  procedures {
    name: "get_CoreMaxQ"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(CoreMaxQ)"
  }
  procedures {
    name: "set_CoreMaxQ"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(CoreMaxQ)"
  }
  procedures {
    name: "get_CoreLimitAccel"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(CoreLimitAccel)"
  }
  procedures {
    name: "set_CoreLimitAccel"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(CoreLimitAccel)"
  }
  procedures {
    name: "get_CoreMaxAccel"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(CoreMaxAccel)"
  }
  procedures {
    name: "set_CoreMaxAccel"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(CoreMaxAccel)"
  }
  procedures {
    name: "get_Autowarp"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(Autowarp)"
  }
  procedures {
    name: "set_Autowarp"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(Autowarp)"
  }
  procedures {
    name: "get_DockingAp"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(DockingAp)"
  }
  procedures {
    name: "set_DockingAp"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(DockingAp)"
  }
  procedures {
    name: "get_DockingOverideSafeDistance"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(DockingOverideSafeDistance)"
  }
  procedures {
    name: "set_DockingOverideSafeDistance"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(DockingOverideSafeDistance)"
  }
  procedures {
    name: "get_DockingForceRoll"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(DockingForceRoll)"
  }
  procedures {
    name: "set_DockingForceRoll"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(DockingForceRoll)"
  }
  procedures {
    name: "get_DockingForceRollAngle"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(DockingForceRollAngle)"
  }
  procedures {
    name: "set_DockingForceRollAngle"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(DockingForceRollAngle)"
  }
  procedures {
    name: "get_DockingSpeedLimit"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(DockingSpeedLimit)"
  }
  procedures {
    name: "set_DockingSpeedLimit"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(DockingSpeedLimit)"
  }
  procedures {
    name: "get_DockingSepX"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(DockingSepX)"
  }
  procedures {
    name: "get_DockingSepY"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(DockingSepY)"
  }
  procedures {
    name: "get_DockingSepZ"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(DockingSepZ)"
  }
  procedures {
    name: "get_LandAP"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(LandAP)"
  }
  procedures {
    name: "set_LandAP"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(LandAP)"
  }
  procedures {
    name: "set_LandShowPath"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(LandShowPath)"
  }
  procedures {
    name: "get_LandGear"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(LandGear)"
  }
  procedures {
    name: "set_LandGear"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(LandGear)"
  }
  procedures {
    name: "get_LandChutes"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(LandChutes)"
  }
  procedures {
    name: "set_LandChutes"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(LandChutes)"
  }
  procedures {
    name: "get_LandUT"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(LandUT)"
  }
  procedures {
    name: "get_LandSuicideBurn"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(LandSuicideBurn)"
  }
  procedures {
    name: "get_LandTargetLat"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(LandTargetLat)"
  }
  procedures {
    name: "get_LandTargetLong"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(LandTargetLong)"
  }
  procedures {
    name: "get_LandMessage"
    has_return_type: true
    return_type: "string"
    attributes: "Property.Get(LandMessage)"
  }
  procedures {
    name: "get_TranslatronAP"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(TranslatronAP)"
  }
  procedures {
    name: "set_TranslatronAP"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(TranslatronAP)"
  }
  procedures {
    name: "get_TranslatronCancelHv"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(TranslatronCancelHv)"
  }
  procedures {
    name: "set_TranslatronCancelHv"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(TranslatronCancelHv)"
  }
  procedures {
    name: "get_TranslatronVv"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(TranslatronVv)"
  }
  procedures {
    name: "set_TranslatronVv"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(TranslatronVv)"
  }
  procedures {
    name: "set_TranslatronMode"
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Property.Set(TranslatronMode)"
    attributes: "ParameterType(0).Enum(krpcmj.TransMode)"
  }
  procedures {
    name: "get_ExecutorStatus"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(ExecutorStatus)"
  }
  procedures {
    name: "get_RendezvousAP"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(RendezvousAP)"
  }
  procedures {
    name: "set_RendezvousAP"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(RendezvousAP)"
  }
  procedures {
    name: "get_rdzvDist"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(rdzvDist)"
  }
  procedures {
    name: "set_rdzvDist"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(rdzvDist)"
  }
  procedures {
    name: "get_rdzvMaxOrbits"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(rdzvMaxOrbits)"
  }
  procedures {
    name: "set_rdzvMaxOrbits"
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Property.Set(rdzvMaxOrbits)"
  }
  procedures {
    name: "get_rdzvMessage"
    has_return_type: true
    return_type: "string"
    attributes: "Property.Get(rdzvMessage)"
  }
  procedures {
    name: "get_saMode"
    has_return_type: true
    return_type: "int32"
    attributes: "Property.Get(saMode)"
    attributes: "ReturnType.Enum(krpcmj.SAMode)"
  }
  procedures {
    name: "set_saMode"
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Property.Set(saMode)"
    attributes: "ParameterType(0).Enum(krpcmj.SAMode)"
  }
  procedures {
    name: "get_saStatus"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(saStatus)"
  }
  procedures {
    name: "set_saStatus"
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Property.Set(saStatus)"
  }
  enumerations {
    name: "TransMode"
    values {
      name: "OFF"
    }
    values {
      name: "ORBITAL"
      value: 1
    }
    values {
      name: "SURFACE"
      value: 2
    }
    values {
      name: "VERTICAL"
      value: 3
    }
    values {
      name: "RELATIVE"
      value: 4
    }
    values {
      name: "DIRECT"
      value: 5
    }
  }
  enumerations {
    name: "SAMode"
    values {
      name: "OFF"
    }
    values {
      name: "KILLROT"
      value: 1
    }
    values {
      name: "NODE"
      value: 2
    }
    values {
      name: "SURFACE"
      value: 3
    }
    values {
      name: "PROGRADE"
      value: 4
    }
    values {
      name: "RETROGRADE"
      value: 5
    }
    values {
      name: "NORMAL_PLUS"
      value: 6
    }
    values {
      name: "NORMAL_MINUS"
      value: 7
    }
    values {
      name: "RADIAL_PLUS"
      value: 8
    }
    values {
      name: "RADIAL_MINUS"
      value: 9
    }
    values {
      name: "RELATIVE_PLUS"
      value: 10
    }
    values {
      name: "RELATIVE_MINUS"
      value: 11
    }
    values {
      name: "TARGET_PLUS"
      value: 12
    }
    values {
      name: "TARGET_MINUS"
      value: 13
    }
    values {
      name: "PARALLEL_PLUS"
      value: 14
    }
    values {
      name: "PARALLEL_MINUS"
      value: 15
    }
    values {
      name: "ADVANCED"
      value: 16
    }
    values {
      name: "AUTO"
      value: 17
    }
    values {
      name: "SURFACE_PROGRADE"
      value: 18
    }
    values {
      name: "SURFACE_RETROGRADE"
      value: 19
    }
    values {
      name: "HORIZONTAL_PLUS"
      value: 20
    }
    values {
      name: "HORIZONTAL_MINUS"
      value: 21
    }
    values {
      name: "VERTICAL_PLUS"
      value: 22
    }
  }
}
services {
  name: "GegiVersion"
  procedures {
    name: "get_Version"
    has_return_type: true
    return_type: "string"
    attributes: "Property.Get(Version)"
  }
}
services {
  name: "Gegi"
  procedures {
    name: "get_ActiveGegi"
    has_return_type: true
    return_type: "uint64"
    attributes: "Property.Get(ActiveGegi)"
    attributes: "ReturnType.Class(Gegi.GegiStream)"
  }
  procedures {
    name: "GegiStream_MaxTempPct"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Method(Gegi.GegiStream,MaxTempPct)"
    attributes: "ParameterType(0).Class(Gegi.GegiStream)"
  }
  classes {
    name: "GegiStream"
  }
}
services {
  name: "UI"
  procedures {
    name: "AddCanvas"
    has_return_type: true
    return_type: "uint64"
    attributes: "ReturnType.Class(UI.Canvas)"
    documentation: "<doc>\n  <summary>\nAdd a new canvas.\n</summary>\n  <remarks>\nIf you want to add UI elements to KSPs stock UI canvas, use <see cref=\"M:UI.StockCanvas\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Message"
    parameters {
      name: "content"
      type: "string"
    }
    parameters {
      name: "duration"
      type: "float"
      has_default_value: true
      default_value: "\000\000\200?"
    }
    parameters {
      name: "position"
      type: "int32"
      has_default_value: true
      default_value: "\001"
    }
    attributes: "ParameterType(2).Enum(UI.MessagePosition)"
    documentation: "<doc>\n  <summary>\nDisplay a message on the screen.\n</summary>\n  <remarks>\nThe message appears just like a stock message, for example quicksave or quickload messages.\n</remarks>\n  <param name=\"content\">Message content.</param>\n  <param name=\"duration\">Duration before the message disappears, in seconds.</param>\n  <param name=\"position\">Position to display the message.</param>\n</doc>"
  }
  procedures {
    name: "Clear"
    parameters {
      name: "clientOnly"
      type: "bool"
      has_default_value: true
      default_value: "\000"
    }
    documentation: "<doc>\n  <summary>\nRemove all user interface elements.\n</summary>\n  <param name=\"clientOnly\">If true, only remove objects created by the calling client.</param>\n</doc>"
  }
  procedures {
    name: "get_StockCanvas"
    has_return_type: true
    return_type: "uint64"
    attributes: "Property.Get(StockCanvas)"
    attributes: "ReturnType.Class(UI.Canvas)"
    documentation: "<doc>\n  <summary>\nThe stock UI canvas.\n</summary>\n</doc>"
  }
  procedures {
    name: "Button_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(UI.Button,Remove)"
    attributes: "ParameterType(0).Class(UI.Button)"
    documentation: "<doc>\n  <summary>\nRemove the UI object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Button_get_RectTransform"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(UI.Button,RectTransform)"
    attributes: "ParameterType(0).Class(UI.Button)"
    attributes: "ReturnType.Class(UI.RectTransform)"
    documentation: "<doc>\n  <summary>\nThe rect transform for the text.\n</summary>\n</doc>"
  }
  procedures {
    name: "Button_get_Text"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(UI.Button,Text)"
    attributes: "ParameterType(0).Class(UI.Button)"
    attributes: "ReturnType.Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nThe text for the button.\n</summary>\n</doc>"
  }
  procedures {
    name: "Button_get_Clicked"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(UI.Button,Clicked)"
    attributes: "ParameterType(0).Class(UI.Button)"
    documentation: "<doc>\n  <summary>\nWhether the button has been clicked.\n</summary>\n  <remarks>\nThis property is set to true when the user clicks the button.\nA client script should reset the property to false in order to detect subsequent button presses.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Button_set_Clicked"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(UI.Button,Clicked)"
    attributes: "ParameterType(0).Class(UI.Button)"
    documentation: "<doc>\n  <summary>\nWhether the button has been clicked.\n</summary>\n  <remarks>\nThis property is set to true when the user clicks the button.\nA client script should reset the property to false in order to detect subsequent button presses.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Button_get_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(UI.Button,Visible)"
    attributes: "ParameterType(0).Class(UI.Button)"
    documentation: "<doc>\n  <summary>\nWhether the UI object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Button_set_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(UI.Button,Visible)"
    attributes: "ParameterType(0).Class(UI.Button)"
    documentation: "<doc>\n  <summary>\nWhether the UI object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Canvas_AddPanel"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(UI.Canvas,AddPanel)"
    attributes: "ParameterType(0).Class(UI.Canvas)"
    attributes: "ReturnType.Class(UI.Panel)"
    documentation: "<doc>\n  <summary>\nCreate a new container for user interface elements.\n</summary>\n  <param name=\"visible\">Whether the panel is visible.</param>\n</doc>"
  }
  procedures {
    name: "Canvas_AddText"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "content"
      type: "string"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(UI.Canvas,AddText)"
    attributes: "ParameterType(0).Class(UI.Canvas)"
    attributes: "ReturnType.Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nAdd text to the canvas.\n</summary>\n  <param name=\"content\">The text.</param>\n  <param name=\"visible\">Whether the text is visible.</param>\n</doc>"
  }
  procedures {
    name: "Canvas_AddInputField"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(UI.Canvas,AddInputField)"
    attributes: "ParameterType(0).Class(UI.Canvas)"
    attributes: "ReturnType.Class(UI.InputField)"
    documentation: "<doc>\n  <summary>\nAdd an input field to the canvas.\n</summary>\n  <param name=\"visible\">Whether the input field is visible.</param>\n</doc>"
  }
  procedures {
    name: "Canvas_AddButton"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "content"
      type: "string"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(UI.Canvas,AddButton)"
    attributes: "ParameterType(0).Class(UI.Canvas)"
    attributes: "ReturnType.Class(UI.Button)"
    documentation: "<doc>\n  <summary>\nAdd a button to the canvas.\n</summary>\n  <param name=\"content\">The label for the button.</param>\n  <param name=\"visible\">Whether the button is visible.</param>\n</doc>"
  }
  procedures {
    name: "Canvas_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(UI.Canvas,Remove)"
    attributes: "ParameterType(0).Class(UI.Canvas)"
    documentation: "<doc>\n  <summary>\nRemove the UI object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Canvas_get_RectTransform"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(UI.Canvas,RectTransform)"
    attributes: "ParameterType(0).Class(UI.Canvas)"
    attributes: "ReturnType.Class(UI.RectTransform)"
    documentation: "<doc>\n  <summary>\nThe rect transform for the canvas.\n</summary>\n</doc>"
  }
  procedures {
    name: "Canvas_get_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(UI.Canvas,Visible)"
    attributes: "ParameterType(0).Class(UI.Canvas)"
    documentation: "<doc>\n  <summary>\nWhether the UI object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Canvas_set_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(UI.Canvas,Visible)"
    attributes: "ParameterType(0).Class(UI.Canvas)"
    documentation: "<doc>\n  <summary>\nWhether the UI object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "InputField_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(UI.InputField,Remove)"
    attributes: "ParameterType(0).Class(UI.InputField)"
    documentation: "<doc>\n  <summary>\nRemove the UI object.\n</summary>\n</doc>"
  }
  procedures {
    name: "InputField_get_RectTransform"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(UI.InputField,RectTransform)"
    attributes: "ParameterType(0).Class(UI.InputField)"
    attributes: "ReturnType.Class(UI.RectTransform)"
    documentation: "<doc>\n  <summary>\nThe rect transform for the input field.\n</summary>\n</doc>"
  }
  procedures {
    name: "InputField_get_Value"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(UI.InputField,Value)"
    attributes: "ParameterType(0).Class(UI.InputField)"
    documentation: "<doc>\n  <summary>\nThe value of the input field.\n</summary>\n</doc>"
  }
  procedures {
    name: "InputField_set_Value"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(UI.InputField,Value)"
    attributes: "ParameterType(0).Class(UI.InputField)"
    documentation: "<doc>\n  <summary>\nThe value of the input field.\n</summary>\n</doc>"
  }
  procedures {
    name: "InputField_get_Text"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(UI.InputField,Text)"
    attributes: "ParameterType(0).Class(UI.InputField)"
    attributes: "ReturnType.Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nThe text component of the input field.\n</summary>\n  <remarks>\nUse <see cref=\"M:UI.InputField.Value\" /> to get and set the value in the field.\nThis object can be used to alter the style of the input field\'s text.\n</remarks>\n</doc>"
  }
  procedures {
    name: "InputField_get_Changed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(UI.InputField,Changed)"
    attributes: "ParameterType(0).Class(UI.InputField)"
    documentation: "<doc>\n  <summary>\nWhether the input field has been changed.\n</summary>\n  <remarks>\nThis property is set to true when the user modifies the value of the input field.\nA client script should reset the property to false in order to detect subsequent changes.\n</remarks>\n</doc>"
  }
  procedures {
    name: "InputField_set_Changed"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(UI.InputField,Changed)"
    attributes: "ParameterType(0).Class(UI.InputField)"
    documentation: "<doc>\n  <summary>\nWhether the input field has been changed.\n</summary>\n  <remarks>\nThis property is set to true when the user modifies the value of the input field.\nA client script should reset the property to false in order to detect subsequent changes.\n</remarks>\n</doc>"
  }
  procedures {
    name: "InputField_get_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(UI.InputField,Visible)"
    attributes: "ParameterType(0).Class(UI.InputField)"
    documentation: "<doc>\n  <summary>\nWhether the UI object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "InputField_set_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(UI.InputField,Visible)"
    attributes: "ParameterType(0).Class(UI.InputField)"
    documentation: "<doc>\n  <summary>\nWhether the UI object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Panel_AddPanel"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(UI.Panel,AddPanel)"
    attributes: "ParameterType(0).Class(UI.Panel)"
    attributes: "ReturnType.Class(UI.Panel)"
    documentation: "<doc>\n  <summary>\nCreate a panel within this panel.\n</summary>\n  <param name=\"visible\">Whether the new panel is visible.</param>\n</doc>"
  }
  procedures {
    name: "Panel_AddText"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "content"
      type: "string"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(UI.Panel,AddText)"
    attributes: "ParameterType(0).Class(UI.Panel)"
    attributes: "ReturnType.Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nAdd text to the panel.\n</summary>\n  <param name=\"content\">The text.</param>\n  <param name=\"visible\">Whether the text is visible.</param>\n</doc>"
  }
  procedures {
    name: "Panel_AddInputField"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(UI.Panel,AddInputField)"
    attributes: "ParameterType(0).Class(UI.Panel)"
    attributes: "ReturnType.Class(UI.InputField)"
    documentation: "<doc>\n  <summary>\nAdd an input field to the panel.\n</summary>\n  <param name=\"visible\">Whether the input field is visible.</param>\n</doc>"
  }
  procedures {
    name: "Panel_AddButton"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "content"
      type: "string"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(UI.Panel,AddButton)"
    attributes: "ParameterType(0).Class(UI.Panel)"
    attributes: "ReturnType.Class(UI.Button)"
    documentation: "<doc>\n  <summary>\nAdd a button to the panel.\n</summary>\n  <param name=\"content\">The label for the button.</param>\n  <param name=\"visible\">Whether the button is visible.</param>\n</doc>"
  }
  procedures {
    name: "Panel_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(UI.Panel,Remove)"
    attributes: "ParameterType(0).Class(UI.Panel)"
    documentation: "<doc>\n  <summary>\nRemove the UI object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Panel_get_RectTransform"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(UI.Panel,RectTransform)"
    attributes: "ParameterType(0).Class(UI.Panel)"
    attributes: "ReturnType.Class(UI.RectTransform)"
    documentation: "<doc>\n  <summary>\nThe rect transform for the panel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Panel_get_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(UI.Panel,Visible)"
    attributes: "ParameterType(0).Class(UI.Panel)"
    documentation: "<doc>\n  <summary>\nWhether the UI object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Panel_set_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(UI.Panel,Visible)"
    attributes: "ParameterType(0).Class(UI.Panel)"
    documentation: "<doc>\n  <summary>\nWhether the UI object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_get_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.RectTransform,Position)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ReturnType.Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nPosition of the rectangles pivot point relative to the anchors.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,Position)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nPosition of the rectangles pivot point relative to the anchors.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_get_LocalPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.RectTransform,LocalPosition)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nPosition of the rectangles pivot point relative to the anchors.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_LocalPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,LocalPosition)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nPosition of the rectangles pivot point relative to the anchors.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_get_Size"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.RectTransform,Size)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ReturnType.Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nWidth and height of the rectangle.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_Size"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,Size)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nWidth and height of the rectangle.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_get_UpperRight"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.RectTransform,UpperRight)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ReturnType.Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nPosition of the rectangles upper right corner relative to the anchors.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_UpperRight"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,UpperRight)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nPosition of the rectangles upper right corner relative to the anchors.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_get_LowerLeft"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.RectTransform,LowerLeft)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ReturnType.Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nPosition of the rectangles lower left corner relative to the anchors.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_LowerLeft"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,LowerLeft)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nPosition of the rectangles lower left corner relative to the anchors.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_Anchor"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,Anchor)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nSet the minimum and maximum anchor points as a fraction of the size of the parent rectangle.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_get_AnchorMax"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.RectTransform,AnchorMax)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ReturnType.Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nThe anchor point for the lower left corner of the rectangle defined as a fraction of the size of the parent rectangle.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_AnchorMax"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,AnchorMax)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nThe anchor point for the lower left corner of the rectangle defined as a fraction of the size of the parent rectangle.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_get_AnchorMin"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.RectTransform,AnchorMin)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ReturnType.Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nThe anchor point for the upper right corner of the rectangle defined as a fraction of the size of the parent rectangle.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_AnchorMin"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,AnchorMin)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nThe anchor point for the upper right corner of the rectangle defined as a fraction of the size of the parent rectangle.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_get_Pivot"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.RectTransform,Pivot)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ReturnType.Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nLocation of the pivot point around which the rectangle rotates, defined as a fraction of the size of the rectangle itself.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_Pivot"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,Pivot)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double)"
    documentation: "<doc>\n  <summary>\nLocation of the pivot point around which the rectangle rotates, defined as a fraction of the size of the rectangle itself.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_get_Rotation"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.RectTransform,Rotation)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ReturnType.Tuple(double,double,double,double)"
    documentation: "<doc>\n  <summary>\nRotation, as a quaternion, of the object around its pivot point.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_Rotation"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,Rotation)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double,double,double)"
    documentation: "<doc>\n  <summary>\nRotation, as a quaternion, of the object around its pivot point.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_get_Scale"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.RectTransform,Scale)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nScale factor applied to the object in the x, y and z dimensions.\n</summary>\n</doc>"
  }
  procedures {
    name: "RectTransform_set_Scale"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.RectTransform,Scale)"
    attributes: "ParameterType(0).Class(UI.RectTransform)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nScale factor applied to the object in the x, y and z dimensions.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(UI.Text,Remove)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nRemove the UI object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_RectTransform"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(UI.Text,RectTransform)"
    attributes: "ParameterType(0).Class(UI.Text)"
    attributes: "ReturnType.Class(UI.RectTransform)"
    documentation: "<doc>\n  <summary>\nThe rect transform for the text.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_AvailableFonts"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(UI.Text,AvailableFonts)"
    attributes: "ParameterType(0).Class(UI.Text)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nA list of all available fonts.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Content"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(UI.Text,Content)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nThe text string\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Content"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(UI.Text,Content)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nThe text string\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Font"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(UI.Text,Font)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nName of the font\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Font"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(UI.Text,Font)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nName of the font\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Size"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(UI.Text,Size)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nFont size.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Size"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(UI.Text,Size)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nFont size.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Style"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(UI.Text,Style)"
    attributes: "ParameterType(0).Class(UI.Text)"
    attributes: "ReturnType.Enum(UI.FontStyle)"
    documentation: "<doc>\n  <summary>\nFont style.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Style"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(UI.Text,Style)"
    attributes: "ParameterType(0).Class(UI.Text)"
    attributes: "ParameterType(1).Enum(UI.FontStyle)"
    documentation: "<doc>\n  <summary>\nFont style.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Alignment"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(UI.Text,Alignment)"
    attributes: "ParameterType(0).Class(UI.Text)"
    attributes: "ReturnType.Enum(UI.TextAnchor)"
    documentation: "<doc>\n  <summary>\nAlignment.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Alignment"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(UI.Text,Alignment)"
    attributes: "ParameterType(0).Class(UI.Text)"
    attributes: "ParameterType(1).Enum(UI.TextAnchor)"
    documentation: "<doc>\n  <summary>\nAlignment.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_LineSpacing"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(UI.Text,LineSpacing)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nLine spacing.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_LineSpacing"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(UI.Text,LineSpacing)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nLine spacing.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(UI.Text,Color)"
    attributes: "ParameterType(0).Class(UI.Text)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nSet the color\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(UI.Text,Color)"
    attributes: "ParameterType(0).Class(UI.Text)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nSet the color\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(UI.Text,Visible)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nWhether the UI object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(UI.Text,Visible)"
    attributes: "ParameterType(0).Class(UI.Text)"
    documentation: "<doc>\n  <summary>\nWhether the UI object is visible.\n</summary>\n</doc>"
  }
  classes {
    name: "Button"
    documentation: "<doc>\n  <summary>\nA text label. See <see cref=\"M:UI.Panel.AddButton\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Canvas"
    documentation: "<doc>\n  <summary>\nA canvas for user interface elements. See <see cref=\"M:UI.StockCanvas\" /> and <see cref=\"M:UI.AddCanvas\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "InputField"
    documentation: "<doc>\n  <summary>\nAn input field. See <see cref=\"M:UI.Panel.AddInputField\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Panel"
    documentation: "<doc>\n  <summary>\nA container for user interface elements. See <see cref=\"M:UI.Canvas.AddPanel\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "RectTransform"
    documentation: "<doc>\n  <summary>\nA Unity engine Rect Transform for a UI object.\nSee the <a href=\"http://docs.unity3d.com/Manual/class-RectTransform.html\">Unity manual</a> for more details.\n</summary>\n</doc>"
  }
  classes {
    name: "Text"
    documentation: "<doc>\n  <summary>\nA text label. See <see cref=\"M:UI.Panel.AddText\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "FontStyle"
    values {
      name: "Normal"
      documentation: "<doc>\n  <summary>\nNormal.\n</summary>\n</doc>"
    }
    values {
      name: "Bold"
      value: 1
      documentation: "<doc>\n  <summary>\nBold.\n</summary>\n</doc>"
    }
    values {
      name: "Italic"
      value: 2
      documentation: "<doc>\n  <summary>\nItalic.\n</summary>\n</doc>"
    }
    values {
      name: "BoldAndItalic"
      value: 3
      documentation: "<doc>\n  <summary>\nBold and italic.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nFont style.\n</summary>\n</doc>"
  }
  enumerations {
    name: "MessagePosition"
    values {
      name: "BottomCenter"
      documentation: "<doc>\n  <summary>\nBottom center.\n</summary>\n</doc>"
    }
    values {
      name: "TopCenter"
      value: 1
      documentation: "<doc>\n  <summary>\nTop center.\n</summary>\n</doc>"
    }
    values {
      name: "TopLeft"
      value: 2
      documentation: "<doc>\n  <summary>\nTop left.\n</summary>\n</doc>"
    }
    values {
      name: "TopRight"
      value: 3
      documentation: "<doc>\n  <summary>\nTop right.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nMessage position.\n</summary>\n</doc>"
  }
  enumerations {
    name: "TextAlignment"
    values {
      name: "Left"
      documentation: "<doc>\n  <summary>\nLeft aligned.\n</summary>\n</doc>"
    }
    values {
      name: "Right"
      value: 1
      documentation: "<doc>\n  <summary>\nRight aligned.\n</summary>\n</doc>"
    }
    values {
      name: "Center"
      value: 2
      documentation: "<doc>\n  <summary>\nCenter aligned.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nText alignment.\n</summary>\n</doc>"
  }
  enumerations {
    name: "TextAnchor"
    values {
      name: "LowerCenter"
      documentation: "<doc>\n  <summary>\nLower center.\n</summary>\n</doc>"
    }
    values {
      name: "LowerLeft"
      value: 1
      documentation: "<doc>\n  <summary>\nLower left.\n</summary>\n</doc>"
    }
    values {
      name: "LowerRight"
      value: 2
      documentation: "<doc>\n  <summary>\nLower right.\n</summary>\n</doc>"
    }
    values {
      name: "MiddleCenter"
      value: 3
      documentation: "<doc>\n  <summary>\nMiddle center.\n</summary>\n</doc>"
    }
    values {
      name: "MiddleLeft"
      value: 4
      documentation: "<doc>\n  <summary>\nMiddle left.\n</summary>\n</doc>"
    }
    values {
      name: "MiddleRight"
      value: 5
      documentation: "<doc>\n  <summary>\nMiddle right.\n</summary>\n</doc>"
    }
    values {
      name: "UpperCenter"
      value: 6
      documentation: "<doc>\n  <summary>\nUpper center.\n</summary>\n</doc>"
    }
    values {
      name: "UpperLeft"
      value: 7
      documentation: "<doc>\n  <summary>\nUpper left.\n</summary>\n</doc>"
    }
    values {
      name: "UpperRight"
      value: 8
      documentation: "<doc>\n  <summary>\nUpper right.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nText alignment.\n</summary>\n</doc>"
  }
  documentation: "<doc>\n  <summary>\nProvides functionality for drawing and interacting with in-game user interface elements.\n</summary>\n  <remarks>\nFor drawing 3D objects in the flight scene, see the Drawing service.\n</remarks>\n</doc>"
}
services {
  name: "RemoteTech"
  procedures {
    name: "Comms"
    parameters {
      name: "vessel"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(RemoteTech.Comms)"
    documentation: "<doc>\n  <summary>\nGet a communications object, representing the communication capability of a particular vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna"
    parameters {
      name: "part"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(RemoteTech.Antenna)"
    documentation: "<doc>\n  <summary>\nGet the antenna object for a particular part.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_GroundStations"
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Property.Get(GroundStations)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nThe names of the ground stations.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(RemoteTech.Antenna,Part)"
    attributes: "ParameterType(0).Class(RemoteTech.Antenna)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nGet the part containing this antenna.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna_get_HasConnection"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(RemoteTech.Antenna,HasConnection)"
    attributes: "ParameterType(0).Class(RemoteTech.Antenna)"
    documentation: "<doc>\n  <summary>\nWhether the antenna has a connection.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna_get_Target"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(RemoteTech.Antenna,Target)"
    attributes: "ParameterType(0).Class(RemoteTech.Antenna)"
    attributes: "ReturnType.Enum(RemoteTech.Target)"
    documentation: "<doc>\n  <summary>\nThe object that the antenna is targetting.\nThis property can be used to set the target to <see cref=\"M:RemoteTech.Target.None\" /> or <see cref=\"M:RemoteTech.Target.ActiveVessel\" />.\nTo set the target to a celestial body, ground station or vessel see <see cref=\"M:RemoteTech.Antenna.TargetBody\" />,\n<see cref=\"M:RemoteTech.Antenna.TargetGroundStation\" /> and <see cref=\"M:RemoteTech.Antenna.TargetVessel\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna_set_Target"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(RemoteTech.Antenna,Target)"
    attributes: "ParameterType(0).Class(RemoteTech.Antenna)"
    attributes: "ParameterType(1).Enum(RemoteTech.Target)"
    documentation: "<doc>\n  <summary>\nThe object that the antenna is targetting.\nThis property can be used to set the target to <see cref=\"M:RemoteTech.Target.None\" /> or <see cref=\"M:RemoteTech.Target.ActiveVessel\" />.\nTo set the target to a celestial body, ground station or vessel see <see cref=\"M:RemoteTech.Antenna.TargetBody\" />,\n<see cref=\"M:RemoteTech.Antenna.TargetGroundStation\" /> and <see cref=\"M:RemoteTech.Antenna.TargetVessel\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna_get_TargetBody"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(RemoteTech.Antenna,TargetBody)"
    attributes: "ParameterType(0).Class(RemoteTech.Antenna)"
    attributes: "ReturnType.Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe celestial body the antenna is targetting.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna_set_TargetBody"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(RemoteTech.Antenna,TargetBody)"
    attributes: "ParameterType(0).Class(RemoteTech.Antenna)"
    attributes: "ParameterType(1).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe celestial body the antenna is targetting.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna_get_TargetGroundStation"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(RemoteTech.Antenna,TargetGroundStation)"
    attributes: "ParameterType(0).Class(RemoteTech.Antenna)"
    documentation: "<doc>\n  <summary>\nThe ground station the antenna is targetting.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna_set_TargetGroundStation"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(RemoteTech.Antenna,TargetGroundStation)"
    attributes: "ParameterType(0).Class(RemoteTech.Antenna)"
    documentation: "<doc>\n  <summary>\nThe ground station the antenna is targetting.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna_get_TargetVessel"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(RemoteTech.Antenna,TargetVessel)"
    attributes: "ParameterType(0).Class(RemoteTech.Antenna)"
    attributes: "ReturnType.Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe vessel the antenna is targetting.\n</summary>\n</doc>"
  }
  procedures {
    name: "Antenna_set_TargetVessel"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(RemoteTech.Antenna,TargetVessel)"
    attributes: "ParameterType(0).Class(RemoteTech.Antenna)"
    attributes: "ParameterType(1).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe vessel the antenna is targetting.\n</summary>\n</doc>"
  }
  procedures {
    name: "Comms_SignalDelayToVessel"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "other"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Method(RemoteTech.Comms,SignalDelayToVessel)"
    attributes: "ParameterType(0).Class(RemoteTech.Comms)"
    attributes: "ParameterType(1).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe signal delay between the this vessel and another vessel, in seconds.\n</summary>\n  <param name=\"other\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Comms_get_Vessel"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(RemoteTech.Comms,Vessel)"
    attributes: "ParameterType(0).Class(RemoteTech.Comms)"
    attributes: "ReturnType.Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nGet the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Comms_get_HasLocalControl"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(RemoteTech.Comms,HasLocalControl)"
    attributes: "ParameterType(0).Class(RemoteTech.Comms)"
    documentation: "<doc>\n  <summary>\nWhether the vessel can be controlled locally.\n</summary>\n</doc>"
  }
  procedures {
    name: "Comms_get_HasFlightComputer"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(RemoteTech.Comms,HasFlightComputer)"
    attributes: "ParameterType(0).Class(RemoteTech.Comms)"
    documentation: "<doc>\n  <summary>\nWhether the vessel has a flight computer on board.\n</summary>\n</doc>"
  }
  procedures {
    name: "Comms_get_HasConnection"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(RemoteTech.Comms,HasConnection)"
    attributes: "ParameterType(0).Class(RemoteTech.Comms)"
    documentation: "<doc>\n  <summary>\nWhether the vessel has any connection.\n</summary>\n</doc>"
  }
  procedures {
    name: "Comms_get_HasConnectionToGroundStation"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(RemoteTech.Comms,HasConnectionToGroundStation)"
    attributes: "ParameterType(0).Class(RemoteTech.Comms)"
    documentation: "<doc>\n  <summary>\nWhether the vessel has a connection to a ground station.\n</summary>\n</doc>"
  }
  procedures {
    name: "Comms_get_SignalDelay"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(RemoteTech.Comms,SignalDelay)"
    attributes: "ParameterType(0).Class(RemoteTech.Comms)"
    documentation: "<doc>\n  <summary>\nThe shortest signal delay to the vessel, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Comms_get_SignalDelayToGroundStation"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(RemoteTech.Comms,SignalDelayToGroundStation)"
    attributes: "ParameterType(0).Class(RemoteTech.Comms)"
    documentation: "<doc>\n  <summary>\nThe signal delay between the vessel and the closest ground station, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Comms_get_Antennas"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(RemoteTech.Comms,Antennas)"
    attributes: "ParameterType(0).Class(RemoteTech.Comms)"
    attributes: "ReturnType.List(Class(RemoteTech.Antenna))"
    documentation: "<doc>\n  <summary>\nThe antennas for this vessel.\n</summary>\n</doc>"
  }
  classes {
    name: "Antenna"
    documentation: "<doc>\n  <summary>\nA RemoteTech antenna. Obtained by calling <see cref=\"M:RemoteTech.Comms.Antennas\" /> or  <see cref=\"M:RemoteTech.Antenna\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Comms"
    documentation: "<doc>\n  <summary>\nCommunications for a vessel.\n</summary>\n</doc>"
  }
  enumerations {
    name: "Target"
    values {
      name: "ActiveVessel"
      documentation: "<doc>\n  <summary>\nThe active vessel.\n</summary>\n</doc>"
    }
    values {
      name: "CelestialBody"
      value: 1
      documentation: "<doc>\n  <summary>\nA celestial body.\n</summary>\n</doc>"
    }
    values {
      name: "GroundStation"
      value: 2
      documentation: "<doc>\n  <summary>\nA ground station.\n</summary>\n</doc>"
    }
    values {
      name: "Vessel"
      value: 3
      documentation: "<doc>\n  <summary>\nA specific vessel.\n</summary>\n</doc>"
    }
    values {
      name: "None"
      value: 4
      documentation: "<doc>\n  <summary>\nNo target.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe type of object an antenna is targetting.\nSee <see cref=\"M:RemoteTech.Antenna.Target\" />.\n</summary>\n</doc>"
  }
  documentation: "<doc>\n  <summary>\nThis service provides functionality to interact with\n<a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/75245-11-remotetech-v1610-2016-04-12/\">RemoteTech</a>.\n</summary>\n</doc>"
}
services {
  name: "KerbalAlarmClock"
  procedures {
    name: "AlarmWithName"
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "ReturnType.Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nGet the alarm with the given <paramref name=\"name\" />, or <c>null</c>\nif no alarms have that name. If more than one alarm has the name,\nonly returns one of them.\n</summary>\n  <param name=\"name\">Name of the alarm to search for.</param>\n</doc>"
  }
  procedures {
    name: "AlarmsWithType"
    parameters {
      name: "type"
      type: "int32"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "ParameterType(0).Enum(KerbalAlarmClock.AlarmType)"
    attributes: "ReturnType.List(Class(KerbalAlarmClock.Alarm))"
    documentation: "<doc>\n  <summary>\nGet a list of alarms of the specified <paramref name=\"type\" />.\n</summary>\n  <param name=\"type\">Type of alarm to return.</param>\n</doc>"
  }
  procedures {
    name: "CreateAlarm"
    parameters {
      name: "type"
      type: "int32"
    }
    parameters {
      name: "name"
      type: "string"
    }
    parameters {
      name: "ut"
      type: "double"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "ParameterType(0).Enum(KerbalAlarmClock.AlarmType)"
    attributes: "ReturnType.Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nCreate a new alarm and return it.\n</summary>\n  <param name=\"type\">Type of the new alarm.</param>\n  <param name=\"name\">Name of the new alarm.</param>\n  <param name=\"ut\">Time at which the new alarm should trigger.</param>\n</doc>"
  }
  procedures {
    name: "get_Alarms"
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Property.Get(Alarms)"
    attributes: "ReturnType.List(Class(KerbalAlarmClock.Alarm))"
    documentation: "<doc>\n  <summary>\nA list of all the alarms.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(KerbalAlarmClock.Alarm,Remove)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nRemoves the alarm.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_Action"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,Action)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    attributes: "ReturnType.Enum(KerbalAlarmClock.AlarmAction)"
    documentation: "<doc>\n  <summary>\nThe action that the alarm triggers.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_set_Action"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(KerbalAlarmClock.Alarm,Action)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    attributes: "ParameterType(1).Enum(KerbalAlarmClock.AlarmAction)"
    documentation: "<doc>\n  <summary>\nThe action that the alarm triggers.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_Margin"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,Margin)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe number of seconds before the event that the alarm will fire.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_set_Margin"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Class.Property.Set(KerbalAlarmClock.Alarm,Margin)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe number of seconds before the event that the alarm will fire.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_Time"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,Time)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe time at which the alarm will fire.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_set_Time"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Class.Property.Set(KerbalAlarmClock.Alarm,Time)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe time at which the alarm will fire.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_Type"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,Type)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    attributes: "ReturnType.Enum(KerbalAlarmClock.AlarmType)"
    documentation: "<doc>\n  <summary>\nThe type of the alarm.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_ID"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,ID)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe unique identifier for the alarm.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,Name)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe short name of the alarm.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_set_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(KerbalAlarmClock.Alarm,Name)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe short name of the alarm.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_Notes"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,Notes)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe long description of the alarm.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_set_Notes"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(KerbalAlarmClock.Alarm,Notes)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe long description of the alarm.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_Remaining"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,Remaining)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe number of seconds until the alarm will fire.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_Repeat"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,Repeat)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nWhether the alarm will be repeated after it has fired.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_set_Repeat"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(KerbalAlarmClock.Alarm,Repeat)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nWhether the alarm will be repeated after it has fired.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_RepeatPeriod"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,RepeatPeriod)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe time delay to automatically create an alarm after it has fired.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_set_RepeatPeriod"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Class.Property.Set(KerbalAlarmClock.Alarm,RepeatPeriod)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    documentation: "<doc>\n  <summary>\nThe time delay to automatically create an alarm after it has fired.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_Vessel"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,Vessel)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    attributes: "ReturnType.Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe vessel that the alarm is attached to.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_set_Vessel"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(KerbalAlarmClock.Alarm,Vessel)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    attributes: "ParameterType(1).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe vessel that the alarm is attached to.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_XferOriginBody"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,XferOriginBody)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    attributes: "ReturnType.Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe celestial body the vessel is departing from.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_set_XferOriginBody"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(KerbalAlarmClock.Alarm,XferOriginBody)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    attributes: "ParameterType(1).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe celestial body the vessel is departing from.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_get_XferTargetBody"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(KerbalAlarmClock.Alarm,XferTargetBody)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    attributes: "ReturnType.Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe celestial body the vessel is arriving at.\n</summary>\n</doc>"
  }
  procedures {
    name: "Alarm_set_XferTargetBody"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(KerbalAlarmClock.Alarm,XferTargetBody)"
    attributes: "ParameterType(0).Class(KerbalAlarmClock.Alarm)"
    attributes: "ParameterType(1).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe celestial body the vessel is arriving at.\n</summary>\n</doc>"
  }
  classes {
    name: "Alarm"
    documentation: "<doc>\n  <summary>\nRepresents an alarm. Obtained by calling\n<see cref=\"M:KerbalAlarmClock.Alarms\" />,\n<see cref=\"M:KerbalAlarmClock.AlarmWithName\" /> or\n<see cref=\"M:KerbalAlarmClock.AlarmsWithType\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "AlarmAction"
    values {
      name: "DoNothing"
      documentation: "<doc>\n  <summary>\nDon\'t do anything at all...\n</summary>\n</doc>"
    }
    values {
      name: "DoNothingDeleteWhenPassed"
      value: 1
      documentation: "<doc>\n  <summary>\nDon\'t do anything, and delete the alarm.\n</summary>\n</doc>"
    }
    values {
      name: "KillWarp"
      value: 2
      documentation: "<doc>\n  <summary>\nDrop out of time warp.\n</summary>\n</doc>"
    }
    values {
      name: "KillWarpOnly"
      value: 3
      documentation: "<doc>\n  <summary>\nDrop out of time warp.\n</summary>\n</doc>"
    }
    values {
      name: "MessageOnly"
      value: 4
      documentation: "<doc>\n  <summary>\nDisplay a message.\n</summary>\n</doc>"
    }
    values {
      name: "PauseGame"
      value: 5
      documentation: "<doc>\n  <summary>\nPause the game.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe action performed by an alarm when it fires.\n</summary>\n</doc>"
  }
  enumerations {
    name: "AlarmType"
    values {
      name: "Raw"
      documentation: "<doc>\n  <summary>\nAn alarm for a specific date/time or a specific period in the future.\n</summary>\n</doc>"
    }
    values {
      name: "Maneuver"
      value: 1
      documentation: "<doc>\n  <summary>\nAn alarm based on the next maneuver node on the current ships flight path.\nThis node will be stored and can be restored when you come back to the ship.\n</summary>\n</doc>"
    }
    values {
      name: "ManeuverAuto"
      value: 2
      documentation: "<doc>\n  <summary>\nSee <see cref=\"M:KerbalAlarmClock.AlarmType.Maneuver\" />.\n</summary>\n</doc>"
    }
    values {
      name: "Apoapsis"
      value: 3
      documentation: "<doc>\n  <summary>\nAn alarm for furthest part of the orbit from the planet.\n</summary>\n</doc>"
    }
    values {
      name: "Periapsis"
      value: 4
      documentation: "<doc>\n  <summary>\nAn alarm for nearest part of the orbit from the planet.\n</summary>\n</doc>"
    }
    values {
      name: "AscendingNode"
      value: 5
      documentation: "<doc>\n  <summary>\nAscending node for the targeted object, or equatorial ascending node.\n</summary>\n</doc>"
    }
    values {
      name: "DescendingNode"
      value: 6
      documentation: "<doc>\n  <summary>\nDescending node for the targeted object, or equatorial descending node.\n</summary>\n</doc>"
    }
    values {
      name: "Closest"
      value: 7
      documentation: "<doc>\n  <summary>\nAn alarm based on the closest approach of this vessel to the targeted\nvessel, some number of orbits into the future.\n</summary>\n</doc>"
    }
    values {
      name: "Contract"
      value: 8
      documentation: "<doc>\n  <summary>\nAn alarm based on the expiry or deadline of contracts in career modes.\n</summary>\n</doc>"
    }
    values {
      name: "ContractAuto"
      value: 9
      documentation: "<doc>\n  <summary>\nSee <see cref=\"M:KerbalAlarmClock.AlarmType.Contract\" />.\n</summary>\n</doc>"
    }
    values {
      name: "Crew"
      value: 10
      documentation: "<doc>\n  <summary>\nAn alarm that is attached to a crew member.\n</summary>\n</doc>"
    }
    values {
      name: "Distance"
      value: 11
      documentation: "<doc>\n  <summary>\nAn alarm that is triggered when a selected target comes within a chosen distance.\n</summary>\n</doc>"
    }
    values {
      name: "EarthTime"
      value: 12
      documentation: "<doc>\n  <summary>\nAn alarm based on the time in the \"Earth\" alternative Universe (aka the Real World).\n</summary>\n</doc>"
    }
    values {
      name: "LaunchRendevous"
      value: 13
      documentation: "<doc>\n  <summary>\nAn alarm that fires as your landed craft passes under the orbit of your target.\n</summary>\n</doc>"
    }
    values {
      name: "SOIChange"
      value: 14
      documentation: "<doc>\n  <summary>\nAn alarm manually based on when the next SOI point is on the flight path\nor set to continually monitor the active flight path and add alarms as it\ndetects SOI changes.\n</summary>\n</doc>"
    }
    values {
      name: "SOIChangeAuto"
      value: 15
      documentation: "<doc>\n  <summary>\nSee <see cref=\"M:KerbalAlarmClock.AlarmType.SOIChange\" />.\n</summary>\n</doc>"
    }
    values {
      name: "Transfer"
      value: 16
      documentation: "<doc>\n  <summary>\nAn alarm based on Interplanetary Transfer Phase Angles, i.e. when should\nI launch to planet X? Based on Kosmo Not\'s post and used in Olex\'s\nCalculator.\n</summary>\n</doc>"
    }
    values {
      name: "TransferModelled"
      value: 17
      documentation: "<doc>\n  <summary>\nSee <see cref=\"M:KerbalAlarmClock.AlarmType.Transfer\" />.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe type of an alarm.\n</summary>\n</doc>"
  }
  documentation: "<doc>\n  <summary>\nThis service provides functionality to interact with\n<a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/22809-10x-kerbal-alarm-clock-v3500-dec-3/\">Kerbal Alarm Clock</a>.\n</summary>\n</doc>"
}
services {
  name: "InfernalRobotics"
  procedures {
    name: "ServoGroups"
    parameters {
      name: "vessel"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.List(Class(InfernalRobotics.ServoGroup))"
    documentation: "<doc>\n  <summary>\nA list of all the servo groups in the given <paramref name=\"vessel\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroupWithName"
    parameters {
      name: "vessel"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nReturns the servo group in the given <paramref name=\"vessel\" /> with the given <paramref name=\"name\" />,\nor <c>null</c> if none exists. If multiple servo groups have the same name, only one of them is returned.\n</summary>\n  <param name=\"vessel\">Vessel to check.</param>\n  <param name=\"name\">Name of servo group to find.</param>\n</doc>"
  }
  procedures {
    name: "ServoWithName"
    parameters {
      name: "vessel"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nReturns the servo in the given <paramref name=\"vessel\" /> with the given <paramref name=\"name\" /> or\n<c>null</c> if none exists. If multiple servos have the same name, only one of them is returned.\n</summary>\n  <param name=\"vessel\">Vessel to check.</param>\n  <param name=\"name\">Name of the servo to find.</param>\n</doc>"
  }
  procedures {
    name: "Servo_MoveRight"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.Servo,MoveRight)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nMoves the servo to the right.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_MoveLeft"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.Servo,MoveLeft)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nMoves the servo to the left.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_MoveCenter"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.Servo,MoveCenter)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nMoves the servo to the center.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_MoveNextPreset"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.Servo,MoveNextPreset)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nMoves the servo to the next preset.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_MovePrevPreset"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.Servo,MovePrevPreset)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nMoves the servo to the previous preset.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_MoveTo"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "position"
      type: "float"
    }
    parameters {
      name: "speed"
      type: "float"
    }
    attributes: "Class.Method(InfernalRobotics.Servo,MoveTo)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nMoves the servo to <paramref name=\"position\" /> and sets the\nspeed multiplier to <paramref name=\"speed\" />.\n</summary>\n  <param name=\"position\">The position to move the servo to.</param>\n  <param name=\"speed\">Speed multiplier for the movement.</param>\n</doc>"
  }
  procedures {
    name: "Servo_Stop"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.Servo,Stop)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nStops the servo.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,Name)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe name of the servo.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_set_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(InfernalRobotics.Servo,Name)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe name of the servo.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,Part)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part containing the servo.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_set_Highlight"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(InfernalRobotics.Servo,Highlight)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nWhether the servo should be highlighted in-game.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,Position)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe position of the servo.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_MinConfigPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,MinConfigPosition)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe minimum position of the servo, specified by the part configuration.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_MaxConfigPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,MaxConfigPosition)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe maximum position of the servo, specified by the part configuration.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_MinPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,MinPosition)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe minimum position of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_set_MinPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(InfernalRobotics.Servo,MinPosition)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe minimum position of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_MaxPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,MaxPosition)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe maximum position of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_set_MaxPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(InfernalRobotics.Servo,MaxPosition)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe maximum position of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_ConfigSpeed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,ConfigSpeed)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe speed multiplier of the servo, specified by the part configuration.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_Speed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,Speed)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe speed multiplier of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_set_Speed"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(InfernalRobotics.Servo,Speed)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe speed multiplier of the servo, specified by the in-game tweak menu.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_CurrentSpeed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,CurrentSpeed)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe current speed at which the servo is moving.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_set_CurrentSpeed"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(InfernalRobotics.Servo,CurrentSpeed)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe current speed at which the servo is moving.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_Acceleration"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,Acceleration)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe current speed multiplier set in the UI.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_set_Acceleration"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(InfernalRobotics.Servo,Acceleration)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nThe current speed multiplier set in the UI.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_IsMoving"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,IsMoving)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nWhether the servo is moving.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_IsFreeMoving"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,IsFreeMoving)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nWhether the servo is freely moving.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_IsLocked"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,IsLocked)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nWhether the servo is locked.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_set_IsLocked"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(InfernalRobotics.Servo,IsLocked)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nWhether the servo is locked.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_get_IsAxisInverted"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(InfernalRobotics.Servo,IsAxisInverted)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nWhether the servos axis is inverted.\n</summary>\n</doc>"
  }
  procedures {
    name: "Servo_set_IsAxisInverted"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(InfernalRobotics.Servo,IsAxisInverted)"
    attributes: "ParameterType(0).Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nWhether the servos axis is inverted.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_ServoWithName"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(InfernalRobotics.ServoGroup,ServoWithName)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    attributes: "ReturnType.Class(InfernalRobotics.Servo)"
    documentation: "<doc>\n  <summary>\nReturns the servo with the given <paramref name=\"name\" /> from this group,\nor <c>null</c> if none exists.\n</summary>\n  <param name=\"name\">Name of servo to find.</param>\n</doc>"
  }
  procedures {
    name: "ServoGroup_MoveRight"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.ServoGroup,MoveRight)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nMoves all of the servos in the group to the right.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_MoveLeft"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.ServoGroup,MoveLeft)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nMoves all of the servos in the group to the left.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_MoveCenter"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.ServoGroup,MoveCenter)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nMoves all of the servos in the group to the center.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_MoveNextPreset"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.ServoGroup,MoveNextPreset)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nMoves all of the servos in the group to the next preset.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_MovePrevPreset"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.ServoGroup,MovePrevPreset)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nMoves all of the servos in the group to the previous preset.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_Stop"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(InfernalRobotics.ServoGroup,Stop)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nStops the servos in the group.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_get_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(InfernalRobotics.ServoGroup,Name)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nThe name of the group.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_set_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(InfernalRobotics.ServoGroup,Name)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nThe name of the group.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_get_ForwardKey"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(InfernalRobotics.ServoGroup,ForwardKey)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nThe key assigned to be the \"forward\" key for the group.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_set_ForwardKey"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(InfernalRobotics.ServoGroup,ForwardKey)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nThe key assigned to be the \"forward\" key for the group.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_get_ReverseKey"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(InfernalRobotics.ServoGroup,ReverseKey)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nThe key assigned to be the \"reverse\" key for the group.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_set_ReverseKey"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(InfernalRobotics.ServoGroup,ReverseKey)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nThe key assigned to be the \"reverse\" key for the group.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_get_Speed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(InfernalRobotics.ServoGroup,Speed)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nThe speed multiplier for the group.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_set_Speed"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(InfernalRobotics.ServoGroup,Speed)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nThe speed multiplier for the group.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_get_Expanded"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(InfernalRobotics.ServoGroup,Expanded)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nWhether the group is expanded in the InfernalRobotics UI.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_set_Expanded"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(InfernalRobotics.ServoGroup,Expanded)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    documentation: "<doc>\n  <summary>\nWhether the group is expanded in the InfernalRobotics UI.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_get_Servos"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(InfernalRobotics.ServoGroup,Servos)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    attributes: "ReturnType.List(Class(InfernalRobotics.Servo))"
    documentation: "<doc>\n  <summary>\nThe servos that are in the group.\n</summary>\n</doc>"
  }
  procedures {
    name: "ServoGroup_get_Parts"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(InfernalRobotics.ServoGroup,Parts)"
    attributes: "ParameterType(0).Class(InfernalRobotics.ServoGroup)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nThe parts containing the servos in the group.\n</summary>\n</doc>"
  }
  classes {
    name: "Servo"
    documentation: "<doc>\n  <summary>\nRepresents a servo. Obtained using\n<see cref=\"M:InfernalRobotics.ServoGroup.Servos\" />,\n<see cref=\"M:InfernalRobotics.ServoGroup.ServoWithName\" />\nor <see cref=\"M:InfernalRobotics.ServoWithName\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "ServoGroup"
    documentation: "<doc>\n  <summary>\nA group of servos, obtained by calling <see cref=\"M:InfernalRobotics.ServoGroups\" />\nor <see cref=\"M:InfernalRobotics.ServoGroupWithName\" />. Represents the \"Servo Groups\"\nin the InfernalRobotics UI.\n</summary>\n</doc>"
  }
  documentation: "<doc>\n  <summary>\nThis service provides functionality to interact with\n<a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/104535-105-magic-smoke-industries-infernal-robotics-0214/\">Infernal Robotics</a>.\n</summary>\n</doc>"
}
services {
  name: "SpaceCenter"
  procedures {
    name: "ClearTarget"
    documentation: "<doc>\n  <summary>\nClears the current target.\n</summary>\n</doc>"
  }
  procedures {
    name: "LaunchableVessels"
    parameters {
      name: "craftDirectory"
      type: "string"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nReturns a list of vessels from the given <paramref name=\"craftDirectory\" /> that can be launched.\n</summary>\n  <param name=\"craftDirectory\">Name of the directory in the current saves \"Ships\" directory. For example <c>\"VAB\"</c> or <c>\"SPH\"</c>.</param>\n</doc>"
  }
  procedures {
    name: "LaunchVessel"
    parameters {
      name: "craftDirectory"
      type: "string"
    }
    parameters {
      name: "name"
      type: "string"
    }
    parameters {
      name: "launchSite"
      type: "string"
    }
    documentation: "<doc>\n  <summary>\nLaunch a vessel.\n</summary>\n  <param name=\"craftDirectory\">Name of the directory in the current saves \"Ships\" directory, that contains the craft file. For example <c>\"VAB\"</c> or <c>\"SPH\"</c>.</param>\n  <param name=\"name\">Name of the vessel to launch. This is the name of the \".craft\" file in the save directory, without the \".craft\" file extension.</param>\n  <param name=\"launchSite\">Name of the launch site. For example <c>\"LaunchPad\"</c> or <c>\"Runway\"</c>.</param>\n</doc>"
  }
  procedures {
    name: "LaunchVesselFromVAB"
    parameters {
      name: "name"
      type: "string"
    }
    documentation: "<doc>\n  <summary>\nLaunch a new vessel from the VAB onto the launchpad.\n</summary>\n  <param name=\"name\">Name of the vessel to launch.</param>\n  <remarks>\nThis is equivalent to calling <see cref=\"M:SpaceCenter.LaunchVessel\" /> with the craft directory set to \"VAB\" and the launch site set to \"LaunchPad\".\n</remarks>\n</doc>"
  }
  procedures {
    name: "LaunchVesselFromSPH"
    parameters {
      name: "name"
      type: "string"
    }
    documentation: "<doc>\n  <summary>\nLaunch a new vessel from the SPH onto the runway.\n</summary>\n  <param name=\"name\">Name of the vessel to launch.</param>\n  <remarks>\nThis is equivalent to calling <see cref=\"M:SpaceCenter.LaunchVessel\" /> with the craft directory set to \"SPH\" and the launch site set to \"Runway\".\n</remarks>\n</doc>"
  }
  procedures {
    name: "Save"
    parameters {
      name: "name"
      type: "string"
    }
    documentation: "<doc>\n  <summary>\nSave the game with a given name.\nThis will create a save file called <c>name.sfs</c> in the folder of the current save game.\n</summary>\n</doc>"
  }
  procedures {
    name: "Load"
    parameters {
      name: "name"
      type: "string"
    }
    documentation: "<doc>\n  <summary>\nLoad the game with the given name.\nThis will create a load a save file called <c>name.sfs</c> from the folder of the current save game.\n</summary>\n</doc>"
  }
  procedures {
    name: "Quicksave"
    documentation: "<doc>\n  <summary>\nSave a quicksave.\n</summary>\n  <remarks>\nThis is the same as calling <see cref=\"M:SpaceCenter.Save\" /> with the name \"quicksave\".\n</remarks>\n</doc>"
  }
  procedures {
    name: "Quickload"
    documentation: "<doc>\n  <summary>\nLoad a quicksave.\n</summary>\n  <remarks>\nThis is the same as calling <see cref=\"M:SpaceCenter.Load\" /> with the name \"quicksave\".\n</remarks>\n</doc>"
  }
  procedures {
    name: "CanRailsWarpAt"
    parameters {
      name: "factor"
      type: "int32"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "bool"
    documentation: "<doc>\n  <summary>\nReturns <c>true</c> if regular \"on-rails\" time warp can be used, at the specified warp\n<paramref name=\"factor\" />. The maximum time warp rate is limited by various things,\nincluding how close the active vessel is to a planet. See\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/Time_warp\">the KSP wiki</a> for details.\n</summary>\n  <param name=\"factor\">The warp factor to check.</param>\n</doc>"
  }
  procedures {
    name: "WarpTo"
    parameters {
      name: "ut"
      type: "double"
    }
    parameters {
      name: "maxRailsRate"
      type: "float"
      has_default_value: true
      default_value: "\000P\303G"
    }
    parameters {
      name: "maxPhysicsRate"
      type: "float"
      has_default_value: true
      default_value: "\000\000\000@"
    }
    documentation: "<doc>\n  <summary>\nUses time acceleration to warp forward to a time in the future, specified\nby universal time <paramref name=\"ut\" />. This call blocks until the desired\ntime is reached. Uses regular \"on-rails\" or physical time warp as appropriate.\nFor example, physical time warp is used when the active vessel is traveling\nthrough an atmosphere. When using regular \"on-rails\" time warp, the warp\nrate is limited by <paramref name=\"maxRailsRate\" />, and when using physical\ntime warp, the warp rate is limited by <paramref name=\"maxPhysicsRate\" />.\n</summary>\n  <param name=\"ut\">The universal time to warp to, in seconds.</param>\n  <param name=\"maxRailsRate\">The maximum warp rate in regular \"on-rails\" time warp.</param>\n  <param name=\"maxPhysicsRate\">The maximum warp rate in physical time warp.</param>\n  <returns>When the time warp is complete.</returns>\n</doc>"
  }
  procedures {
    name: "TransformPosition"
    parameters {
      name: "position"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "from"
      type: "uint64"
    }
    parameters {
      name: "to"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "ParameterType(0).Tuple(double,double,double)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ParameterType(2).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nConverts a position vector from one reference frame to another.\n</summary>\n  <param name=\"position\">Position vector in reference frame <paramref name=\"from\" />.</param>\n  <param name=\"from\">The reference frame that the position vector is in.</param>\n  <param name=\"to\">The reference frame to covert the position vector to.</param>\n  <returns>The corresponding position vector in reference frame <paramref name=\"to\" />.</returns>\n</doc>"
  }
  procedures {
    name: "TransformDirection"
    parameters {
      name: "direction"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "from"
      type: "uint64"
    }
    parameters {
      name: "to"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "ParameterType(0).Tuple(double,double,double)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ParameterType(2).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nConverts a direction vector from one reference frame to another.\n</summary>\n  <param name=\"direction\">Direction vector in reference frame <paramref name=\"from\" />.</param>\n  <param name=\"from\">The reference frame that the direction vector is in.</param>\n  <param name=\"to\">The reference frame to covert the direction vector to.</param>\n  <returns>The corresponding direction vector in reference frame <paramref name=\"to\" />.</returns>\n</doc>"
  }
  procedures {
    name: "TransformRotation"
    parameters {
      name: "rotation"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "from"
      type: "uint64"
    }
    parameters {
      name: "to"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "ParameterType(0).Tuple(double,double,double,double)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ParameterType(2).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double,double)"
    documentation: "<doc>\n  <summary>\nConverts a rotation from one reference frame to another.\n</summary>\n  <param name=\"rotation\">Rotation in reference frame <paramref name=\"from\" />.</param>\n  <param name=\"from\">The reference frame that the rotation is in.</param>\n  <param name=\"to\">The corresponding rotation in reference frame <paramref name=\"to\" />.</param>\n  <returns>The corresponding rotation in reference frame <paramref name=\"to\" />.</returns>\n</doc>"
  }
  procedures {
    name: "TransformVelocity"
    parameters {
      name: "position"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "velocity"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "from"
      type: "uint64"
    }
    parameters {
      name: "to"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "ParameterType(0).Tuple(double,double,double)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    attributes: "ParameterType(2).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ParameterType(3).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nConverts a velocity vector (acting at the specified position vector) from one\nreference frame to another. The position vector is required to take the\nrelative angular velocity of the reference frames into account.\n</summary>\n  <param name=\"position\">Position vector in reference frame <paramref name=\"from\" />.</param>\n  <param name=\"velocity\">Velocity vector in reference frame <paramref name=\"from\" />.</param>\n  <param name=\"from\">The reference frame that the position and velocity vectors are in.</param>\n  <param name=\"to\">The reference frame to covert the velocity vector to.</param>\n  <returns>The corresponding velocity in reference frame <paramref name=\"to\" />.</returns>\n</doc>"
  }
  procedures {
    name: "get_ActiveVessel"
    has_return_type: true
    return_type: "uint64"
    attributes: "Property.Get(ActiveVessel)"
    attributes: "ReturnType.Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe currently active vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "set_ActiveVessel"
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Property.Set(ActiveVessel)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe currently active vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_Vessels"
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Property.Get(Vessels)"
    attributes: "ReturnType.List(Class(SpaceCenter.Vessel))"
    documentation: "<doc>\n  <summary>\nA list of all the vessels in the game.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_Bodies"
    has_return_type: true
    return_type: "KRPC.Dictionary"
    attributes: "Property.Get(Bodies)"
    attributes: "ReturnType.Dictionary(string,Class(SpaceCenter.CelestialBody))"
    documentation: "<doc>\n  <summary>\nA dictionary of all celestial bodies (planets, moons, etc.) in the game,\nkeyed by the name of the body.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_TargetBody"
    has_return_type: true
    return_type: "uint64"
    attributes: "Property.Get(TargetBody)"
    attributes: "ReturnType.Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe currently targeted celestial body.\n</summary>\n</doc>"
  }
  procedures {
    name: "set_TargetBody"
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Property.Set(TargetBody)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe currently targeted celestial body.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_TargetVessel"
    has_return_type: true
    return_type: "uint64"
    attributes: "Property.Get(TargetVessel)"
    attributes: "ReturnType.Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe currently targeted vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "set_TargetVessel"
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Property.Set(TargetVessel)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe currently targeted vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_TargetDockingPort"
    has_return_type: true
    return_type: "uint64"
    attributes: "Property.Get(TargetDockingPort)"
    attributes: "ReturnType.Class(SpaceCenter.DockingPort)"
    documentation: "<doc>\n  <summary>\nThe currently targeted docking port.\n</summary>\n</doc>"
  }
  procedures {
    name: "set_TargetDockingPort"
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Property.Set(TargetDockingPort)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    documentation: "<doc>\n  <summary>\nThe currently targeted docking port.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_WaypointManager"
    has_return_type: true
    return_type: "uint64"
    attributes: "Property.Get(WaypointManager)"
    attributes: "ReturnType.Class(SpaceCenter.WaypointManager)"
    documentation: "<doc>\n  <summary>\nThe waypoint manager.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_Camera"
    has_return_type: true
    return_type: "uint64"
    attributes: "Property.Get(Camera)"
    attributes: "ReturnType.Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nAn object that can be used to control the camera.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_UT"
    has_return_type: true
    return_type: "double"
    attributes: "Property.Get(UT)"
    documentation: "<doc>\n  <summary>\nThe current universal time in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_G"
    has_return_type: true
    return_type: "float"
    attributes: "Property.Get(G)"
    documentation: "<doc>\n  <summary>\nThe value of the <a href=\"https://en.wikipedia.org/wiki/Gravitational_constant\">gravitational constant</a>\nG in <math>N(m/kg)^2</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_WarpMode"
    has_return_type: true
    return_type: "int32"
    attributes: "Property.Get(WarpMode)"
    attributes: "ReturnType.Enum(SpaceCenter.WarpMode)"
    documentation: "<doc>\n  <summary>\nThe current time warp mode. Returns <see cref=\"M:SpaceCenter.WarpMode.None\" /> if time\nwarp is not active, <see cref=\"M:SpaceCenter.WarpMode.Rails\" /> if regular \"on-rails\" time warp\nis active, or <see cref=\"M:SpaceCenter.WarpMode.Physics\" /> if physical time warp is active.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_WarpRate"
    has_return_type: true
    return_type: "float"
    attributes: "Property.Get(WarpRate)"
    documentation: "<doc>\n  <summary>\nThe current warp rate. This is the rate at which time is passing for\neither on-rails or physical time warp. For example, a value of 10 means\ntime is passing 10x faster than normal. Returns 1 if time warp is not\nactive.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_WarpFactor"
    has_return_type: true
    return_type: "float"
    attributes: "Property.Get(WarpFactor)"
    documentation: "<doc>\n  <summary>\nThe current warp factor. This is the index of the rate at which time\nis passing for either regular \"on-rails\" or physical time warp. Returns 0\nif time warp is not active. When in on-rails time warp, this is equal to\n<see cref=\"M:SpaceCenter.RailsWarpFactor\" />, and in physics time warp, this is equal to\n<see cref=\"M:SpaceCenter.PhysicsWarpFactor\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_RailsWarpFactor"
    has_return_type: true
    return_type: "int32"
    attributes: "Property.Get(RailsWarpFactor)"
    documentation: "<doc>\n  <summary>\nThe time warp rate, using regular \"on-rails\" time warp. A value between\n0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp\nis active.\n\nIf requested time warp factor cannot be set, it will be set to the next\nlowest possible value. For example, if the vessel is too close to a\nplanet. See <a href=\"http://wiki.kerbalspaceprogram.com/wiki/Time_warp\">\nthe KSP wiki</a> for details.\n</summary>\n</doc>"
  }
  procedures {
    name: "set_RailsWarpFactor"
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Property.Set(RailsWarpFactor)"
    documentation: "<doc>\n  <summary>\nThe time warp rate, using regular \"on-rails\" time warp. A value between\n0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp\nis active.\n\nIf requested time warp factor cannot be set, it will be set to the next\nlowest possible value. For example, if the vessel is too close to a\nplanet. See <a href=\"http://wiki.kerbalspaceprogram.com/wiki/Time_warp\">\nthe KSP wiki</a> for details.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_PhysicsWarpFactor"
    has_return_type: true
    return_type: "int32"
    attributes: "Property.Get(PhysicsWarpFactor)"
    documentation: "<doc>\n  <summary>\nThe physical time warp rate. A value between 0 and 3 inclusive. 0 means\nno time warp. Returns 0 if regular \"on-rails\" time warp is active.\n</summary>\n</doc>"
  }
  procedures {
    name: "set_PhysicsWarpFactor"
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Property.Set(PhysicsWarpFactor)"
    documentation: "<doc>\n  <summary>\nThe physical time warp rate. A value between 0 and 3 inclusive. 0 means\nno time warp. Returns 0 if regular \"on-rails\" time warp is active.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_MaximumRailsWarpFactor"
    has_return_type: true
    return_type: "int32"
    attributes: "Property.Get(MaximumRailsWarpFactor)"
    documentation: "<doc>\n  <summary>\nThe current maximum regular \"on-rails\" warp factor that can be set.\nA value between 0 and 7 inclusive.  See\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/Time_warp\">the KSP wiki</a> for details.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_FARAvailable"
    has_return_type: true
    return_type: "bool"
    attributes: "Property.Get(FARAvailable)"
    documentation: "<doc>\n  <summary>\nWhether <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a> is installed.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_Engage"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.AutoPilot,Engage)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nEngage the auto-pilot.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_Disengage"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.AutoPilot,Disengage)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nDisengage the auto-pilot.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_Wait"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.AutoPilot,Wait)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nBlocks until the vessel is pointing in the target direction and has the target roll (if set).\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_TargetPitchAndHeading"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "pitch"
      type: "float"
    }
    parameters {
      name: "heading"
      type: "float"
    }
    attributes: "Class.Method(SpaceCenter.AutoPilot,TargetPitchAndHeading)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nSet target pitch and heading angles.\n</summary>\n  <param name=\"pitch\">Target pitch angle, in degrees between -90\302\260 and +90\302\260.</param>\n  <param name=\"heading\">Target heading angle, in degrees between 0\302\260 and 360\302\260.</param>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_Error"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,Error)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe error, in degrees, between the direction the ship has been asked\nto point in and the direction it is pointing in. Returns zero if the auto-pilot\nhas not been engaged and SAS is not enabled or is in stability assist mode.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_PitchError"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,PitchError)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe error, in degrees, between the vessels current and target pitch.\nReturns zero if the auto-pilot has not been engaged.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_HeadingError"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,HeadingError)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe error, in degrees, between the vessels current and target heading.\nReturns zero if the auto-pilot has not been engaged.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_RollError"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,RollError)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe error, in degrees, between the vessels current and target roll.\nReturns zero if the auto-pilot has not been engaged or no target roll is set.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,ReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame for the target direction (<see cref=\"M:SpaceCenter.AutoPilot.TargetDirection\" />).\n</summary>\n  <remarks>\nAn error will be thrown if this property is set to a reference frame that rotates with the vessel being controlled,\nas it is impossible to rotate the vessel in such a reference frame. \n</remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,ReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame for the target direction (<see cref=\"M:SpaceCenter.AutoPilot.TargetDirection\" />).\n</summary>\n  <remarks>\nAn error will be thrown if this property is set to a reference frame that rotates with the vessel being controlled,\nas it is impossible to rotate the vessel in such a reference frame. \n</remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_TargetPitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,TargetPitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe target pitch, in degrees, between -90\302\260 and +90\302\260.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_TargetPitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,TargetPitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe target pitch, in degrees, between -90\302\260 and +90\302\260.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_TargetHeading"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,TargetHeading)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe target heading, in degrees, between 0\302\260 and 360\302\260.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_TargetHeading"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,TargetHeading)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe target heading, in degrees, between 0\302\260 and 360\302\260.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_TargetRoll"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,TargetRoll)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe target roll, in degrees. <c>NaN</c> if no target roll is set.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_TargetRoll"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,TargetRoll)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe target roll, in degrees. <c>NaN</c> if no target roll is set.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_TargetDirection"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,TargetDirection)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nDirection vector corresponding to the target pitch and heading.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_TargetDirection"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,TargetDirection)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nDirection vector corresponding to the target pitch and heading.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_SAS"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,SAS)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe state of SAS.\n</summary>\n  <remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SAS\" /></remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_SAS"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,SAS)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe state of SAS.\n</summary>\n  <remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SAS\" /></remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_SASMode"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,SASMode)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Enum(SpaceCenter.SASMode)"
    documentation: "<doc>\n  <summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to the left of the navball that appear when SAS is enabled.\n</summary>\n  <remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SASMode\" /></remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_SASMode"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,SASMode)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Enum(SpaceCenter.SASMode)"
    documentation: "<doc>\n  <summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to the left of the navball that appear when SAS is enabled.\n</summary>\n  <remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SASMode\" /></remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_RollThreshold"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,RollThreshold)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe threshold at which the autopilot will try to match the target roll angle, if any.\nDefaults to 5 degrees.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_RollThreshold"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,RollThreshold)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nThe threshold at which the autopilot will try to match the target roll angle, if any.\nDefaults to 5 degrees.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_StoppingTime"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,StoppingTime)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe maximum amount of time that the vessel should need to come to a complete stop.\nThis determines the maximum angular velocity of the vessel.\nA vector of three stopping times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 0.5 seconds for each axis.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_StoppingTime"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,StoppingTime)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe maximum amount of time that the vessel should need to come to a complete stop.\nThis determines the maximum angular velocity of the vessel.\nA vector of three stopping times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 0.5 seconds for each axis.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_DecelerationTime"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,DecelerationTime)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe time the vessel should take to come to a stop pointing in the target direction.\nThis determines the angular acceleration used to decelerate the vessel.\nA vector of three times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 5 seconds for each axis.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_DecelerationTime"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,DecelerationTime)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe time the vessel should take to come to a stop pointing in the target direction.\nThis determines the angular acceleration used to decelerate the vessel.\nA vector of three times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 5 seconds for each axis.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_AttenuationAngle"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,AttenuationAngle)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe angle at which the autopilot considers the vessel to be pointing close to the target.\nThis determines the midpoint of the target velocity attenuation function.\nA vector of three angles, in degrees, one for each of the pitch, roll and yaw axes.\nDefaults to 1\302\260 for each axis.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_AttenuationAngle"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,AttenuationAngle)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe angle at which the autopilot considers the vessel to be pointing close to the target.\nThis determines the midpoint of the target velocity attenuation function.\nA vector of three angles, in degrees, one for each of the pitch, roll and yaw axes.\nDefaults to 1\302\260 for each axis.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_AutoTune"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,AutoTune)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nWhether the rotation rate controllers PID parameters should be automatically tuned using the\nvessels moment of inertia and available torque. Defaults to <c>true</c>.\nSee <see cref=\"M:SpaceCenter.AutoPilot.TimeToPeak\" /> and  <see cref=\"M:SpaceCenter.AutoPilot.Overshoot\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_AutoTune"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,AutoTune)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nWhether the rotation rate controllers PID parameters should be automatically tuned using the\nvessels moment of inertia and available torque. Defaults to <c>true</c>.\nSee <see cref=\"M:SpaceCenter.AutoPilot.TimeToPeak\" /> and  <see cref=\"M:SpaceCenter.AutoPilot.Overshoot\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_TimeToPeak"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,TimeToPeak)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe target time to peak used to autotune the PID controllers.\nA vector of three times, in seconds, for each of the pitch, roll and yaw axes.\nDefaults to 3 seconds for each axis.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_TimeToPeak"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,TimeToPeak)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe target time to peak used to autotune the PID controllers.\nA vector of three times, in seconds, for each of the pitch, roll and yaw axes.\nDefaults to 3 seconds for each axis.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_Overshoot"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,Overshoot)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe target overshoot percentage used to autotune the PID controllers.\nA vector of three values, between 0 and 1, for each of the pitch, roll and yaw axes.\nDefaults to 0.01 for each axis.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_Overshoot"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,Overshoot)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe target overshoot percentage used to autotune the PID controllers.\nA vector of three values, between 0 and 1, for each of the pitch, roll and yaw axes.\nDefaults to 0.01 for each axis.\n</summary>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_PitchPIDGains"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,PitchPIDGains)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nGains for the pitch PID controller.\n</summary>\n  <remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_PitchPIDGains"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,PitchPIDGains)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nGains for the pitch PID controller.\n</summary>\n  <remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_RollPIDGains"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,RollPIDGains)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nGains for the roll PID controller.\n</summary>\n  <remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_RollPIDGains"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,RollPIDGains)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nGains for the roll PID controller.\n</summary>\n  <remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_get_YawPIDGains"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.AutoPilot,YawPIDGains)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nGains for the yaw PID controller.\n</summary>\n  <remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
  }
  procedures {
    name: "AutoPilot_set_YawPIDGains"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.AutoPilot,YawPIDGains)"
    attributes: "ParameterType(0).Class(SpaceCenter.AutoPilot)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nGains for the yaw PID controller.\n</summary>\n  <remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Camera_get_Mode"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Camera,Mode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    attributes: "ReturnType.Enum(SpaceCenter.CameraMode)"
    documentation: "<doc>\n  <summary>\nThe current mode of the camera.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_set_Mode"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(SpaceCenter.Camera,Mode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    attributes: "ParameterType(1).Enum(SpaceCenter.CameraMode)"
    documentation: "<doc>\n  <summary>\nThe current mode of the camera.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_Pitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Camera,Pitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nThe pitch of the camera, in degrees.\nA value between <see cref=\"M:SpaceCenter.Camera.MinPitch\" /> and <see cref=\"M:SpaceCenter.Camera.MaxPitch\" /></summary>\n</doc>"
  }
  procedures {
    name: "Camera_set_Pitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Camera,Pitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nThe pitch of the camera, in degrees.\nA value between <see cref=\"M:SpaceCenter.Camera.MinPitch\" /> and <see cref=\"M:SpaceCenter.Camera.MaxPitch\" /></summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_Heading"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Camera,Heading)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nThe heading of the camera, in degrees.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_set_Heading"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Camera,Heading)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nThe heading of the camera, in degrees.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_Distance"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Camera,Distance)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nThe distance from the camera to the subject, in meters.\nA value between <see cref=\"M:SpaceCenter.Camera.MinDistance\" /> and <see cref=\"M:SpaceCenter.Camera.MaxDistance\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_set_Distance"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Camera,Distance)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nThe distance from the camera to the subject, in meters.\nA value between <see cref=\"M:SpaceCenter.Camera.MinDistance\" /> and <see cref=\"M:SpaceCenter.Camera.MaxDistance\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_MinPitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Camera,MinPitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nThe minimum pitch of the camera.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_MaxPitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Camera,MaxPitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nThe maximum pitch of the camera.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_MinDistance"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Camera,MinDistance)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nMinimum distance from the camera to the subject, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_MaxDistance"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Camera,MaxDistance)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nMaximum distance from the camera to the subject, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_DefaultDistance"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Camera,DefaultDistance)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    documentation: "<doc>\n  <summary>\nDefault distance from the camera to the subject, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_FocussedBody"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Camera,FocussedBody)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    attributes: "ReturnType.Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nIn map mode, the celestial body that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a celestial body.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_set_FocussedBody"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(SpaceCenter.Camera,FocussedBody)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    attributes: "ParameterType(1).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nIn map mode, the celestial body that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a celestial body.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_FocussedVessel"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Camera,FocussedVessel)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    attributes: "ReturnType.Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nIn map mode, the vessel that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a vessel.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_set_FocussedVessel"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(SpaceCenter.Camera,FocussedVessel)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    attributes: "ParameterType(1).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nIn map mode, the vessel that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a vessel.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_get_FocussedNode"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Camera,FocussedNode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    attributes: "ReturnType.Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nIn map mode, the maneuver node that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a maneuver node.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
  }
  procedures {
    name: "Camera_set_FocussedNode"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(SpaceCenter.Camera,FocussedNode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Camera)"
    attributes: "ParameterType(1).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nIn map mode, the maneuver node that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a maneuver node.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_SurfaceHeight"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "latitude"
      type: "double"
    }
    parameters {
      name: "longitude"
      type: "double"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Method(SpaceCenter.CelestialBody,SurfaceHeight)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe height of the surface relative to mean sea level at the given position,\nin meters. When over water this is equal to 0.\n</summary>\n  <param name=\"latitude\">Latitude in degrees</param>\n  <param name=\"longitude\">Longitude in degrees</param>\n</doc>"
  }
  procedures {
    name: "CelestialBody_BedrockHeight"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "latitude"
      type: "double"
    }
    parameters {
      name: "longitude"
      type: "double"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Method(SpaceCenter.CelestialBody,BedrockHeight)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe height of the surface relative to mean sea level at the given position,\nin meters. When over water, this is the height of the sea-bed and is therefore a\nnegative value.\n</summary>\n  <param name=\"latitude\">Latitude in degrees</param>\n  <param name=\"longitude\">Longitude in degrees</param>\n</doc>"
  }
  procedures {
    name: "CelestialBody_MSLPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "latitude"
      type: "double"
    }
    parameters {
      name: "longitude"
      type: "double"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.CelestialBody,MSLPosition)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ParameterType(3).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position at mean sea level at the given latitude and longitude, in the given reference frame.\n</summary>\n  <param name=\"latitude\">Latitude in degrees</param>\n  <param name=\"longitude\">Longitude in degrees</param>\n  <param name=\"referenceFrame\">Reference frame for the returned position vector</param>\n</doc>"
  }
  procedures {
    name: "CelestialBody_SurfacePosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "latitude"
      type: "double"
    }
    parameters {
      name: "longitude"
      type: "double"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.CelestialBody,SurfacePosition)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ParameterType(3).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position of the surface at the given latitude and longitude, in the given\nreference frame. When over water, this is the position of the surface of the water.\n</summary>\n  <param name=\"latitude\">Latitude in degrees</param>\n  <param name=\"longitude\">Longitude in degrees</param>\n  <param name=\"referenceFrame\">Reference frame for the returned position vector</param>\n</doc>"
  }
  procedures {
    name: "CelestialBody_BedrockPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "latitude"
      type: "double"
    }
    parameters {
      name: "longitude"
      type: "double"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.CelestialBody,BedrockPosition)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ParameterType(3).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position of the surface at the given latitude and longitude, in the given\nreference frame. When over water, this is the position at the bottom of the sea-bed.\n</summary>\n  <param name=\"latitude\">Latitude in degrees</param>\n  <param name=\"longitude\">Longitude in degrees</param>\n  <param name=\"referenceFrame\">Reference frame for the returned position vector</param>\n</doc>"
  }
  procedures {
    name: "CelestialBody_BiomeAt"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "latitude"
      type: "double"
    }
    parameters {
      name: "longitude"
      type: "double"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Method(SpaceCenter.CelestialBody,BiomeAt)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe biomes at the given latitude and longitude, in degrees.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.CelestialBody,Position)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the position vector of the center of the body in the specified reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "CelestialBody_Velocity"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.CelestialBody,Velocity)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the velocity vector of the body in the specified reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "CelestialBody_Rotation"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.CelestialBody,Rotation)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the rotation of the body in the specified reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "CelestialBody_Direction"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.CelestialBody,Direction)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the direction in which the north pole of the celestial body is\npointing, as a unit vector, in the specified reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "CelestialBody_AngularVelocity"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.CelestialBody,AngularVelocity)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the angular velocity of the body in the specified reference\nframe. The magnitude of the vector is the rotational speed of the body, in\nradians per second, and the direction of the vector indicates the axis of\nrotation, using the right-hand rule.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,Name)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe name of the body.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_Satellites"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,Satellites)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ReturnType.List(Class(SpaceCenter.CelestialBody))"
    documentation: "<doc>\n  <summary>\nA list of celestial bodies that are in orbit around this celestial body.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_Mass"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,Mass)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe mass of the body, in kilograms.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_GravitationalParameter"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,GravitationalParameter)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Standard_gravitational_parameter\">standard\ngravitational parameter</a> of the body in <math>m^3s^{-2}</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_SurfaceGravity"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,SurfaceGravity)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe acceleration due to gravity at sea level (mean altitude) on the body, in <math>m/s^2</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_RotationalPeriod"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,RotationalPeriod)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe sidereal rotational period of the body, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_RotationalSpeed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,RotationalSpeed)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe rotational speed of the body, in radians per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_EquatorialRadius"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,EquatorialRadius)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe equatorial radius of the body, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_SphereOfInfluence"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,SphereOfInfluence)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe radius of the sphere of influence of the body, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_Orbit"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,Orbit)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ReturnType.Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe orbit of the body.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_HasAtmosphere"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,HasAtmosphere)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\n    <c>true</c> if the body has an atmosphere.\n           </summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_AtmosphereDepth"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,AtmosphereDepth)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe depth of the atmosphere, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_HasAtmosphericOxygen"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,HasAtmosphericOxygen)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\n    <c>true</c> if there is oxygen in the atmosphere, required for air-breathing engines.\n           </summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_Biomes"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,Biomes)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nThe biomes present on this body.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_FlyingHighAltitudeThreshold"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,FlyingHighAltitudeThreshold)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe altitude, in meters, above which a vessel is considered to be flying \"high\" when doing science.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_SpaceHighAltitudeThreshold"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,SpaceHighAltitudeThreshold)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe altitude, in meters, above which a vessel is considered to be in \"high\" space when doing science.\n</summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,ReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame that is fixed relative to the celestial body.\n<list type=\"bullet\"><item><description>The origin is at the center of the body.\n</description></item><item><description>The axes rotate with the body.</description></item><item><description>The x-axis points from the center of the body\ntowards the intersection of the prime meridian and equator (the\nposition at 0\302\260 longitude, 0\302\260 latitude).</description></item><item><description>The y-axis points from the center of the body\ntowards the north pole.</description></item><item><description>The z-axis points from the center of the body\ntowards the equator at 90\302\260E longitude.</description></item></list></summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_NonRotatingReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,NonRotatingReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame that is fixed relative to this celestial body, and\norientated in a fixed direction (it does not rotate with the body).\n<list type=\"bullet\"><item><description>The origin is at the center of the body.</description></item><item><description>The axes do not rotate.</description></item><item><description>The x-axis points in an arbitrary direction through the\nequator.</description></item><item><description>The y-axis points from the center of the body towards\nthe north pole.</description></item><item><description>The z-axis points in an arbitrary direction through the\nequator.</description></item></list></summary>\n</doc>"
  }
  procedures {
    name: "CelestialBody_get_OrbitalReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.CelestialBody,OrbitalReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.CelestialBody)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nGets the reference frame that is fixed relative to this celestial body, but\norientated with the body\'s orbital prograde/normal/radial directions.\n<list type=\"bullet\"><item><description>The origin is at the center of the body.\n</description></item><item><description>The axes rotate with the orbital prograde/normal/radial\ndirections.</description></item><item><description>The x-axis points in the orbital anti-radial direction.\n</description></item><item><description>The y-axis points in the orbital prograde direction.\n</description></item><item><description>The z-axis points in the orbital normal direction.\n</description></item></list></summary>\n</doc>"
  }
  procedures {
    name: "Control_ActivateNextStage"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.Control,ActivateNextStage)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    attributes: "ReturnType.List(Class(SpaceCenter.Vessel))"
    documentation: "<doc>\n  <summary>\nActivates the next stage. Equivalent to pressing the space bar in-game.\n</summary>\n  <returns>A list of vessel objects that are jettisoned from the active vessel.</returns>\n</doc>"
  }
  procedures {
    name: "Control_GetActionGroup"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "group"
      type: "uint32"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Method(SpaceCenter.Control,GetActionGroup)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nReturns <c>true</c> if the given action group is enabled.\n</summary>\n  <param name=\"group\">A number between 0 and 9 inclusive.</param>\n</doc>"
  }
  procedures {
    name: "Control_SetActionGroup"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "group"
      type: "uint32"
    }
    parameters {
      name: "state"
      type: "bool"
    }
    attributes: "Class.Method(SpaceCenter.Control,SetActionGroup)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nSets the state of the given action group (a value between 0 and 9\ninclusive).\n</summary>\n  <param name=\"group\">A number between 0 and 9 inclusive.</param>\n  <param name=\"state\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Control_ToggleActionGroup"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "group"
      type: "uint32"
    }
    attributes: "Class.Method(SpaceCenter.Control,ToggleActionGroup)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nToggles the state of the given action group.\n</summary>\n  <param name=\"group\">A number between 0 and 9 inclusive.</param>\n</doc>"
  }
  procedures {
    name: "Control_AddNode"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "ut"
      type: "double"
    }
    parameters {
      name: "prograde"
      type: "float"
      has_default_value: true
      default_value: "\000\000\000\000"
    }
    parameters {
      name: "normal"
      type: "float"
      has_default_value: true
      default_value: "\000\000\000\000"
    }
    parameters {
      name: "radial"
      type: "float"
      has_default_value: true
      default_value: "\000\000\000\000"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(SpaceCenter.Control,AddNode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    attributes: "ReturnType.Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nCreates a maneuver node at the given universal time, and returns a\n<see cref=\"T:SpaceCenter.Node\" /> object that can be used to modify it.\nOptionally sets the magnitude of the delta-v for the maneuver node\nin the prograde, normal and radial directions.\n</summary>\n  <param name=\"ut\">Universal time of the maneuver node.</param>\n  <param name=\"prograde\">Delta-v in the prograde direction.</param>\n  <param name=\"normal\">Delta-v in the normal direction.</param>\n  <param name=\"radial\">Delta-v in the radial direction.</param>\n</doc>"
  }
  procedures {
    name: "Control_RemoveNodes"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Control,RemoveNodes)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nRemove all maneuver nodes.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_SAS"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Control,SAS)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of SAS.\n</summary>\n  <remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SAS\" /></remarks>\n</doc>"
  }
  procedures {
    name: "Control_set_SAS"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,SAS)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of SAS.\n</summary>\n  <remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SAS\" /></remarks>\n</doc>"
  }
  procedures {
    name: "Control_get_SASMode"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Control,SASMode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    attributes: "ReturnType.Enum(SpaceCenter.SASMode)"
    documentation: "<doc>\n  <summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to\nthe left of the navball that appear when SAS is enabled.\n</summary>\n  <remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SASMode\" /></remarks>\n</doc>"
  }
  procedures {
    name: "Control_set_SASMode"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,SASMode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    attributes: "ParameterType(1).Enum(SpaceCenter.SASMode)"
    documentation: "<doc>\n  <summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to\nthe left of the navball that appear when SAS is enabled.\n</summary>\n  <remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SASMode\" /></remarks>\n</doc>"
  }
  procedures {
    name: "Control_get_SpeedMode"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Control,SpeedMode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    attributes: "ReturnType.Enum(SpaceCenter.SpeedMode)"
    documentation: "<doc>\n  <summary>\nThe current <see cref=\"T:SpaceCenter.SpeedMode\" /> of the navball.\nThis is the mode displayed next to the speed at the top of the navball.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_SpeedMode"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,SpeedMode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    attributes: "ParameterType(1).Enum(SpaceCenter.SpeedMode)"
    documentation: "<doc>\n  <summary>\nThe current <see cref=\"T:SpaceCenter.SpeedMode\" /> of the navball.\nThis is the mode displayed next to the speed at the top of the navball.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_RCS"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Control,RCS)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of RCS.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_RCS"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,RCS)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of RCS.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Gear"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Control,Gear)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the landing gear/legs.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Gear"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Gear)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the landing gear/legs.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Lights"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Control,Lights)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the lights.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Lights"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Lights)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the lights.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Brakes"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Control,Brakes)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the wheel brakes.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Brakes"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Brakes)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the wheel brakes.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Abort"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Control,Abort)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the abort action group.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Abort"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Abort)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the abort action group.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Throttle"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Control,Throttle)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the throttle. A value between 0 and 1.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Throttle"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Throttle)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the throttle. A value between 0 and 1.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Pitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Control,Pitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the pitch control.\nA value between -1 and 1.\nEquivalent to the w and s keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Pitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Pitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the pitch control.\nA value between -1 and 1.\nEquivalent to the w and s keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Yaw"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Control,Yaw)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the yaw control.\nA value between -1 and 1.\nEquivalent to the a and d keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Yaw"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Yaw)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the yaw control.\nA value between -1 and 1.\nEquivalent to the a and d keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Roll"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Control,Roll)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the roll control.\nA value between -1 and 1.\nEquivalent to the q and e keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Roll"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Roll)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the roll control.\nA value between -1 and 1.\nEquivalent to the q and e keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Forward"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Control,Forward)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the forward translational control.\nA value between -1 and 1.\nEquivalent to the h and n keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Forward"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Forward)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the forward translational control.\nA value between -1 and 1.\nEquivalent to the h and n keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Up"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Control,Up)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the up translational control.\nA value between -1 and 1.\nEquivalent to the i and k keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Up"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Up)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the up translational control.\nA value between -1 and 1.\nEquivalent to the i and k keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Right"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Control,Right)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the right translational control.\nA value between -1 and 1.\nEquivalent to the j and l keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_Right"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,Right)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the right translational control.\nA value between -1 and 1.\nEquivalent to the j and l keys.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_WheelThrottle"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Control,WheelThrottle)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the wheel throttle.\nA value between -1 and 1.\nA value of 1 rotates the wheels forwards, a value of -1 rotates\nthe wheels backwards.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_WheelThrottle"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,WheelThrottle)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the wheel throttle.\nA value between -1 and 1.\nA value of 1 rotates the wheels forwards, a value of -1 rotates\nthe wheels backwards.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_WheelSteering"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Control,WheelSteering)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the wheel steering.\nA value between -1 and 1.\nA value of 1 steers to the left, and a value of -1 steers to the right.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_set_WheelSteering"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Control,WheelSteering)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe state of the wheel steering.\nA value between -1 and 1.\nA value of 1 steers to the left, and a value of -1 steers to the right.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_CurrentStage"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Control,CurrentStage)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nThe current stage of the vessel. Corresponds to the stage number in\nthe in-game UI.\n</summary>\n</doc>"
  }
  procedures {
    name: "Control_get_Nodes"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Control,Nodes)"
    attributes: "ParameterType(0).Class(SpaceCenter.Control)"
    attributes: "ReturnType.List(Class(SpaceCenter.Node))"
    documentation: "<doc>\n  <summary>\nReturns a list of all existing maneuver nodes, ordered by time from first to last.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_GForce"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,GForce)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe current G force acting on the vessel in <math>m/s^2</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_MeanAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Flight,MeanAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe altitude above sea level, in meters.\nMeasured from the center of mass of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_SurfaceAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Flight,SurfaceAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe altitude above the surface of the body or sea level, whichever is closer, in meters.\nMeasured from the center of mass of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_BedrockAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Flight,BedrockAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe altitude above the surface of the body, in meters. When over water, this is the altitude above the sea floor.\nMeasured from the center of mass of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Elevation"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Elevation)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe elevation of the terrain under the vessel, in meters. This is the height of the terrain above sea level,\nand is negative when the vessel is over the sea.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Latitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Latitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Latitude\">latitude</a> of the vessel for the body being orbited, in degrees.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Longitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Longitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Longitude\">longitude</a> of the vessel for the body being orbited, in degrees.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Velocity"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Velocity)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe velocity vector of the vessel. The magnitude of the vector is the speed of the vessel in meters per second.\nThe direction of the vector is the direction of the vessels motion.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Speed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Speed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe speed of the vessel in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_HorizontalSpeed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Flight,HorizontalSpeed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe horizontal speed of the vessel in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_VerticalSpeed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Flight,VerticalSpeed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe vertical speed of the vessel in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_CenterOfMass"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,CenterOfMass)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position of the center of mass of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Rotation"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Rotation)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double,double)"
    documentation: "<doc>\n  <summary>\nThe rotation of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Direction"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Direction)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe direction vector that the vessel is pointing in.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Pitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Pitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe pitch angle of the vessel relative to the horizon, in degrees. A value between -90\302\260 and +90\302\260.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Heading"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Heading)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe heading angle of the vessel relative to north, in degrees. A value between 0\302\260 and 360\302\260.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Roll"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Roll)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe roll angle of the vessel relative to the horizon, in degrees. A value between -180\302\260 and +180\302\260.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Prograde"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Prograde)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe unit direction vector pointing in the prograde direction.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Retrograde"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Retrograde)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe unit direction vector pointing in the retrograde direction.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Normal"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Normal)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe unit direction vector pointing in the normal direction.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_AntiNormal"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,AntiNormal)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe unit direction vector pointing in the anti-normal direction.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Radial"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Radial)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe unit direction vector pointing in the radial direction.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_AntiRadial"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,AntiRadial)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe unit direction vector pointing in the anti-radial direction.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_AtmosphereDensity"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,AtmosphereDensity)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe current density of the atmosphere around the vessel, in <math>kg/m^3</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_DynamicPressure"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,DynamicPressure)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe dynamic pressure acting on the vessel, in Pascals. This is a measure of the strength of the\naerodynamic forces. It is equal to <math>\\frac{1}{2} . \\mbox{air density} .  \\mbox{velocity}^2</math>.\nIt is commonly denoted <math>Q</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_StaticPressureAtMSL"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,StaticPressureAtMSL)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe static atmospheric pressure at mean sea level, in Pascals.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_StaticPressure"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,StaticPressure)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe static atmospheric pressure acting on the vessel, in Pascals.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_AerodynamicForce"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,AerodynamicForce)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe total aerodynamic forces acting on the vessel, as a vector pointing in the direction of the force, with its\nmagnitude equal to the strength of the force in Newtons.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Lift"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Lift)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Aerodynamic_force\">aerodynamic lift</a> currently acting on the vessel,\nas a vector pointing in the direction of the force, with its magnitude equal to the strength of the force in Newtons.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Drag"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Drag)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Aerodynamic_force\">aerodynamic drag</a> currently acting on the vessel,\nas a vector pointing in the direction of the force, with its magnitude equal to the strength of the force in Newtons.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_SpeedOfSound"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,SpeedOfSound)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe speed of sound, in the atmosphere around the vessel, in <math>m/s</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_Mach"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,Mach)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe speed of the vessel, in multiples of the speed of sound.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_ReynoldsNumber"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,ReynoldsNumber)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe vessels Reynolds number.\n</summary>\n  <remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Flight_get_TrueAirSpeed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,TrueAirSpeed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/True_airspeed\">true air speed</a> of the vessel, in <math>m/s</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_EquivalentAirSpeed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,EquivalentAirSpeed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Equivalent_airspeed\">equivalent air speed</a> of the vessel, in <math>m/s</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_TerminalVelocity"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,TerminalVelocity)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nAn estimate of the current terminal velocity of the vessel, in <math>m/s</math>.\nThis is the speed at which the drag forces cancel out the force of gravity.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_AngleOfAttack"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,AngleOfAttack)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nGets the pitch angle between the orientation of the vessel and its velocity vector, in degrees.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_SideslipAngle"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,SideslipAngle)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nGets the yaw angle between the orientation of the vessel and its velocity vector, in degrees.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_TotalAirTemperature"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,TotalAirTemperature)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Total_air_temperature\">total air temperature</a> of the atmosphere\naround the vessel, in Kelvin. This temperature includes the <see cref=\"M:SpaceCenter.Flight.StaticAirTemperature\" /> and the vessel\'s kinetic energy.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_StaticAirTemperature"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,StaticAirTemperature)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Total_air_temperature\">static (ambient) temperature</a> of the\natmosphere around the vessel, in Kelvin.\n</summary>\n</doc>"
  }
  procedures {
    name: "Flight_get_StallFraction"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,StallFraction)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nGets the current amount of stall, between 0 and 1. A value greater than 0.005 indicates a minor stall\nand a value greater than 0.5 indicates a large-scale stall.\n</summary>\n  <remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Flight_get_DragCoefficient"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,DragCoefficient)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nGets the coefficient of drag. This is the amount of drag produced by the vessel. It depends on air speed,\nair density and wing area.\n</summary>\n  <remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Flight_get_LiftCoefficient"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,LiftCoefficient)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nGets the coefficient of lift. This is the amount of lift produced by the vessel, and depends on air speed, air density and wing area.\n</summary>\n  <remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Flight_get_BallisticCoefficient"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,BallisticCoefficient)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nGets the <a href=\"https://en.wikipedia.org/wiki/Ballistic_coefficient\">ballistic coefficient</a>.\n</summary>\n  <remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Flight_get_ThrustSpecificFuelConsumption"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Flight,ThrustSpecificFuelConsumption)"
    attributes: "ParameterType(0).Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nGets the thrust specific fuel consumption for the jet engines on the vessel. This is a measure of the\nefficiency of the engines, with a lower value indicating a more efficient vessel. This value is the\nnumber of Newtons of fuel that are burned, per hour, to produce one newton of thrust.\n</summary>\n  <remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Node_BurnVector"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
      has_default_value: true
      default_value: "\000"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Node,BurnVector)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns a vector whose direction the direction of the maneuver node burn, and whose magnitude\nis the delta-v of the burn in m/s.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n  <remarks>\nDoes not change when executing the maneuver node. See <see cref=\"M:SpaceCenter.Node.RemainingBurnVector\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Node_RemainingBurnVector"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
      has_default_value: true
      default_value: "\000"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Node,RemainingBurnVector)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns a vector whose direction the direction of the maneuver node burn, and whose magnitude\nis the delta-v of the burn in m/s. The direction and magnitude change as the burn is executed.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Node_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Node,Remove)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nRemoves the maneuver node.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Node,Position)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the position vector of the maneuver node in the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Node_Direction"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Node,Direction)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the unit direction vector of the maneuver nodes burn in the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Node_get_Prograde"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Node,Prograde)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe magnitude of the maneuver nodes delta-v in the prograde direction, in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_set_Prograde"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Node,Prograde)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe magnitude of the maneuver nodes delta-v in the prograde direction, in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_get_Normal"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Node,Normal)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe magnitude of the maneuver nodes delta-v in the normal direction, in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_set_Normal"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Node,Normal)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe magnitude of the maneuver nodes delta-v in the normal direction, in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_get_Radial"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Node,Radial)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe magnitude of the maneuver nodes delta-v in the radial direction, in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_set_Radial"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Node,Radial)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe magnitude of the maneuver nodes delta-v in the radial direction, in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_get_DeltaV"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Node,DeltaV)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe delta-v of the maneuver node, in meters per second.\n</summary>\n  <remarks>\nDoes not change when executing the maneuver node. See <see cref=\"M:SpaceCenter.Node.RemainingDeltaV\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Node_set_DeltaV"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Node,DeltaV)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe delta-v of the maneuver node, in meters per second.\n</summary>\n  <remarks>\nDoes not change when executing the maneuver node. See <see cref=\"M:SpaceCenter.Node.RemainingDeltaV\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Node_get_RemainingDeltaV"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Node,RemainingDeltaV)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nGets the remaining delta-v of the maneuver node, in meters per second. Changes as the node\nis executed. This is equivalent to the delta-v reported in-game.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_get_UT"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Node,UT)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe universal time at which the maneuver will occur, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_set_UT"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Class.Property.Set(SpaceCenter.Node,UT)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe universal time at which the maneuver will occur, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_get_TimeTo"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Node,TimeTo)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    documentation: "<doc>\n  <summary>\nThe time until the maneuver node will be encountered, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_get_Orbit"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Node,Orbit)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    attributes: "ReturnType.Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe orbit that results from executing the maneuver node.\n</summary>\n</doc>"
  }
  procedures {
    name: "Node_get_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Node,ReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nGets the reference frame that is fixed relative to the maneuver node\'s burn.\n<list type=\"bullet\"><item><description>The origin is at the position of the maneuver node.</description></item><item><description>The y-axis points in the direction of the burn.</description></item><item><description>The x-axis and z-axis point in arbitrary but fixed directions.</description></item></list></summary>\n</doc>"
  }
  procedures {
    name: "Node_get_OrbitalReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Node,OrbitalReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Node)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nGets the reference frame that is fixed relative to the maneuver node, and\norientated with the orbital prograde/normal/radial directions of the\noriginal orbit at the maneuver node\'s position.\n<list type=\"bullet\"><item><description>The origin is at the position of the maneuver node.</description></item><item><description>The x-axis points in the orbital anti-radial direction of the original\norbit, at the position of the maneuver node.</description></item><item><description>The y-axis points in the orbital prograde direction of the original\norbit, at the position of the maneuver node.</description></item><item><description>The z-axis points in the orbital normal direction of the original orbit,\nat the position of the maneuver node.</description></item></list></summary>\n</doc>"
  }
  procedures {
    name: "Orbit_ReferencePlaneNormal"
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.StaticMethod(SpaceCenter.Orbit,ReferencePlaneNormal)"
    attributes: "ParameterType(0).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe unit direction vector that is normal to the orbits reference plane, in the given\nreference frame. The reference plane is the plane from which the orbits inclination is measured.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Orbit_ReferencePlaneDirection"
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.StaticMethod(SpaceCenter.Orbit,ReferencePlaneDirection)"
    attributes: "ParameterType(0).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe unit direction vector from which the orbits longitude of ascending node is measured,\nin the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Orbit_RadiusAtTrueAnomaly"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "trueAnomaly"
      type: "double"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Method(SpaceCenter.Orbit,RadiusAtTrueAnomaly)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe orbital radius at the point in the orbit given by the true anomaly.\n</summary>\n  <param name=\"trueAnomaly\">The true anomaly.</param>\n</doc>"
  }
  procedures {
    name: "Orbit_TrueAnomalyAtRadius"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "radius"
      type: "double"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Method(SpaceCenter.Orbit,TrueAnomalyAtRadius)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe true anomaly at the given orbital radius.\n</summary>\n  <param name=\"radius\">The orbital radius in meters.</param>\n</doc>"
  }
  procedures {
    name: "Orbit_TrueAnomalyAtUT"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "ut"
      type: "double"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Method(SpaceCenter.Orbit,TrueAnomalyAtUT)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe true anomaly at the given time.\n</summary>\n  <param name=\"ut\">The universal time in seconds.</param>\n</doc>"
  }
  procedures {
    name: "Orbit_UTAtTrueAnomaly"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "trueAnomaly"
      type: "double"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Method(SpaceCenter.Orbit,UTAtTrueAnomaly)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe universal time, in seconds, corresponding to the given true anomaly.\n</summary>\n  <param name=\"trueAnomaly\">True anomaly.</param>\n</doc>"
  }
  procedures {
    name: "Orbit_EccentricAnomalyAtUT"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "ut"
      type: "double"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Method(SpaceCenter.Orbit,EccentricAnomalyAtUT)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe eccentric anomaly at the given universal time.\n</summary>\n  <param name=\"ut\">The universal time, in seconds.</param>\n</doc>"
  }
  procedures {
    name: "Orbit_OrbitalSpeedAt"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "time"
      type: "double"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Method(SpaceCenter.Orbit,OrbitalSpeedAt)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe orbital speed at the given time, in meters per second.\n</summary>\n  <param name=\"time\">Time from now, in seconds.</param>\n</doc>"
  }
  procedures {
    name: "Orbit_get_Body"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,Body)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    attributes: "ReturnType.Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nThe celestial body (e.g. planet or moon) around which the object is orbiting.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_Apoapsis"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,Apoapsis)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nGets the apoapsis of the orbit, in meters, from the center of mass of the body being orbited.\n</summary>\n  <remarks>\nFor the apoapsis altitude reported on the in-game map view, use <see cref=\"M:SpaceCenter.Orbit.ApoapsisAltitude\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Orbit_get_Periapsis"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,Periapsis)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe periapsis of the orbit, in meters, from the center of mass of the body being orbited.\n</summary>\n  <remarks>\nFor the periapsis altitude reported on the in-game map view, use <see cref=\"M:SpaceCenter.Orbit.PeriapsisAltitude\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Orbit_get_ApoapsisAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,ApoapsisAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe apoapsis of the orbit, in meters, above the sea level of the body being orbited.\n</summary>\n  <remarks>\nThis is equal to <see cref=\"M:SpaceCenter.Orbit.Apoapsis\" /> minus the equatorial radius of the body.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Orbit_get_PeriapsisAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,PeriapsisAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe periapsis of the orbit, in meters, above the sea level of the body being orbited.\n</summary>\n  <remarks>\nThis is equal to <see cref=\"M:SpaceCenter.Orbit.Periapsis\" /> minus the equatorial radius of the body.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Orbit_get_SemiMajorAxis"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,SemiMajorAxis)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe semi-major axis of the orbit, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_SemiMinorAxis"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,SemiMinorAxis)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe semi-minor axis of the orbit, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_Radius"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,Radius)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe current radius of the orbit, in meters. This is the distance between the center\nof mass of the object in orbit, and the center of mass of the body around which it is orbiting.\n</summary>\n  <remarks>\nThis value will change over time if the orbit is elliptical.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Orbit_get_Speed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,Speed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe current orbital speed of the object in meters per second.\n</summary>\n  <remarks>\nThis value will change over time if the orbit is elliptical.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Orbit_get_Period"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,Period)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe orbital period, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_TimeToApoapsis"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,TimeToApoapsis)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe time until the object reaches apoapsis, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_TimeToPeriapsis"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,TimeToPeriapsis)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe time until the object reaches periapsis, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_Eccentricity"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,Eccentricity)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Orbital_eccentricity\">eccentricity</a> of the orbit.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_Inclination"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,Inclination)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Orbital_inclination\">inclination</a> of the orbit,\nin radians.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_LongitudeOfAscendingNode"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,LongitudeOfAscendingNode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Longitude_of_the_ascending_node\">longitude of the\nascending node</a>, in radians.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_ArgumentOfPeriapsis"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,ArgumentOfPeriapsis)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Argument_of_periapsis\">argument of periapsis</a>, in radians.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_MeanAnomalyAtEpoch"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,MeanAnomalyAtEpoch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">mean anomaly at epoch</a>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_Epoch"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,Epoch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe time since the epoch (the point at which the\n<a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">mean anomaly at epoch</a> was measured, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_MeanAnomaly"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,MeanAnomaly)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">mean anomaly</a>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_EccentricAnomaly"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,EccentricAnomaly)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Eccentric_anomaly\">eccentric anomaly</a>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_TrueAnomaly"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,TrueAnomaly)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe <a href=\"https://en.wikipedia.org/wiki/True_anomaly\">true anomaly</a>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_NextOrbit"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,NextOrbit)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    attributes: "ReturnType.Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nIf the object is going to change sphere of influence in the future, returns the new orbit\nafter the change. Otherwise returns <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_TimeToSOIChange"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,TimeToSOIChange)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe time until the object changes sphere of influence, in seconds. Returns <c>NaN</c> if the\nobject is not going to change sphere of influence.\n</summary>\n</doc>"
  }
  procedures {
    name: "Orbit_get_OrbitalSpeed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Orbit,OrbitalSpeed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe current orbital speed in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "CargoBay_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.CargoBay,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.CargoBay)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this cargo bay.\n</summary>\n</doc>"
  }
  procedures {
    name: "CargoBay_get_State"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.CargoBay,State)"
    attributes: "ParameterType(0).Class(SpaceCenter.CargoBay)"
    attributes: "ReturnType.Enum(SpaceCenter.CargoBayState)"
    documentation: "<doc>\n  <summary>\nThe state of the cargo bay.\n</summary>\n</doc>"
  }
  procedures {
    name: "CargoBay_get_Open"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.CargoBay,Open)"
    attributes: "ParameterType(0).Class(SpaceCenter.CargoBay)"
    documentation: "<doc>\n  <summary>\nWhether the cargo bay is open.\n</summary>\n</doc>"
  }
  procedures {
    name: "CargoBay_set_Open"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.CargoBay,Open)"
    attributes: "ParameterType(0).Class(SpaceCenter.CargoBay)"
    documentation: "<doc>\n  <summary>\nWhether the cargo bay is open.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.ControlSurface,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this control surface.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_get_PitchEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ControlSurface,PitchEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nWhether the control surface has pitch control enabled.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_set_PitchEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.ControlSurface,PitchEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nWhether the control surface has pitch control enabled.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_get_YawEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ControlSurface,YawEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nWhether the control surface has yaw control enabled.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_set_YawEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.ControlSurface,YawEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nWhether the control surface has yaw control enabled.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_get_RollEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ControlSurface,RollEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nWhether the control surface has roll control enabled.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_set_RollEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.ControlSurface,RollEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nWhether the control surface has roll control enabled.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_get_Inverted"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ControlSurface,Inverted)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nWhether the control surface movement is inverted.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_set_Inverted"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.ControlSurface,Inverted)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nWhether the control surface movement is inverted.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_get_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ControlSurface,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nWhether the control surface has been fully deployed.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_set_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.ControlSurface,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nWhether the control surface has been fully deployed.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_get_SurfaceArea"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ControlSurface,SurfaceArea)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nSurface area of the control surface in <math>m^2</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "ControlSurface_get_AvailableTorque"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.ControlSurface,AvailableTorque)"
    attributes: "ParameterType(0).Class(SpaceCenter.ControlSurface)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "Decoupler_Decouple"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(SpaceCenter.Decoupler,Decouple)"
    attributes: "ParameterType(0).Class(SpaceCenter.Decoupler)"
    attributes: "ReturnType.Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nFires the decoupler. Returns the new vessel created when the decoupler fires.\nThrows an exception if the decoupler has already fired.\n</summary>\n</doc>"
  }
  procedures {
    name: "Decoupler_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Decoupler,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Decoupler)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this decoupler.\n</summary>\n</doc>"
  }
  procedures {
    name: "Decoupler_get_Decoupled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Decoupler,Decoupled)"
    attributes: "ParameterType(0).Class(SpaceCenter.Decoupler)"
    documentation: "<doc>\n  <summary>\nWhether the decoupler has fired.\n</summary>\n</doc>"
  }
  procedures {
    name: "Decoupler_get_Staged"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Decoupler,Staged)"
    attributes: "ParameterType(0).Class(SpaceCenter.Decoupler)"
    documentation: "<doc>\n  <summary>\nWhether the decoupler is enabled in the staging sequence.\n</summary>\n</doc>"
  }
  procedures {
    name: "Decoupler_get_Impulse"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Decoupler,Impulse)"
    attributes: "ParameterType(0).Class(SpaceCenter.Decoupler)"
    documentation: "<doc>\n  <summary>\nThe impulse that the decoupler imparts when it is fired, in Newton seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_Undock"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(SpaceCenter.DockingPort,Undock)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    attributes: "ReturnType.Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nUndocks the docking port and returns the new <see cref=\"T:SpaceCenter.Vessel\" /> that is created.\nThis method can be called for either docking port in a docked pair.\nThrows an exception if the docking port is not docked to anything.\n</summary>\n  <remarks>\nAfter undocking, the active vessel may change. See <see cref=\"M:SpaceCenter.ActiveVessel\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "DockingPort_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.DockingPort,Position)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position of the docking port in the given reference frame.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_Direction"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.DockingPort,Direction)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe direction that docking port points in, in the given reference frame.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_Rotation"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.DockingPort,Rotation)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double,double)"
    documentation: "<doc>\n  <summary>\nThe rotation of the docking port, in the given reference frame.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.DockingPort,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this docking port.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_get_State"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.DockingPort,State)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    attributes: "ReturnType.Enum(SpaceCenter.DockingPortState)"
    documentation: "<doc>\n  <summary>\nThe current state of the docking port.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_get_DockedPart"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.DockingPort,DockedPart)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part that this docking port is docked to. Returns <c>null</c> if this\ndocking port is not docked to anything.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_get_ReengageDistance"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.DockingPort,ReengageDistance)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    documentation: "<doc>\n  <summary>\nThe distance a docking port must move away when it undocks before it\nbecomes ready to dock with another port, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_get_HasShield"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.DockingPort,HasShield)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    documentation: "<doc>\n  <summary>\nWhether the docking port has a shield.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_get_Shielded"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.DockingPort,Shielded)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    documentation: "<doc>\n  <summary>\nThe state of the docking ports shield, if it has one.\n\nReturns <c>true</c> if the docking port has a shield, and the shield is\nclosed. Otherwise returns <c>false</c>. When set to <c>true</c>, the shield is\nclosed, and when set to <c>false</c> the shield is opened. If the docking\nport does not have a shield, setting this attribute has no effect.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_set_Shielded"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.DockingPort,Shielded)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    documentation: "<doc>\n  <summary>\nThe state of the docking ports shield, if it has one.\n\nReturns <c>true</c> if the docking port has a shield, and the shield is\nclosed. Otherwise returns <c>false</c>. When set to <c>true</c>, the shield is\nclosed, and when set to <c>false</c> the shield is opened. If the docking\nport does not have a shield, setting this attribute has no effect.\n</summary>\n</doc>"
  }
  procedures {
    name: "DockingPort_get_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.DockingPort,ReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.DockingPort)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame that is fixed relative to this docking port, and\noriented with the port.\n<list type=\"bullet\"><item><description>The origin is at the position of the docking port.</description></item><item><description>The axes rotate with the docking port.</description></item><item><description>The x-axis points out to the right side of the docking port.</description></item><item><description>The y-axis points in the direction the docking port is facing.</description></item><item><description>The z-axis points out of the bottom off the docking port.</description></item></list></summary>\n  <remarks>\nThis reference frame is not necessarily equivalent to the reference frame\nfor the part, returned by <see cref=\"M:SpaceCenter.Part.ReferenceFrame\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Engine_ToggleMode"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Engine,ToggleMode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nToggle the current engine mode.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Engine,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this engine.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Engine,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engine is active. Setting this attribute may have no effect,\ndepending on <see cref=\"M:SpaceCenter.Engine.CanShutdown\" /> and <see cref=\"M:SpaceCenter.Engine.CanRestart\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_set_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Engine,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engine is active. Setting this attribute may have no effect,\ndepending on <see cref=\"M:SpaceCenter.Engine.CanShutdown\" /> and <see cref=\"M:SpaceCenter.Engine.CanRestart\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_Thrust"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,Thrust)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe current amount of thrust being produced by the engine, in Newtons.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_AvailableThrust"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,AvailableThrust)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe amount of thrust, in Newtons, that would be produced by the engine\nwhen activated and with its throttle set to 100%.\nReturns zero if the engine does not have any fuel.\nTakes the engine\'s current <see cref=\"M:SpaceCenter.Engine.ThrustLimit\" /> and atmospheric conditions into account.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_MaxThrust"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,MaxThrust)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe amount of thrust, in Newtons, that would be produced by the engine\nwhen activated and fueled, with its throttle and throttle limiter set to 100%.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_MaxVacuumThrust"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,MaxVacuumThrust)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe maximum amount of thrust that can be produced by the engine in a\nvacuum, in Newtons. This is the amount of thrust produced by the engine\nwhen activated, <see cref=\"M:SpaceCenter.Engine.ThrustLimit\" /> is set to 100%, the main\nvessel\'s throttle is set to 100% and the engine is in a vacuum.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_ThrustLimit"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,ThrustLimit)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe thrust limiter of the engine. A value between 0 and 1. Setting this\nattribute may have no effect, for example the thrust limit for a solid\nrocket booster cannot be changed in flight.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_set_ThrustLimit"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Engine,ThrustLimit)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe thrust limiter of the engine. A value between 0 and 1. Setting this\nattribute may have no effect, for example the thrust limit for a solid\nrocket booster cannot be changed in flight.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_Thrusters"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Engine,Thrusters)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    attributes: "ReturnType.List(Class(SpaceCenter.Thruster))"
    documentation: "<doc>\n  <summary>\nThe components of the engine that generate thrust.\n</summary>\n  <remarks>\nFor example, this corresponds to the rocket nozzel on a solid rocket booster,\nor the individual nozzels on a RAPIER engine.\nThe overall thrust produced by the engine, as reported by <see cref=\"M:SpaceCenter.Engine.AvailableThrust\" />,\n<see cref=\"M:SpaceCenter.Engine.MaxThrust\" /> and others, is the sum of the thrust generated by each thruster.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Engine_get_SpecificImpulse"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,SpecificImpulse)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe current specific impulse of the engine, in seconds. Returns zero\nif the engine is not active.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_VacuumSpecificImpulse"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,VacuumSpecificImpulse)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe vacuum specific impulse of the engine, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_KerbinSeaLevelSpecificImpulse"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,KerbinSeaLevelSpecificImpulse)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe specific impulse of the engine at sea level on Kerbin, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_PropellantNames"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Engine,PropellantNames)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nThe names of the propellants that the engine consumes.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_Propellants"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Engine,Propellants)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    attributes: "ReturnType.List(Class(SpaceCenter.Propellant))"
    documentation: "<doc>\n  <summary>\nThe propellants that the engine consumes.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_PropellantRatios"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Dictionary"
    attributes: "Class.Property.Get(SpaceCenter.Engine,PropellantRatios)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    attributes: "ReturnType.Dictionary(string,float)"
    documentation: "<doc>\n  <summary>\nThe ratio of resources that the engine consumes. A dictionary mapping resource names\nto the ratio at which they are consumed by the engine.\n</summary>\n  <remarks>\nFor example, if the ratios are 0.6 for LiquidFuel and 0.4 for Oxidizer, then for every 0.6 units of\nLiquidFuel that the engine burns, it will burn 0.4 units of Oxidizer.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Engine_get_HasFuel"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Engine,HasFuel)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engine has any fuel available.\n</summary>\n  <remarks>\nThe engine must be activated for this property to update correctly.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Engine_get_Throttle"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,Throttle)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe current throttle setting for the engine. A value between 0 and 1.\nThis is not necessarily the same as the vessel\'s main throttle\nsetting, as some engines take time to adjust their throttle\n(such as jet engines).\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_ThrottleLocked"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Engine,ThrottleLocked)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the <see cref=\"M:SpaceCenter.Control.Throttle\" /> affects the engine. For example,\nthis is <c>true</c> for liquid fueled rockets, and <c>false</c> for solid rocket\nboosters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_CanRestart"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Engine,CanRestart)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engine can be restarted once shutdown. If the engine cannot be shutdown,\nreturns <c>false</c>. For example, this is <c>true</c> for liquid fueled rockets\nand <c>false</c> for solid rocket boosters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_CanShutdown"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Engine,CanShutdown)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engine can be shutdown once activated. For example, this is\n<c>true</c> for liquid fueled rockets and <c>false</c> for solid rocket boosters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_HasModes"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Engine,HasModes)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engine has multiple modes of operation.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_Mode"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Engine,Mode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe name of the current engine mode.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_set_Mode"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(SpaceCenter.Engine,Mode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe name of the current engine mode.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_Modes"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Dictionary"
    attributes: "Class.Property.Get(SpaceCenter.Engine,Modes)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    attributes: "ReturnType.Dictionary(string,Class(SpaceCenter.Engine))"
    documentation: "<doc>\n  <summary>\nThe available modes for the engine.\nA dictionary mapping mode names to <see cref=\"T:SpaceCenter.Engine\" /> objects.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_AutoModeSwitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Engine,AutoModeSwitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engine will automatically switch modes.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_set_AutoModeSwitch"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Engine,AutoModeSwitch)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engine will automatically switch modes.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_Gimballed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Engine,Gimballed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engine is gimballed.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_GimbalRange"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,GimbalRange)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe range over which the gimbal can move, in degrees.\nReturns 0 if the engine is not gimballed.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_GimbalLocked"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Engine,GimbalLocked)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engines gimbal is locked in place. Setting this attribute has\nno effect if the engine is not gimballed.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_set_GimbalLocked"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Engine,GimbalLocked)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nWhether the engines gimbal is locked in place. Setting this attribute has\nno effect if the engine is not gimballed.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_GimbalLimit"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Engine,GimbalLimit)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe gimbal limiter of the engine. A value between 0 and 1.\nReturns 0 if the gimbal is locked.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_set_GimbalLimit"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Engine,GimbalLimit)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nThe gimbal limiter of the engine. A value between 0 and 1.\nReturns 0 if the gimbal is locked.\n</summary>\n</doc>"
  }
  procedures {
    name: "Engine_get_AvailableTorque"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Engine,AvailableTorque)"
    attributes: "ParameterType(0).Class(SpaceCenter.Engine)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\nReturns zero if the engine is inactive, or not gimballed.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_Run"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Experiment,Run)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nRun the experiment.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_Transmit"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Experiment,Transmit)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nTransmit all experimental data contained by this part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_Dump"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Experiment,Dump)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nDump the experimental data contained by the experiment.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_Reset"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Experiment,Reset)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nReset the experiment.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Experiment,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this experiment.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_get_Inoperable"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Experiment,Inoperable)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nWhether the experiment is inoperable.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_get_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Experiment,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nWhether the experiment has been deployed.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_get_Rerunnable"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Experiment,Rerunnable)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nWhether the experiment can be re-run.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_get_HasData"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Experiment,HasData)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nWhether the experiment contains data.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_get_Data"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Experiment,Data)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    attributes: "ReturnType.List(Class(SpaceCenter.ScienceData))"
    documentation: "<doc>\n  <summary>\nThe data contained in this experiment.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_get_Available"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Experiment,Available)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nDetermines if the experiment is available given the current conditions.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_get_Biome"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Experiment,Biome)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nThe name of the biome the experiment is currently in.\n</summary>\n</doc>"
  }
  procedures {
    name: "Experiment_get_ScienceSubject"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Experiment,ScienceSubject)"
    attributes: "ParameterType(0).Class(SpaceCenter.Experiment)"
    attributes: "ReturnType.Class(SpaceCenter.ScienceSubject)"
    documentation: "<doc>\n  <summary>\nContaining information on the corresponding specific science result for the current conditions.\nReturns null if experiment is unavailable.\n</summary>\n</doc>"
  }
  procedures {
    name: "Fairing_Jettison"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Fairing,Jettison)"
    attributes: "ParameterType(0).Class(SpaceCenter.Fairing)"
    documentation: "<doc>\n  <summary>\nJettison the fairing. Has no effect if it has already been jettisoned.\n</summary>\n</doc>"
  }
  procedures {
    name: "Fairing_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Fairing,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Fairing)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this fairing.\n</summary>\n</doc>"
  }
  procedures {
    name: "Fairing_get_Jettisoned"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Fairing,Jettisoned)"
    attributes: "ParameterType(0).Class(SpaceCenter.Fairing)"
    documentation: "<doc>\n  <summary>\nWhether the fairing has been jettisoned.\n</summary>\n</doc>"
  }
  procedures {
    name: "Force_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Force,Remove)"
    attributes: "ParameterType(0).Class(SpaceCenter.Force)"
    documentation: "<doc>\n  <summary>\nRemove the force.\n</summary>\n</doc>"
  }
  procedures {
    name: "Force_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Force,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Force)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part that this force is applied to.\n</summary>\n</doc>"
  }
  procedures {
    name: "Force_get_ForceVector"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Force,ForceVector)"
    attributes: "ParameterType(0).Class(SpaceCenter.Force)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe force vector. The magnitude of the vector is the strength of the force in Newtons.\n</summary>\n</doc>"
  }
  procedures {
    name: "Force_set_ForceVector"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.Force,ForceVector)"
    attributes: "ParameterType(0).Class(SpaceCenter.Force)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe force vector. The magnitude of the vector is the strength of the force in Newtons.\n</summary>\n</doc>"
  }
  procedures {
    name: "Force_get_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Force,Position)"
    attributes: "ParameterType(0).Class(SpaceCenter.Force)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position at which the force acts.\n</summary>\n</doc>"
  }
  procedures {
    name: "Force_set_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.Force,Position)"
    attributes: "ParameterType(0).Class(SpaceCenter.Force)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position at which the force acts.\n</summary>\n</doc>"
  }
  procedures {
    name: "Force_get_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Force,ReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Force)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame of the force vector and position.\n</summary>\n</doc>"
  }
  procedures {
    name: "Force_set_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(SpaceCenter.Force,ReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Force)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame of the force vector and position.\n</summary>\n</doc>"
  }
  procedures {
    name: "Intake_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Intake,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Intake)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this intake.\n</summary>\n</doc>"
  }
  procedures {
    name: "Intake_get_Open"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Intake,Open)"
    attributes: "ParameterType(0).Class(SpaceCenter.Intake)"
    documentation: "<doc>\n  <summary>\nWhether the intake is open.\n</summary>\n</doc>"
  }
  procedures {
    name: "Intake_set_Open"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Intake,Open)"
    attributes: "ParameterType(0).Class(SpaceCenter.Intake)"
    documentation: "<doc>\n  <summary>\nWhether the intake is open.\n</summary>\n</doc>"
  }
  procedures {
    name: "Intake_get_Speed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Intake,Speed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Intake)"
    documentation: "<doc>\n  <summary>\nSpeed of the flow into the intake, in <math>m/s</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Intake_get_Flow"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Intake,Flow)"
    attributes: "ParameterType(0).Class(SpaceCenter.Intake)"
    documentation: "<doc>\n  <summary>\nThe rate of flow into the intake, in units of resource per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Intake_get_Area"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Intake,Area)"
    attributes: "ParameterType(0).Class(SpaceCenter.Intake)"
    documentation: "<doc>\n  <summary>\nThe area of the intake\'s opening, in square meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "LandingGear_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.LandingGear,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.LandingGear)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this landing gear.\n</summary>\n</doc>"
  }
  procedures {
    name: "LandingGear_get_Deployable"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.LandingGear,Deployable)"
    attributes: "ParameterType(0).Class(SpaceCenter.LandingGear)"
    documentation: "<doc>\n  <summary>\nWhether the landing gear is deployable.\n</summary>\n</doc>"
  }
  procedures {
    name: "LandingGear_get_State"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.LandingGear,State)"
    attributes: "ParameterType(0).Class(SpaceCenter.LandingGear)"
    attributes: "ReturnType.Enum(SpaceCenter.LandingGearState)"
    documentation: "<doc>\n  <summary>\nGets the current state of the landing gear.\n</summary>\n  <remarks>\nFixed landing gear are always deployed.\n</remarks>\n</doc>"
  }
  procedures {
    name: "LandingGear_get_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.LandingGear,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.LandingGear)"
    documentation: "<doc>\n  <summary>\nWhether the landing gear is deployed.\n</summary>\n  <remarks>\nFixed landing gear are always deployed.\nReturns an error if you try to deploy fixed landing gear.\n</remarks>\n</doc>"
  }
  procedures {
    name: "LandingGear_set_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.LandingGear,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.LandingGear)"
    documentation: "<doc>\n  <summary>\nWhether the landing gear is deployed.\n</summary>\n  <remarks>\nFixed landing gear are always deployed.\nReturns an error if you try to deploy fixed landing gear.\n</remarks>\n</doc>"
  }
  procedures {
    name: "LandingLeg_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.LandingLeg,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.LandingLeg)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this landing leg.\n</summary>\n</doc>"
  }
  procedures {
    name: "LandingLeg_get_State"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.LandingLeg,State)"
    attributes: "ParameterType(0).Class(SpaceCenter.LandingLeg)"
    attributes: "ReturnType.Enum(SpaceCenter.LandingLegState)"
    documentation: "<doc>\n  <summary>\nThe current state of the landing leg.\n</summary>\n</doc>"
  }
  procedures {
    name: "LandingLeg_get_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.LandingLeg,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.LandingLeg)"
    documentation: "<doc>\n  <summary>\nWhether the landing leg is deployed.\n</summary>\n  <remarks>\nFixed landing legs are always deployed.\nReturns an error if you try to deploy fixed landing gear.\n</remarks>\n</doc>"
  }
  procedures {
    name: "LandingLeg_set_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.LandingLeg,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.LandingLeg)"
    documentation: "<doc>\n  <summary>\nWhether the landing leg is deployed.\n</summary>\n  <remarks>\nFixed landing legs are always deployed.\nReturns an error if you try to deploy fixed landing gear.\n</remarks>\n</doc>"
  }
  procedures {
    name: "LaunchClamp_Release"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.LaunchClamp,Release)"
    attributes: "ParameterType(0).Class(SpaceCenter.LaunchClamp)"
    documentation: "<doc>\n  <summary>\nReleases the docking clamp. Has no effect if the clamp has already been released.\n</summary>\n</doc>"
  }
  procedures {
    name: "LaunchClamp_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.LaunchClamp,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.LaunchClamp)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this launch clamp.\n</summary>\n</doc>"
  }
  procedures {
    name: "Light_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Light,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Light)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this light.\n</summary>\n</doc>"
  }
  procedures {
    name: "Light_get_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Light,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.Light)"
    documentation: "<doc>\n  <summary>\nWhether the light is switched on.\n</summary>\n</doc>"
  }
  procedures {
    name: "Light_set_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Light,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.Light)"
    documentation: "<doc>\n  <summary>\nWhether the light is switched on.\n</summary>\n</doc>"
  }
  procedures {
    name: "Light_get_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Light,Color)"
    attributes: "ParameterType(0).Class(SpaceCenter.Light)"
    attributes: "ReturnType.Tuple(float,float,float)"
    documentation: "<doc>\n  <summary>\nThe color of the light, as an RGB triple.\n</summary>\n</doc>"
  }
  procedures {
    name: "Light_set_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(SpaceCenter.Light,Color)"
    attributes: "ParameterType(0).Class(SpaceCenter.Light)"
    attributes: "ParameterType(1).Tuple(float,float,float)"
    documentation: "<doc>\n  <summary>\nThe color of the light, as an RGB triple.\n</summary>\n</doc>"
  }
  procedures {
    name: "Light_get_PowerUsage"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Light,PowerUsage)"
    attributes: "ParameterType(0).Class(SpaceCenter.Light)"
    documentation: "<doc>\n  <summary>\nThe current power usage, in units of charge per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Module_HasField"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Method(SpaceCenter.Module,HasField)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\nReturns <c>true</c> if the module has a field with the given name.\n</summary>\n  <param name=\"name\">Name of the field.</param>\n</doc>"
  }
  procedures {
    name: "Module_GetField"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Method(SpaceCenter.Module,GetField)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\nReturns the value of a field.\n</summary>\n  <param name=\"name\">Name of the field.</param>\n</doc>"
  }
  procedures {
    name: "Module_SetFieldInt"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Method(SpaceCenter.Module,SetFieldInt)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\nSet the value of a field to the given integer number.\n</summary>\n  <param name=\"name\">Name of the field.</param>\n  <param name=\"value\">Value to set.</param>\n</doc>"
  }
  procedures {
    name: "Module_SetFieldFloat"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Method(SpaceCenter.Module,SetFieldFloat)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\nSet the value of a field to the given floating point number.\n</summary>\n  <param name=\"name\">Name of the field.</param>\n  <param name=\"value\">Value to set.</param>\n</doc>"
  }
  procedures {
    name: "Module_SetFieldString"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Method(SpaceCenter.Module,SetFieldString)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\nSet the value of a field to the given string.\n</summary>\n  <param name=\"name\">Name of the field.</param>\n  <param name=\"value\">Value to set.</param>\n</doc>"
  }
  procedures {
    name: "Module_ResetField"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    attributes: "Class.Method(SpaceCenter.Module,ResetField)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\nSet the value of a field to its original value.\n</summary>\n  <param name=\"name\">Name of the field.</param>\n</doc>"
  }
  procedures {
    name: "Module_HasEvent"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Method(SpaceCenter.Module,HasEvent)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\n    <c>true</c> if the module has an event with the given name.\n           </summary>\n  <param name=\"name\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Module_TriggerEvent"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    attributes: "Class.Method(SpaceCenter.Module,TriggerEvent)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\nTrigger the named event. Equivalent to clicking the button in the right-click menu of the part.\n</summary>\n  <param name=\"name\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Module_HasAction"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Method(SpaceCenter.Module,HasAction)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\n    <c>true</c> if the part has an action with the given name.\n           </summary>\n  <param name=\"name\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Module_SetAction"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    parameters {
      name: "value"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    attributes: "Class.Method(SpaceCenter.Module,SetAction)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\nSet the value of an action with the given name.\n</summary>\n  <param name=\"name\">\n  </param>\n  <param name=\"value\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Module_get_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Module,Name)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    documentation: "<doc>\n  <summary>\nName of the PartModule. For example, \"ModuleEngines\".\n</summary>\n</doc>"
  }
  procedures {
    name: "Module_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Module,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part that contains this module.\n</summary>\n</doc>"
  }
  procedures {
    name: "Module_get_Fields"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Dictionary"
    attributes: "Class.Property.Get(SpaceCenter.Module,Fields)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    attributes: "ReturnType.Dictionary(string,string)"
    documentation: "<doc>\n  <summary>\nThe modules field names and their associated values, as a dictionary.\nThese are the values visible in the right-click menu of the part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Module_get_Events"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Module,Events)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nA list of the names of all of the modules events. Events are the clickable buttons\nvisible in the right-click menu of the part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Module_get_Actions"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Module,Actions)"
    attributes: "ParameterType(0).Class(SpaceCenter.Module)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nA list of all the names of the modules actions. These are the parts actions that can be assigned\nto action groups in the in-game editor.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parachute_Deploy"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Parachute,Deploy)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parachute)"
    documentation: "<doc>\n  <summary>\nDeploys the parachute. This has no effect if the parachute has already\nbeen deployed.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parachute_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Parachute,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parachute)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this parachute.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parachute_get_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Parachute,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parachute)"
    documentation: "<doc>\n  <summary>\nWhether the parachute has been deployed.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parachute_get_State"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Parachute,State)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parachute)"
    attributes: "ReturnType.Enum(SpaceCenter.ParachuteState)"
    documentation: "<doc>\n  <summary>\nThe current state of the parachute.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parachute_get_DeployAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Parachute,DeployAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parachute)"
    documentation: "<doc>\n  <summary>\nThe altitude at which the parachute will full deploy, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parachute_set_DeployAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Parachute,DeployAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parachute)"
    documentation: "<doc>\n  <summary>\nThe altitude at which the parachute will full deploy, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parachute_get_DeployMinPressure"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Parachute,DeployMinPressure)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parachute)"
    documentation: "<doc>\n  <summary>\nThe minimum pressure at which the parachute will semi-deploy, in atmospheres.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parachute_set_DeployMinPressure"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(SpaceCenter.Parachute,DeployMinPressure)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parachute)"
    documentation: "<doc>\n  <summary>\nThe minimum pressure at which the parachute will semi-deploy, in atmospheres.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Part,Position)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position of the part in the given reference frame.\n</summary>\n  <remarks>\nThis is a fixed position in the part, defined by the parts model.\nIt s not necessarily the same as the parts center of mass.\nUse <see cref=\"M:SpaceCenter.Part.CenterOfMass\" /> to get the parts center of mass.\n</remarks>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Part_CenterOfMass"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Part,CenterOfMass)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position of the parts center of mass in the given reference frame.\nIf the part is physicsless, this is equivalent to <see cref=\"M:SpaceCenter.Part.Position\" />.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Part_Direction"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Part,Direction)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe direction of the part in the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Part_Velocity"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Part,Velocity)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe velocity of the part in the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Part_Rotation"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Part,Rotation)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double,double)"
    documentation: "<doc>\n  <summary>\nThe rotation of the part in the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Part_AddForce"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "force"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "position"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(SpaceCenter.Part,AddForce)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    attributes: "ParameterType(2).Tuple(double,double,double)"
    attributes: "ParameterType(3).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Class(SpaceCenter.Force)"
    documentation: "<doc>\n  <summary>\nExert a constant force on the part, acting at the given position.\nReturns an object that can be used to remove or modify the force.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_InstantaneousForce"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "force"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "position"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Part,InstantaneousForce)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    attributes: "ParameterType(2).Tuple(double,double,double)"
    attributes: "ParameterType(3).Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nExert an instantaneous force on the part, acting at the given position.\n</summary>\n  <remarks>\nThe force is applied instantaneously in a single physics update.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Part_get_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Part,Name)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nInternal name of the part, as used in\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation\">part cfg files</a>.\nFor example \"Mark1-2Pod\".\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Title"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Part,Title)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nTitle of the part, as shown when the part is right clicked in-game. For example \"Mk1-2 Command Pod\".\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Tag"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Part,Tag)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe name tag for the part. Can be set to a custom string using the in-game user interface.\n</summary>\n  <remarks>\nThis requires either the <a href=\"http://github.com/krpc/NameTag/releases/latest\">NameTag</a> or\n<a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/61827-/\">kOS</a> mods to be installed.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Part_set_Tag"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(SpaceCenter.Part,Tag)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe name tag for the part. Can be set to a custom string using the in-game user interface.\n</summary>\n  <remarks>\nThis requires either the <a href=\"http://github.com/krpc/NameTag/releases/latest\">NameTag</a> or\n<a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/61827-/\">kOS</a> mods to be installed.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Part_get_Cost"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Part,Cost)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe cost of the part, in units of funds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Vessel"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Vessel)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe vessel that contains this part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Parent"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Parent)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe parts parent. Returns <c>null</c> if the part does not have a parent.\nThis, in combination with <see cref=\"M:SpaceCenter.Part.Children\" />, can be used to traverse the vessels parts tree.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Children"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Part,Children)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nThe parts children. Returns an empty list if the part has no children.\nThis, in combination with <see cref=\"M:SpaceCenter.Part.Parent\" />, can be used to traverse the vessels parts tree.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_AxiallyAttached"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Part,AxiallyAttached)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nWhether the part is axially attached to its parent, i.e. on the top\nor bottom of its parent. If the part has no parent, returns <c>false</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_RadiallyAttached"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Part,RadiallyAttached)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nWhether the part is radially attached to its parent, i.e. on the side of its parent.\nIf the part has no parent, returns <c>false</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Stage"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Part,Stage)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe stage in which this part will be activated. Returns -1 if the part is not activated by staging.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_DecoupleStage"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Part,DecoupleStage)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe stage in which this part will be decoupled. Returns -1 if the part is never decoupled from the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Massless"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Part,Massless)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nWhether the part is <a href=\"http://wiki.kerbalspaceprogram.com/wiki/Massless_part\">massless</a>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Mass"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Part,Mass)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe current mass of the part, including resources it contains, in kilograms.\nReturns zero if the part is massless.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_DryMass"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Part,DryMass)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe mass of the part, not including any resources it contains, in kilograms. Returns zero if the part is massless.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Shielded"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Part,Shielded)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nWhether the part is shielded from the exterior of the vessel, for example by a fairing.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_DynamicPressure"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Part,DynamicPressure)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe dynamic pressure acting on the part, in Pascals.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ImpactTolerance"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Part,ImpactTolerance)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe impact tolerance of the part, in meters per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Temperature"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Part,Temperature)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nTemperature of the part, in Kelvin.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_SkinTemperature"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Part,SkinTemperature)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nTemperature of the skin of the part, in Kelvin.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_MaxTemperature"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Part,MaxTemperature)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nMaximum temperature that the part can survive, in Kelvin.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_MaxSkinTemperature"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Part,MaxSkinTemperature)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nMaximum temperature that the skin of the part can survive, in Kelvin.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ThermalMass"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Part,ThermalMass)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nA measure of how much energy it takes to increase the internal temperature of the part, in Joules per Kelvin.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ThermalSkinMass"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Part,ThermalSkinMass)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nA measure of how much energy it takes to increase the skin temperature of the part, in Joules per Kelvin.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ThermalResourceMass"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Part,ThermalResourceMass)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nA measure of how much energy it takes to increase the temperature of the resources contained in the part, in Joules per Kelvin.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ThermalInternalFlux"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Part,ThermalInternalFlux)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe rate at which heat energy is begin generated by the part.\nFor example, some engines generate heat by combusting fuel.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is losing heat energy.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ThermalConductionFlux"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Part,ThermalConductionFlux)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe rate at which heat energy is conducting into or out of the part via contact with other parts.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is losing heat energy.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ThermalConvectionFlux"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Part,ThermalConvectionFlux)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe rate at which heat energy is convecting into or out of the part from the surrounding atmosphere.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is losing heat energy.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ThermalRadiationFlux"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Part,ThermalRadiationFlux)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe rate at which heat energy is radiating into or out of the part from the surrounding environment.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is losing heat energy.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ThermalSkinToInternalFlux"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Part,ThermalSkinToInternalFlux)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe rate at which heat energy is transferring between the part\'s skin and its internals.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part\'s internals are gaining heat energy,\nand negative means its skin is gaining heat energy.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Resources"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Resources)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Resources)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.Resources\" /> object for the part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Crossfeed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Part,Crossfeed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nWhether this part is crossfeed capable.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_IsFuelLine"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Part,IsFuelLine)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nWhether this part is a fuel line.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_FuelLinesFrom"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Part,FuelLinesFrom)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nThe parts that are connected to this part via fuel lines, where the direction of the fuel line is into this part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_FuelLinesTo"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Part,FuelLinesTo)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nThe parts that are connected to this part via fuel lines, where the direction of the fuel line is out of this part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Modules"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Part,Modules)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.List(Class(SpaceCenter.Module))"
    documentation: "<doc>\n  <summary>\nThe modules for this part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_CargoBay"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,CargoBay)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.CargoBay)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.CargoBay\" /> if the part is a cargo bay, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ControlSurface"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,ControlSurface)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.ControlSurface)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.ControlSurface\" /> if the part is an aerodynamic control surface, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Decoupler"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Decoupler)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Decoupler)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.Decoupler\" /> if the part is a decoupler, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_DockingPort"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,DockingPort)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.DockingPort)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.DockingPort\" /> if the part is a docking port, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Engine"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Engine)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Engine)"
    documentation: "<doc>\n  <summary>\nAn <see cref=\"T:SpaceCenter.Engine\" /> if the part is an engine, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Experiment"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Experiment)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Experiment)"
    documentation: "<doc>\n  <summary>\nAn <see cref=\"T:SpaceCenter.Experiment\" /> if the part is a science experiment, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Fairing"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Fairing)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Fairing)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.Fairing\" /> if the part is a fairing, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Intake"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Intake)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Intake)"
    documentation: "<doc>\n  <summary>\nAn <see cref=\"T:SpaceCenter.Intake\" /> if the part is an intake, otherwise <c>null</c>.\n</summary>\n  <remarks>\nThis includes any part that generates thrust. This covers many different types of engine,\nincluding liquid fuel rockets, solid rocket boosters and jet engines.\nFor RCS thrusters see <see cref=\"T:SpaceCenter.RCS\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Part_get_LandingGear"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,LandingGear)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.LandingGear)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.LandingGear\" /> if the part is a landing gear, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_LandingLeg"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,LandingLeg)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.LandingLeg)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.LandingLeg\" /> if the part is a landing leg, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_LaunchClamp"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,LaunchClamp)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.LaunchClamp)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.LaunchClamp\" /> if the part is a launch clamp, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Light"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Light)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Light)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.Light\" /> if the part is a light, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Parachute"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Parachute)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Parachute)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.Parachute\" /> if the part is a parachute, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Radiator"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Radiator)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Radiator)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.Radiator\" /> if the part is a radiator, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_RCS"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,RCS)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.RCS\" /> if the part is an RCS block/thruster, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ReactionWheel"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,ReactionWheel)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.ReactionWheel)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.ReactionWheel\" /> if the part is a reaction wheel, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ResourceConverter"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,ResourceConverter)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.ResourceConverter)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.ResourceConverter\" /> if the part is a resource converter, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ResourceHarvester"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,ResourceHarvester)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.ResourceHarvester)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.ResourceHarvester\" /> if the part is a resource harvester, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_Sensor"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,Sensor)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.Sensor)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.Sensor\" /> if the part is a sensor, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_SolarPanel"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,SolarPanel)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.SolarPanel)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.SolarPanel\" /> if the part is a solar panel, otherwise <c>null</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_MomentOfInertia"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Part,MomentOfInertia)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe moment of inertia of the part in <math>kg.m^2</math> around its center of mass\nin the parts reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_InertiaTensor"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Part,InertiaTensor)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.List(double)"
    documentation: "<doc>\n  <summary>\nThe inertia tensor of the part in the parts reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\nReturns the 3x3 matrix as a list of elements, in row-major order.\n</summary>\n</doc>"
  }
  procedures {
    name: "Part_get_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,ReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame that is fixed relative to this part, and centered on a fixed position within the part, defined by the parts model.\n<list type=\"bullet\"><item><description>The origin is at the position of the part, as returned by <see cref=\"M:SpaceCenter.Part.Position\" />.</description></item><item><description>The axes rotate with the part.</description></item><item><description>The x, y and z axis directions depend on the design of the part.</description></item></list></summary>\n  <remarks>\nFor docking port parts, this reference frame is not necessarily equivalent to the reference frame\nfor the docking port, returned by <see cref=\"M:SpaceCenter.DockingPort.ReferenceFrame\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Part_get_CenterOfMassReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Part,CenterOfMassReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame that is fixed relative to this part, and centered on its center of mass.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the part, as returned by <see cref=\"M:SpaceCenter.Part.CenterOfMass\" />.</description></item><item><description>The axes rotate with the part.</description></item><item><description>The x, y and z axis directions depend on the design of the part.</description></item></list></summary>\n  <remarks>\nFor docking port parts, this reference frame is not necessarily equivalent to the reference frame\nfor the docking port, returned by <see cref=\"M:SpaceCenter.DockingPort.ReferenceFrame\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Parts_WithName"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.Parts,WithName)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nA list of parts whose <see cref=\"M:SpaceCenter.Part.Name\" /> is <paramref name=\"name\" />.\n</summary>\n  <param name=\"name\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Parts_WithTitle"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "title"
      type: "string"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.Parts,WithTitle)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nA list of all parts whose <see cref=\"M:SpaceCenter.Part.Title\" /> is <paramref name=\"title\" />.\n</summary>\n  <param name=\"title\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Parts_WithTag"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "tag"
      type: "string"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.Parts,WithTag)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nA list of all parts whose <see cref=\"M:SpaceCenter.Part.Tag\" /> is <paramref name=\"tag\" />.\n</summary>\n  <param name=\"tag\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Parts_WithModule"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "moduleName"
      type: "string"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.Parts,WithModule)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nA list of all parts that contain a <see cref=\"T:SpaceCenter.Module\" /> whose\n<see cref=\"M:SpaceCenter.Module.Name\" /> is <paramref name=\"moduleName\" />.\n</summary>\n  <param name=\"moduleName\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Parts_InStage"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "stage"
      type: "int32"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.Parts,InStage)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nA list of all parts that are activated in the given <paramref name=\"stage\" />.\n</summary>\n  <param name=\"stage\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Parts_InDecoupleStage"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "stage"
      type: "int32"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.Parts,InDecoupleStage)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nA list of all parts that are decoupled in the given <paramref name=\"stage\" />.\n</summary>\n  <param name=\"stage\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Parts_ModulesWithName"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "moduleName"
      type: "string"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.Parts,ModulesWithName)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Module))"
    documentation: "<doc>\n  <summary>\nA list of modules (combined across all parts in the vessel) whose\n<see cref=\"M:SpaceCenter.Module.Name\" /> is <paramref name=\"moduleName\" />.\n</summary>\n  <param name=\"moduleName\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Parts_get_All"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,All)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Part))"
    documentation: "<doc>\n  <summary>\nA list of all of the vessels parts.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_Root"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Root)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe vessels root part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_Controlling"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Controlling)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part from which the vessel is controlled.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_set_Controlling"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(SpaceCenter.Parts,Controlling)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ParameterType(1).Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part from which the vessel is controlled.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_ControlSurfaces"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,ControlSurfaces)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.ControlSurface))"
    documentation: "<doc>\n  <summary>\nA list of all control surfaces in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_CargoBays"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,CargoBays)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.CargoBay))"
    documentation: "<doc>\n  <summary>\nA list of all cargo bays in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_Decouplers"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Decouplers)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Decoupler))"
    documentation: "<doc>\n  <summary>\nA list of all decouplers in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_DockingPorts"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,DockingPorts)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.DockingPort))"
    documentation: "<doc>\n  <summary>\nA list of all docking ports in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_Engines"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Engines)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Engine))"
    documentation: "<doc>\n  <summary>\nA list of all engines in the vessel.\n</summary>\n  <remarks>\nThis includes any part that generates thrust. This covers many different types of engine,\nincluding liquid fuel rockets, solid rocket boosters, jet engines and RCS thrusters.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Parts_get_Experiments"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Experiments)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Experiment))"
    documentation: "<doc>\n  <summary>\nA list of all science experiments in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_Fairings"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Fairings)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Fairing))"
    documentation: "<doc>\n  <summary>\nA list of all fairings in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_Intakes"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Intakes)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Intake))"
    documentation: "<doc>\n  <summary>\nA list of all intakes in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_LandingGear"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,LandingGear)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.LandingGear))"
    documentation: "<doc>\n  <summary>\nA list of all landing gear attached to the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_LandingLegs"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,LandingLegs)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.LandingLeg))"
    documentation: "<doc>\n  <summary>\nA list of all landing legs attached to the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_LaunchClamps"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,LaunchClamps)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.LaunchClamp))"
    documentation: "<doc>\n  <summary>\nA list of all launch clamps attached to the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_Lights"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Lights)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Light))"
    documentation: "<doc>\n  <summary>\nA list of all lights in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_Parachutes"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Parachutes)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Parachute))"
    documentation: "<doc>\n  <summary>\nA list of all parachutes in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_Radiators"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Radiators)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Radiator))"
    documentation: "<doc>\n  <summary>\nA list of all radiators in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_RCS"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,RCS)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.RCS))"
    documentation: "<doc>\n  <summary>\nA list of all RCS blocks/thrusters in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_ReactionWheels"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,ReactionWheels)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.ReactionWheel))"
    documentation: "<doc>\n  <summary>\nA list of all reaction wheels in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_ResourceConverters"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,ResourceConverters)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.ResourceConverter))"
    documentation: "<doc>\n  <summary>\nA list of all resource converters in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_ResourceHarvesters"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,ResourceHarvesters)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.ResourceHarvester))"
    documentation: "<doc>\n  <summary>\nA list of all resource harvesters in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_Sensors"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,Sensors)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.Sensor))"
    documentation: "<doc>\n  <summary>\nA list of all sensors in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Parts_get_SolarPanels"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Parts,SolarPanels)"
    attributes: "ParameterType(0).Class(SpaceCenter.Parts)"
    attributes: "ReturnType.List(Class(SpaceCenter.SolarPanel))"
    documentation: "<doc>\n  <summary>\nA list of all solar panels in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,Name)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    documentation: "<doc>\n  <summary>\nThe name of the propellant.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_CurrentAmount"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,CurrentAmount)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    documentation: "<doc>\n  <summary>\nThe current amount of propellant.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_CurrentRequirement"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,CurrentRequirement)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    documentation: "<doc>\n  <summary>\nThe required amount of propellant.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_TotalResourceAvailable"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,TotalResourceAvailable)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    documentation: "<doc>\n  <summary>\nThe total amount of the underlying resource currently reachable given resource flow rules.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_TotalResourceCapacity"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,TotalResourceCapacity)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    documentation: "<doc>\n  <summary>\nThe total vehicle capacity for the underlying propellant resource, restricted by resource flow rules.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_IgnoreForIsp"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,IgnoreForIsp)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    documentation: "<doc>\n  <summary>\nIf this propellant should be ignored when calculating required mass flow given specific impulse.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_IgnoreForThrustCurve"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,IgnoreForThrustCurve)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    documentation: "<doc>\n  <summary>\nIf this propellant should be ignored for thrust curve calculations.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_DrawStackGauge"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,DrawStackGauge)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    documentation: "<doc>\n  <summary>\nIf this propellant has a stack gauge or not.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_IsDeprived"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,IsDeprived)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    documentation: "<doc>\n  <summary>\nIf this propellant is deprived.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_Ratio"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,Ratio)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    documentation: "<doc>\n  <summary>\nThe propellant ratio.\n</summary>\n</doc>"
  }
  procedures {
    name: "Propellant_get_ConnectedResources"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Propellant,ConnectedResources)"
    attributes: "ParameterType(0).Class(SpaceCenter.Propellant)"
    attributes: "ReturnType.List(Class(SpaceCenter.Resource))"
    documentation: "<doc>\n  <summary>\nThe reachable resources connected to this propellant.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.RCS,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this RCS.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.RCS,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thrusters are active.\nAn RCS thruster is inactive if the RCS action group is disabled (<see cref=\"M:SpaceCenter.Control.RCS\" />),\nthe RCS thruster itself is not enabled (<see cref=\"M:SpaceCenter.RCS.Enabled\" />) or\nit is covered by a fairing (<see cref=\"M:SpaceCenter.Part.Shielded\" />).\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_Enabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.RCS,Enabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thrusters are enabled.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_set_Enabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.RCS,Enabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thrusters are enabled.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_PitchEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.RCS,PitchEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_set_PitchEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.RCS,PitchEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_YawEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.RCS,YawEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_set_YawEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.RCS,YawEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_RollEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.RCS,RollEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_set_RollEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.RCS,RollEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_ForwardEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.RCS,ForwardEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_set_ForwardEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.RCS,ForwardEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_UpEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.RCS,UpEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_set_UpEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.RCS,UpEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_RightEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.RCS,RightEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_set_RightEnabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.RCS,RightEnabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_AvailableTorque"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.RCS,AvailableTorque)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\nReturns zero if the RCS is inactive.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_MaxThrust"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.RCS,MaxThrust)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nThe maximum amount of thrust that can be produced by the RCS thrusters when active, in Newtons.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_MaxVacuumThrust"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.RCS,MaxVacuumThrust)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nThe maximum amount of thrust that can be produced by the RCS thrusters when active in a vacuum, in Newtons.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_Thrusters"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.RCS,Thrusters)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    attributes: "ReturnType.List(Class(SpaceCenter.Thruster))"
    documentation: "<doc>\n  <summary>\nA list of thrusters, one of each nozzel in the RCS part.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_SpecificImpulse"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.RCS,SpecificImpulse)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nThe current specific impulse of the RCS, in seconds. Returns zero\nif the RCS is not active.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_VacuumSpecificImpulse"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.RCS,VacuumSpecificImpulse)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nThe vacuum specific impulse of the RCS, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_KerbinSeaLevelSpecificImpulse"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.RCS,KerbinSeaLevelSpecificImpulse)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nThe specific impulse of the RCS at sea level on Kerbin, in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_Propellants"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.RCS,Propellants)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nThe names of resources that the RCS consumes.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_PropellantRatios"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Dictionary"
    attributes: "Class.Property.Get(SpaceCenter.RCS,PropellantRatios)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    attributes: "ReturnType.Dictionary(string,float)"
    documentation: "<doc>\n  <summary>\nThe ratios of resources that the RCS consumes. A dictionary mapping resource names\nto the ratios at which they are consumed by the RCS.\n</summary>\n</doc>"
  }
  procedures {
    name: "RCS_get_HasFuel"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.RCS,HasFuel)"
    attributes: "ParameterType(0).Class(SpaceCenter.RCS)"
    documentation: "<doc>\n  <summary>\nWhether the RCS has fuel available.\n</summary>\n  <remarks>\nThe RCS thruster must be activated for this property to update correctly.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Radiator_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Radiator,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Radiator)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this radiator.\n</summary>\n</doc>"
  }
  procedures {
    name: "Radiator_get_Deployable"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Radiator,Deployable)"
    attributes: "ParameterType(0).Class(SpaceCenter.Radiator)"
    documentation: "<doc>\n  <summary>\nWhether the radiator is deployable.\n</summary>\n</doc>"
  }
  procedures {
    name: "Radiator_get_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Radiator,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Radiator)"
    documentation: "<doc>\n  <summary>\nFor a deployable radiator, <c>true</c> if the radiator is extended.\nIf the radiator is not deployable, this is always <c>true</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Radiator_set_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Radiator,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Radiator)"
    documentation: "<doc>\n  <summary>\nFor a deployable radiator, <c>true</c> if the radiator is extended.\nIf the radiator is not deployable, this is always <c>true</c>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Radiator_get_State"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Radiator,State)"
    attributes: "ParameterType(0).Class(SpaceCenter.Radiator)"
    attributes: "ReturnType.Enum(SpaceCenter.RadiatorState)"
    documentation: "<doc>\n  <summary>\nThe current state of the radiator.\n</summary>\n  <remarks>\nA fixed radiator is always <see cref=\"M:SpaceCenter.RadiatorState.Extended\" />.\n</remarks>\n</doc>"
  }
  procedures {
    name: "ReactionWheel_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.ReactionWheel,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.ReactionWheel)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this reaction wheel.\n</summary>\n</doc>"
  }
  procedures {
    name: "ReactionWheel_get_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ReactionWheel,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.ReactionWheel)"
    documentation: "<doc>\n  <summary>\nWhether the reaction wheel is active.\n</summary>\n</doc>"
  }
  procedures {
    name: "ReactionWheel_set_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.ReactionWheel,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.ReactionWheel)"
    documentation: "<doc>\n  <summary>\nWhether the reaction wheel is active.\n</summary>\n</doc>"
  }
  procedures {
    name: "ReactionWheel_get_Broken"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ReactionWheel,Broken)"
    attributes: "ParameterType(0).Class(SpaceCenter.ReactionWheel)"
    documentation: "<doc>\n  <summary>\nWhether the reaction wheel is broken.\n</summary>\n</doc>"
  }
  procedures {
    name: "ReactionWheel_get_AvailableTorque"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.ReactionWheel,AvailableTorque)"
    attributes: "ParameterType(0).Class(SpaceCenter.ReactionWheel)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\nReturns zero if the reaction wheel is inactive or broken.\n</summary>\n</doc>"
  }
  procedures {
    name: "ReactionWheel_get_MaxTorque"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.ReactionWheel,MaxTorque)"
    attributes: "ParameterType(0).Class(SpaceCenter.ReactionWheel)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe maximum torque the reaction wheel can provide, is it active,\nin the pitch, roll and yaw axes of the vessel, in Newton meters.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceConverter_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "index"
      type: "int32"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Method(SpaceCenter.ResourceConverter,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
    documentation: "<doc>\n  <summary>\nTrue if the specified converter is active.\n</summary>\n  <param name=\"index\">Index of the converter.</param>\n</doc>"
  }
  procedures {
    name: "ResourceConverter_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "index"
      type: "int32"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Method(SpaceCenter.ResourceConverter,Name)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
    documentation: "<doc>\n  <summary>\nThe name of the specified converter.\n</summary>\n  <param name=\"index\">Index of the converter.</param>\n</doc>"
  }
  procedures {
    name: "ResourceConverter_Start"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "index"
      type: "int32"
    }
    attributes: "Class.Method(SpaceCenter.ResourceConverter,Start)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
    documentation: "<doc>\n  <summary>\nStart the specified converter.\n</summary>\n  <param name=\"index\">Index of the converter.</param>\n</doc>"
  }
  procedures {
    name: "ResourceConverter_Stop"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "index"
      type: "int32"
    }
    attributes: "Class.Method(SpaceCenter.ResourceConverter,Stop)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
    documentation: "<doc>\n  <summary>\nStop the specified converter.\n</summary>\n  <param name=\"index\">Index of the converter.</param>\n</doc>"
  }
  procedures {
    name: "ResourceConverter_State"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "index"
      type: "int32"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Method(SpaceCenter.ResourceConverter,State)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
    attributes: "ReturnType.Enum(SpaceCenter.ResourceConverterState)"
    documentation: "<doc>\n  <summary>\nThe state of the specified converter.\n</summary>\n  <param name=\"index\">Index of the converter.</param>\n</doc>"
  }
  procedures {
    name: "ResourceConverter_StatusInfo"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "index"
      type: "int32"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Method(SpaceCenter.ResourceConverter,StatusInfo)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
    documentation: "<doc>\n  <summary>\nStatus information for the specified converter.\nThis is the full status message shown in the in-game UI.\n</summary>\n  <param name=\"index\">Index of the converter.</param>\n</doc>"
  }
  procedures {
    name: "ResourceConverter_Inputs"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "index"
      type: "int32"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.ResourceConverter,Inputs)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nList of the names of resources consumed by the specified converter.\n</summary>\n  <param name=\"index\">Index of the converter.</param>\n</doc>"
  }
  procedures {
    name: "ResourceConverter_Outputs"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "index"
      type: "int32"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.ResourceConverter,Outputs)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nList of the names of resources produced by the specified converter.\n</summary>\n  <param name=\"index\">Index of the converter.</param>\n</doc>"
  }
  procedures {
    name: "ResourceConverter_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.ResourceConverter,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this converter.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceConverter_get_Count"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.ResourceConverter,Count)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
    documentation: "<doc>\n  <summary>\nThe number of converters in the part.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceHarvester_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.ResourceHarvester,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this harvester.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceHarvester_get_State"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.ResourceHarvester,State)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
    attributes: "ReturnType.Enum(SpaceCenter.ResourceHarvesterState)"
    documentation: "<doc>\n  <summary>\nThe state of the harvester.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceHarvester_get_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ResourceHarvester,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
    documentation: "<doc>\n  <summary>\nWhether the harvester is deployed.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceHarvester_set_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.ResourceHarvester,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
    documentation: "<doc>\n  <summary>\nWhether the harvester is deployed.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceHarvester_get_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ResourceHarvester,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
    documentation: "<doc>\n  <summary>\nWhether the harvester is actively drilling.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceHarvester_set_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.ResourceHarvester,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
    documentation: "<doc>\n  <summary>\nWhether the harvester is actively drilling.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceHarvester_get_ExtractionRate"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ResourceHarvester,ExtractionRate)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
    documentation: "<doc>\n  <summary>\nThe rate at which the drill is extracting ore, in units per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceHarvester_get_ThermalEfficiency"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ResourceHarvester,ThermalEfficiency)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
    documentation: "<doc>\n  <summary>\nThe thermal efficiency of the drill, as a percentage of its maximum.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceHarvester_get_CoreTemperature"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ResourceHarvester,CoreTemperature)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
    documentation: "<doc>\n  <summary>\nThe core temperature of the drill, in Kelvin.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceHarvester_get_OptimumCoreTemperature"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ResourceHarvester,OptimumCoreTemperature)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
    documentation: "<doc>\n  <summary>\nThe core temperature at which the drill will operate with peak efficiency, in Kelvin.\n</summary>\n</doc>"
  }
  procedures {
    name: "ScienceData_get_DataAmount"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ScienceData,DataAmount)"
    attributes: "ParameterType(0).Class(SpaceCenter.ScienceData)"
    documentation: "<doc>\n  <summary>\nData amount.\n</summary>\n</doc>"
  }
  procedures {
    name: "ScienceData_get_ScienceValue"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ScienceData,ScienceValue)"
    attributes: "ParameterType(0).Class(SpaceCenter.ScienceData)"
    documentation: "<doc>\n  <summary>\nScience value.\n</summary>\n</doc>"
  }
  procedures {
    name: "ScienceData_get_TransmitValue"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ScienceData,TransmitValue)"
    attributes: "ParameterType(0).Class(SpaceCenter.ScienceData)"
    documentation: "<doc>\n  <summary>\nTransmit value.\n</summary>\n</doc>"
  }
  procedures {
    name: "ScienceSubject_get_Science"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ScienceSubject,Science)"
    attributes: "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
    documentation: "<doc>\n  <summary>\nAmount of science already earned from this subject, not updated until after transmission/recovery.\n</summary>\n</doc>"
  }
  procedures {
    name: "ScienceSubject_get_ScienceCap"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ScienceSubject,ScienceCap)"
    attributes: "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
    documentation: "<doc>\n  <summary>\nTotal science allowable for this subject.\n</summary>\n</doc>"
  }
  procedures {
    name: "ScienceSubject_get_IsComplete"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ScienceSubject,IsComplete)"
    attributes: "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
    documentation: "<doc>\n  <summary>\n Whether the experiment has been completed.\n</summary>\n</doc>"
  }
  procedures {
    name: "ScienceSubject_get_DataScale"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ScienceSubject,DataScale)"
    attributes: "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
    documentation: "<doc>\n  <summary>\nMultiply science value by this to determine data amount in mits.\n</summary>\n</doc>"
  }
  procedures {
    name: "ScienceSubject_get_ScientificValue"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ScienceSubject,ScientificValue)"
    attributes: "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
    documentation: "<doc>\n  <summary>\nDiminishing value multiplier for decreasing the science value returned from repeated experiments.\n</summary>\n</doc>"
  }
  procedures {
    name: "ScienceSubject_get_SubjectValue"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ScienceSubject,SubjectValue)"
    attributes: "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
    documentation: "<doc>\n  <summary>\nMultiplier for specific Celestial Body/Experiment Situation combination.\n</summary>\n</doc>"
  }
  procedures {
    name: "ScienceSubject_get_Title"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.ScienceSubject,Title)"
    attributes: "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
    documentation: "<doc>\n  <summary>\nTitle of science subject, displayed in science archives\n</summary>\n</doc>"
  }
  procedures {
    name: "Sensor_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Sensor,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Sensor)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this sensor.\n</summary>\n</doc>"
  }
  procedures {
    name: "Sensor_get_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Sensor,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.Sensor)"
    documentation: "<doc>\n  <summary>\nWhether the sensor is active.\n</summary>\n</doc>"
  }
  procedures {
    name: "Sensor_set_Active"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Sensor,Active)"
    attributes: "ParameterType(0).Class(SpaceCenter.Sensor)"
    documentation: "<doc>\n  <summary>\nWhether the sensor is active.\n</summary>\n</doc>"
  }
  procedures {
    name: "Sensor_get_Value"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Sensor,Value)"
    attributes: "ParameterType(0).Class(SpaceCenter.Sensor)"
    documentation: "<doc>\n  <summary>\nThe current value of the sensor.\n</summary>\n</doc>"
  }
  procedures {
    name: "Sensor_get_PowerUsage"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Sensor,PowerUsage)"
    attributes: "ParameterType(0).Class(SpaceCenter.Sensor)"
    documentation: "<doc>\n  <summary>\nThe current power usage of the sensor, in units of charge per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "SolarPanel_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.SolarPanel,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.SolarPanel)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part object for this solar panel.\n</summary>\n</doc>"
  }
  procedures {
    name: "SolarPanel_get_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.SolarPanel,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.SolarPanel)"
    documentation: "<doc>\n  <summary>\nWhether the solar panel is extended.\n</summary>\n</doc>"
  }
  procedures {
    name: "SolarPanel_set_Deployed"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.SolarPanel,Deployed)"
    attributes: "ParameterType(0).Class(SpaceCenter.SolarPanel)"
    documentation: "<doc>\n  <summary>\nWhether the solar panel is extended.\n</summary>\n</doc>"
  }
  procedures {
    name: "SolarPanel_get_State"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.SolarPanel,State)"
    attributes: "ParameterType(0).Class(SpaceCenter.SolarPanel)"
    attributes: "ReturnType.Enum(SpaceCenter.SolarPanelState)"
    documentation: "<doc>\n  <summary>\nThe current state of the solar panel.\n</summary>\n</doc>"
  }
  procedures {
    name: "SolarPanel_get_EnergyFlow"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.SolarPanel,EnergyFlow)"
    attributes: "ParameterType(0).Class(SpaceCenter.SolarPanel)"
    documentation: "<doc>\n  <summary>\nThe current amount of energy being generated by the solar panel, in\nunits of charge per second.\n</summary>\n</doc>"
  }
  procedures {
    name: "SolarPanel_get_SunExposure"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.SolarPanel,SunExposure)"
    attributes: "ParameterType(0).Class(SpaceCenter.SolarPanel)"
    documentation: "<doc>\n  <summary>\nThe current amount of sunlight that is incident on the solar panel,\nas a percentage. A value between 0 and 1.\n</summary>\n</doc>"
  }
  procedures {
    name: "Thruster_ThrustPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Thruster,ThrustPosition)"
    attributes: "ParameterType(0).Class(SpaceCenter.Thruster)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position at which the thruster generates thrust, in the given reference frame.\nFor gimballed engines, this takes into account the current rotation of the gimbal.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Thruster_ThrustDirection"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Thruster,ThrustDirection)"
    attributes: "ParameterType(0).Class(SpaceCenter.Thruster)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe direction of the force generated by the thruster, in the given reference frame.\nThis is opposite to the direction in which the thruster expels propellant.\nFor gimballed engines, this takes into account the current rotation of the gimbal.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Thruster_InitialThrustPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Thruster,InitialThrustPosition)"
    attributes: "ParameterType(0).Class(SpaceCenter.Thruster)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe position at which the thruster generates thrust, when the engine is in its\ninitial position (no gimballing), in the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n  <remarks>\nThis position can move when the gimbal rotates. This is because the thrust position and\ngimbal position are not necessarily the same.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Thruster_InitialThrustDirection"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Thruster,InitialThrustDirection)"
    attributes: "ParameterType(0).Class(SpaceCenter.Thruster)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe direction of the force generated by the thruster, when the engine is in its\ninitial position (no gimballing), in the given reference frame.\nThis is opposite to the direction in which the thruster expels propellant.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Thruster_GimbalPosition"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Thruster,GimbalPosition)"
    attributes: "ParameterType(0).Class(SpaceCenter.Thruster)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nPosition around which the gimbal pivots.\n</summary>\n</doc>"
  }
  procedures {
    name: "Thruster_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Thruster,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Thruster)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe <see cref=\"T:SpaceCenter.Part\" /> that contains this thruster.\n</summary>\n</doc>"
  }
  procedures {
    name: "Thruster_get_ThrustReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Thruster,ThrustReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Thruster)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nA reference frame that is fixed relative to the thruster and orientated with\nits thrust direction (<see cref=\"M:SpaceCenter.Thruster.ThrustDirection\" />).\nFor gimballed engines, this takes into account the current rotation of the gimbal.\n<list type=\"bullet\"><item><description>\nThe origin is at the position of thrust for this thruster (<see cref=\"M:SpaceCenter.Thruster.ThrustPosition\" />).\n</description></item><item><description>\nThe axes rotate with the thrust direction.\nThis is the direction in which the thruster expels propellant, including any gimballing.\n</description></item><item><description>The y-axis points along the thrust direction.</description></item><item><description>The x-axis and z-axis are perpendicular to the thrust direction.</description></item></list></summary>\n</doc>"
  }
  procedures {
    name: "Thruster_get_Gimballed"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Thruster,Gimballed)"
    attributes: "ParameterType(0).Class(SpaceCenter.Thruster)"
    documentation: "<doc>\n  <summary>\nWhether the thruster is gimballed.\n</summary>\n</doc>"
  }
  procedures {
    name: "Thruster_get_GimbalAngle"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Thruster,GimbalAngle)"
    attributes: "ParameterType(0).Class(SpaceCenter.Thruster)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe current gimbal angle in the pitch, roll and yaw axes.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resource_get_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Resource,Name)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resource)"
    documentation: "<doc>\n  <summary>\nThe name of the resource.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resource_get_Part"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Resource,Part)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resource)"
    attributes: "ReturnType.Class(SpaceCenter.Part)"
    documentation: "<doc>\n  <summary>\nThe part containing the resource.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resource_get_Max"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Resource,Max)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resource)"
    documentation: "<doc>\n  <summary>\nThe total amount of the resource that can be stored in the part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resource_get_Amount"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Resource,Amount)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resource)"
    documentation: "<doc>\n  <summary>\nThe amount of the resource that is currently stored in the part.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resource_get_Density"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Resource,Density)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resource)"
    documentation: "<doc>\n  <summary>\nThe density of the resource, in <math>kg/l</math>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resource_get_FlowMode"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Resource,FlowMode)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resource)"
    attributes: "ReturnType.Enum(SpaceCenter.ResourceFlowMode)"
    documentation: "<doc>\n  <summary>\nThe flow mode of the resource.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resource_get_Enabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Resource,Enabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resource)"
    documentation: "<doc>\n  <summary>\nWhether use of this resource is enabled.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resource_set_Enabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Resource,Enabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resource)"
    documentation: "<doc>\n  <summary>\nWhether use of this resource is enabled.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceTransfer_Start"
    parameters {
      name: "fromPart"
      type: "uint64"
    }
    parameters {
      name: "toPart"
      type: "uint64"
    }
    parameters {
      name: "resource"
      type: "string"
    }
    parameters {
      name: "maxAmount"
      type: "float"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.StaticMethod(SpaceCenter.ResourceTransfer,Start)"
    attributes: "ParameterType(0).Class(SpaceCenter.Part)"
    attributes: "ParameterType(1).Class(SpaceCenter.Part)"
    attributes: "ReturnType.Class(SpaceCenter.ResourceTransfer)"
    documentation: "<doc>\n  <summary>\nStart transferring a resource transfer between a pair of parts. The transfer will move at most\n<paramref name=\"maxAmount\" /> units of the resource, depending on how much of the resource is\navailable in the source part and how much storage is available in the destination part.\nUse <see cref=\"M:SpaceCenter.ResourceTransfer.Complete\" /> to check if the transfer is complete.\nUse <see cref=\"M:SpaceCenter.ResourceTransfer.Amount\" /> to see how much of the resource has been transferred.\n</summary>\n  <param name=\"fromPart\">The part to transfer to.</param>\n  <param name=\"toPart\">The part to transfer from.</param>\n  <param name=\"resource\">The name of the resource to transfer.</param>\n  <param name=\"maxAmount\">The maximum amount of resource to transfer.</param>\n</doc>"
  }
  procedures {
    name: "ResourceTransfer_get_Complete"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.ResourceTransfer,Complete)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceTransfer)"
    documentation: "<doc>\n  <summary>\nWhether the transfer has completed.\n</summary>\n</doc>"
  }
  procedures {
    name: "ResourceTransfer_get_Amount"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.ResourceTransfer,Amount)"
    attributes: "ParameterType(0).Class(SpaceCenter.ResourceTransfer)"
    documentation: "<doc>\n  <summary>\nThe amount of the resource that has been transferred.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resources_WithResource"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Method(SpaceCenter.Resources,WithResource)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resources)"
    attributes: "ReturnType.List(Class(SpaceCenter.Resource))"
    documentation: "<doc>\n  <summary>\nAll the individual resources with the given name that can be stored.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resources_HasResource"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Method(SpaceCenter.Resources,HasResource)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resources)"
    documentation: "<doc>\n  <summary>\nCheck whether the named resource can be stored.\n</summary>\n  <param name=\"name\">The name of the resource.</param>\n</doc>"
  }
  procedures {
    name: "Resources_Max"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Method(SpaceCenter.Resources,Max)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resources)"
    documentation: "<doc>\n  <summary>\nReturns the amount of a resource that can be stored.\n</summary>\n  <param name=\"name\">The name of the resource.</param>\n</doc>"
  }
  procedures {
    name: "Resources_Amount"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Method(SpaceCenter.Resources,Amount)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resources)"
    documentation: "<doc>\n  <summary>\nReturns the amount of a resource that is currently stored.\n</summary>\n  <param name=\"name\">The name of the resource.</param>\n</doc>"
  }
  procedures {
    name: "Resources_Density"
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.StaticMethod(SpaceCenter.Resources,Density)"
    documentation: "<doc>\n  <summary>\nReturns the density of a resource, in kg/l.\n</summary>\n  <param name=\"name\">The name of the resource.</param>\n</doc>"
  }
  procedures {
    name: "Resources_FlowMode"
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.StaticMethod(SpaceCenter.Resources,FlowMode)"
    attributes: "ReturnType.Enum(SpaceCenter.ResourceFlowMode)"
    documentation: "<doc>\n  <summary>\nReturns the flow mode of a resource.\n</summary>\n  <param name=\"name\">The name of the resource.</param>\n</doc>"
  }
  procedures {
    name: "Resources_get_All"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Resources,All)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resources)"
    attributes: "ReturnType.List(Class(SpaceCenter.Resource))"
    documentation: "<doc>\n  <summary>\nAll the individual resources that can be stored.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resources_get_Names"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Resources,Names)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resources)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nA list of resource names that can be stored.\n</summary>\n</doc>"
  }
  procedures {
    name: "Resources_get_Enabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Resources,Enabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resources)"
    documentation: "<doc>\n  <summary>\nWhether use of all the resources are enabled.\n</summary>\n  <remarks>\nThis is true if all of the resources are enabled. If any of the resources are not enabled, this is false.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Resources_set_Enabled"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(SpaceCenter.Resources,Enabled)"
    attributes: "ParameterType(0).Class(SpaceCenter.Resources)"
    documentation: "<doc>\n  <summary>\nWhether use of all the resources are enabled.\n</summary>\n  <remarks>\nThis is true if all of the resources are enabled. If any of the resources are not enabled, this is false.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Vessel_Recover"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Vessel,Recover)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nRecover the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_Flight"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
      has_default_value: true
      default_value: "\000"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(SpaceCenter.Vessel,Flight)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Class(SpaceCenter.Flight)"
    documentation: "<doc>\n  <summary>\nReturns a <see cref=\"T:SpaceCenter.Flight\" /> object that can be used to get flight\ntelemetry for the vessel, in the specified reference frame.\n</summary>\n  <param name=\"referenceFrame\">\nReference frame. Defaults to the vessel\'s surface reference frame (<see cref=\"M:SpaceCenter.Vessel.SurfaceReferenceFrame\" />).\n</param>\n</doc>"
  }
  procedures {
    name: "Vessel_ResourcesInDecoupleStage"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "stage"
      type: "int32"
    }
    parameters {
      name: "cumulative"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(SpaceCenter.Vessel,ResourcesInDecoupleStage)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(SpaceCenter.Resources)"
    documentation: "<doc>\n  <summary>\nReturns a <see cref=\"T:SpaceCenter.Resources\" /> object, that can used to get\ninformation about resources stored in a given <paramref name=\"stage\" />.\n</summary>\n  <param name=\"stage\">Get resources for parts that are decoupled in this stage.</param>\n  <param name=\"cumulative\">When <c>false</c>, returns the resources for parts\ndecoupled in just the given stage. When <c>true</c> returns the resources decoupled in\nthe given stage and all subsequent stages combined.</param>\n</doc>"
  }
  procedures {
    name: "Vessel_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Vessel,Position)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the position vector of the center of mass of the vessel in the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Vessel_Velocity"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Vessel,Velocity)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the velocity vector of the center of mass of the vessel in the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Vessel_Rotation"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Vessel,Rotation)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the rotation of the center of mass of the vessel in the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Vessel_Direction"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Vessel,Direction)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the direction in which the vessel is pointing, as a unit vector, in the given reference frame.\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Vessel_AngularVelocity"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Method(SpaceCenter.Vessel,AngularVelocity)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nReturns the angular velocity of the vessel in the given reference frame. The magnitude of the returned\nvector is the rotational speed in radians per second, and the direction of the vector indicates the\naxis of rotation (using the right hand rule).\n</summary>\n  <param name=\"referenceFrame\">\n  </param>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Name)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe name of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_set_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(SpaceCenter.Vessel,Name)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe name of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Type"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Type)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Enum(SpaceCenter.VesselType)"
    documentation: "<doc>\n  <summary>\nThe type of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_set_Type"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(SpaceCenter.Vessel,Type)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ParameterType(1).Enum(SpaceCenter.VesselType)"
    documentation: "<doc>\n  <summary>\nThe type of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Situation"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Situation)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Enum(SpaceCenter.VesselSituation)"
    documentation: "<doc>\n  <summary>\nThe situation the vessel is in.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Recoverable"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Recoverable)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nWhether the vessel is recoverable.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_MET"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,MET)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe mission elapsed time in seconds.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Biome"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Biome)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe name of the biome the vessel is currently in.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Orbit"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Orbit)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(SpaceCenter.Orbit)"
    documentation: "<doc>\n  <summary>\nThe current orbit of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Control"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Control)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(SpaceCenter.Control)"
    documentation: "<doc>\n  <summary>\nReturns a <see cref=\"T:SpaceCenter.Control\" /> object that can be used to manipulate\nthe vessel\'s control inputs. For example, its pitch/yaw/roll controls,\nRCS and thrust.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_AutoPilot"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,AutoPilot)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(SpaceCenter.AutoPilot)"
    documentation: "<doc>\n  <summary>\nAn <see cref=\"T:SpaceCenter.AutoPilot\" /> object, that can be used to perform\nsimple auto-piloting of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Resources"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Resources)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(SpaceCenter.Resources)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.Resources\" /> object, that can used to get information\nabout resources stored in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Parts"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Parts)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(SpaceCenter.Parts)"
    documentation: "<doc>\n  <summary>\nA <see cref=\"T:SpaceCenter.Parts\" /> object, that can used to interact with the parts that make up this vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Mass"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Mass)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe total mass of the vessel, including resources, in kg.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_DryMass"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,DryMass)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe total mass of the vessel, excluding resources, in kg.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_Thrust"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,Thrust)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe total thrust currently being produced by the vessel\'s engines, in\nNewtons. This is computed by summing <see cref=\"M:SpaceCenter.Engine.Thrust\" /> for\nevery engine in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_AvailableThrust"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,AvailableThrust)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nGets the total available thrust that can be produced by the vessel\'s\nactive engines, in Newtons. This is computed by summing\n<see cref=\"M:SpaceCenter.Engine.AvailableThrust\" /> for every active engine in the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_MaxThrust"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,MaxThrust)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe total maximum thrust that can be produced by the vessel\'s active\nengines, in Newtons. This is computed by summing\n<see cref=\"M:SpaceCenter.Engine.MaxThrust\" /> for every active engine.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_MaxVacuumThrust"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,MaxVacuumThrust)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe total maximum thrust that can be produced by the vessel\'s active\nengines when the vessel is in a vacuum, in Newtons. This is computed by\nsumming <see cref=\"M:SpaceCenter.Engine.MaxVacuumThrust\" /> for every active engine.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_SpecificImpulse"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,SpecificImpulse)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe combined specific impulse of all active engines, in seconds. This is computed using the formula\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines\">described here</a>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_VacuumSpecificImpulse"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,VacuumSpecificImpulse)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe combined vacuum specific impulse of all active engines, in seconds. This is computed using the formula\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines\">described here</a>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_KerbinSeaLevelSpecificImpulse"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,KerbinSeaLevelSpecificImpulse)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    documentation: "<doc>\n  <summary>\nThe combined specific impulse of all active engines at sea level on Kerbin, in seconds.\nThis is computed using the formula\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines\">described here</a>.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_MomentOfInertia"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,MomentOfInertia)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe moment of inertia of the vessel around its center of mass in <math>kg.m^2</math>.\nThe inertia values are around the pitch, roll and yaw directions respectively.\nThis corresponds to the vessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_InertiaTensor"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,InertiaTensor)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.List(double)"
    documentation: "<doc>\n  <summary>\nThe inertia tensor of the vessel around its center of mass, in the vessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nReturns the 3x3 matrix as a list of elements, in row-major order.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_AvailableTorque"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,AvailableTorque)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe maximum torque that the vessel generate. Includes contributions from reaction wheels,\nRCS, gimballed engines and aerodynamic control surfaces.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_AvailableReactionWheelTorque"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,AvailableReactionWheelTorque)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe maximum torque that the currently active and powered reaction wheels can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_AvailableRCSTorque"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,AvailableRCSTorque)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe maximum torque that the currently active RCS thrusters can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_AvailableEngineTorque"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,AvailableEngineTorque)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe maximum torque that the currently active and gimballed engines can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_AvailableControlSurfaceTorque"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,AvailableControlSurfaceTorque)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nThe maximum torque that the aerodynamic control surfaces can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,ReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame that is fixed relative to the vessel, and orientated with the vessel.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the vessel.</description></item><item><description>The x-axis points out to the right of the vessel.</description></item><item><description>The y-axis points in the forward direction of the vessel.</description></item><item><description>The z-axis points out of the bottom off the vessel.</description></item></list></summary>\n</doc>"
  }
  procedures {
    name: "Vessel_get_OrbitalReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,OrbitalReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame that is fixed relative to the vessel, and orientated with the vessels\norbital prograde/normal/radial directions.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the orbital prograde/normal/radial directions.</description></item><item><description>The x-axis points in the orbital anti-radial direction.</description></item><item><description>The y-axis points in the orbital prograde direction.</description></item><item><description>The z-axis points in the orbital normal direction.</description></item></list></summary>\n  <remarks>\nBe careful not to confuse this with \'orbit\' mode on the navball.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Vessel_get_SurfaceReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,SurfaceReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame that is fixed relative to the vessel, and orientated with the surface\nof the body being orbited.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the north and up directions on the surface of the body.</description></item><item><description>The x-axis points in the <a href=\"https://en.wikipedia.org/wiki/Zenith\">zenith</a>\ndirection (upwards, normal to the body being orbited, from the center of the body towards the center of\nmass of the vessel).</description></item><item><description>The y-axis points northwards towards the\n<a href=\"https://en.wikipedia.org/wiki/Horizon\">astronomical horizon</a> (north, and tangential to the\nsurface of the body -- the direction in which a compass would point when on the surface).</description></item><item><description>The z-axis points eastwards towards the\n<a href=\"https://en.wikipedia.org/wiki/Horizon\">astronomical horizon</a> (east, and tangential to the\nsurface of the body -- east on a compass when on the surface).</description></item></list></summary>\n  <remarks>\nBe careful not to confuse this with \'surface\' mode on the navball.\n</remarks>\n</doc>"
  }
  procedures {
    name: "Vessel_get_SurfaceVelocityReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Vessel,SurfaceVelocityReferenceFrame)"
    attributes: "ParameterType(0).Class(SpaceCenter.Vessel)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nThe reference frame that is fixed relative to the vessel, and orientated with the velocity\nvector of the vessel relative to the surface of the body being orbited.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the vessel\'s velocity vector.</description></item><item><description>The y-axis points in the direction of the vessel\'s velocity vector,\nrelative to the surface of the body being orbited.</description></item><item><description>The z-axis is in the plane of the\n<a href=\"https://en.wikipedia.org/wiki/Horizon\">astronomical horizon</a>.</description></item><item><description>The x-axis is orthogonal to the other two axes.</description></item></list></summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(SpaceCenter.Waypoint,Remove)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nRemoves the waypoint.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_Body"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,Body)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    attributes: "ReturnType.Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nCelestial body the waypoint is attached to.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_set_Body"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(SpaceCenter.Waypoint,Body)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    attributes: "ParameterType(1).Class(SpaceCenter.CelestialBody)"
    documentation: "<doc>\n  <summary>\nCelestial body the waypoint is attached to.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,Name)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nName of the waypoint as it appears on the map and the contract.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_set_Name"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(SpaceCenter.Waypoint,Name)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nName of the waypoint as it appears on the map and the contract.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,Color)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe seed of the icon color. See <see cref=\"M:SpaceCenter.WaypointManager.Colors\" /> for example colors.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_set_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(SpaceCenter.Waypoint,Color)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe seed of the icon color. See <see cref=\"M:SpaceCenter.WaypointManager.Colors\" /> for example colors.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_Icon"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,Icon)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe icon of the waypoint.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_set_Icon"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(SpaceCenter.Waypoint,Icon)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe icon of the waypoint.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_Latitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,Latitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe latitude of the waypoint.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_set_Latitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Class.Property.Set(SpaceCenter.Waypoint,Latitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe latitude of the waypoint.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_Longitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,Longitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe longitude of the waypoint.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_set_Longitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Class.Property.Set(SpaceCenter.Waypoint,Longitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe longitude of the waypoint.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_MeanAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,MeanAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe altitude of the waypoint above sea level, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_set_MeanAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Class.Property.Set(SpaceCenter.Waypoint,MeanAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe altitude of the waypoint above sea level, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_SurfaceAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,SurfaceAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe altitude of the waypoint above the surface of the body or sea level, whichever is closer, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_set_SurfaceAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Class.Property.Set(SpaceCenter.Waypoint,SurfaceAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe altitude of the waypoint above the surface of the body or sea level, whichever is closer, in meters.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_BedrockAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "double"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,BedrockAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe altitude of the waypoint above the surface of the body, in meters. When over water, this is the altitude above the sea floor.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_set_BedrockAltitude"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "double"
    }
    attributes: "Class.Property.Set(SpaceCenter.Waypoint,BedrockAltitude)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe altitude of the waypoint above the surface of the body, in meters. When over water, this is the altitude above the sea floor.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_NearSurface"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,NearSurface)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nTrue if waypoint is a point near or on the body rather than high in orbit.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_Grounded"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,Grounded)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nTrue if waypoint is actually glued to the ground.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_Index"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,Index)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe integer index of this waypoint amongst its cluster of sibling waypoints. \nIn other words, when you have a cluster of waypoints called \"Somewhere Alpha\", \"Somewhere Beta\", and \"Somewhere Gamma\", \nthen the alpha site has index 0, the beta site has index 1 and the gamma site has index 2. \nWhen <see cref=\"M:SpaceCenter.Waypoint.Clustered\" /> is false, this value is zero but meaningless.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_Clustered"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,Clustered)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nTrue if this waypoint is part of a set of clustered waypoints with greek letter names appended (Alpha, Beta, Gamma, etc). \nIf true, there is a one-to-one correspondence with the greek letter name and the <see cref=\"M:SpaceCenter.Waypoint.Index\" />.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_HasContract"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,HasContract)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nWhether the waypoint belongs to a contract.\n</summary>\n</doc>"
  }
  procedures {
    name: "Waypoint_get_ContractId"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int64"
    attributes: "Class.Property.Get(SpaceCenter.Waypoint,ContractId)"
    attributes: "ParameterType(0).Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nThe id of the associated contract.\nReturns 0 if the waypoint does not belong to a contract.\n</summary>\n</doc>"
  }
  procedures {
    name: "WaypointManager_AddWaypoint"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "latitude"
      type: "double"
    }
    parameters {
      name: "longitude"
      type: "double"
    }
    parameters {
      name: "body"
      type: "uint64"
    }
    parameters {
      name: "name"
      type: "string"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Method(SpaceCenter.WaypointManager,AddWaypoint)"
    attributes: "ParameterType(0).Class(SpaceCenter.WaypointManager)"
    attributes: "ParameterType(3).Class(SpaceCenter.CelestialBody)"
    attributes: "ReturnType.Class(SpaceCenter.Waypoint)"
    documentation: "<doc>\n  <summary>\nCreates a waypoint at the given position at ground level, and returns a\n<see cref=\"T:SpaceCenter.Waypoint\" /> object that can be used to modify it.\n</summary>\n  <param name=\"latitude\">Latitude of the waypoint.</param>\n  <param name=\"longitude\">Longitude of the waypoint.</param>\n  <param name=\"body\">Celestial body the waypoint is attached to.</param>\n  <param name=\"name\">Name of the waypoint.</param>\n  <returns>\n  </returns>\n</doc>"
  }
  procedures {
    name: "WaypointManager_get_Waypoints"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.WaypointManager,Waypoints)"
    attributes: "ParameterType(0).Class(SpaceCenter.WaypointManager)"
    attributes: "ReturnType.List(Class(SpaceCenter.Waypoint))"
    documentation: "<doc>\n  <summary>\nA list of all existing waypoints.\n</summary>\n</doc>"
  }
  procedures {
    name: "WaypointManager_get_Icons"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(SpaceCenter.WaypointManager,Icons)"
    attributes: "ParameterType(0).Class(SpaceCenter.WaypointManager)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nReturns all available icons (from \"GameData/Squad/Contracts/Icons/\").\n</summary>\n</doc>"
  }
  procedures {
    name: "WaypointManager_get_Colors"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Dictionary"
    attributes: "Class.Property.Get(SpaceCenter.WaypointManager,Colors)"
    attributes: "ParameterType(0).Class(SpaceCenter.WaypointManager)"
    attributes: "ReturnType.Dictionary(string,int32)"
    documentation: "<doc>\n  <summary>\nAn example map of known color - seed pairs. \nAny other integers may be used as seed.\n</summary>\n</doc>"
  }
  classes {
    name: "AutoPilot"
    documentation: "<doc>\n  <summary>\nProvides basic auto-piloting utilities for a vessel.\nCreated by calling <see cref=\"M:SpaceCenter.Vessel.AutoPilot\" />.\n</summary>\n  <remarks>\nIf a client engages the auto-pilot and then closes its connection to the server,\nthe auto-pilot will be disengaged and its target reference frame, direction and roll reset to default.\n</remarks>\n</doc>"
  }
  classes {
    name: "Camera"
    documentation: "<doc>\n  <summary>\nControls the game\'s camera.\nObtained by calling <see cref=\"M:SpaceCenter.Camera\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "CelestialBody"
    documentation: "<doc>\n  <summary>\nRepresents a celestial body (such as a planet or moon).\nSee <see cref=\"M:SpaceCenter.Bodies\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Control"
    documentation: "<doc>\n  <summary>\nUsed to manipulate the controls of a vessel. This includes adjusting the\nthrottle, enabling/disabling systems such as SAS and RCS, or altering the\ndirection in which the vessel is pointing.\nObtained by calling <see cref=\"M:SpaceCenter.Vessel.Control\" />.\n</summary>\n  <remarks>\nControl inputs (such as pitch, yaw and roll) are zeroed when all clients\nthat have set one or more of these inputs are no longer connected.\n</remarks>\n</doc>"
  }
  classes {
    name: "Flight"
    documentation: "<doc>\n  <summary>\nUsed to get flight telemetry for a vessel, by calling <see cref=\"M:SpaceCenter.Vessel.Flight\" />.\nAll of the information returned by this class is given in the reference frame\npassed to that method.\nObtained by calling <see cref=\"M:SpaceCenter.Vessel.Flight\" />.\n</summary>\n  <remarks>\nTo get orbital information, such as the apoapsis or inclination, see <see cref=\"T:SpaceCenter.Orbit\" />.\n</remarks>\n</doc>"
  }
  classes {
    name: "Node"
    documentation: "<doc>\n  <summary>\nRepresents a maneuver node. Can be created using <see cref=\"M:SpaceCenter.Control.AddNode\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Orbit"
    documentation: "<doc>\n  <summary>\nDescribes an orbit. For example, the orbit of a vessel, obtained by calling\n<see cref=\"M:SpaceCenter.Vessel.Orbit\" />, or a celestial body, obtained by calling\n<see cref=\"M:SpaceCenter.CelestialBody.Orbit\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "CargoBay"
    documentation: "<doc>\n  <summary>\nA cargo bay. Obtained by calling <see cref=\"M:SpaceCenter.Part.CargoBay\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "ControlSurface"
    documentation: "<doc>\n  <summary>\nAn aerodynamic control surface. Obtained by calling <see cref=\"M:SpaceCenter.Part.ControlSurface\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Decoupler"
    documentation: "<doc>\n  <summary>\nA decoupler. Obtained by calling <see cref=\"M:SpaceCenter.Part.Decoupler\" /></summary>\n</doc>"
  }
  classes {
    name: "DockingPort"
    documentation: "<doc>\n  <summary>\nA docking port. Obtained by calling <see cref=\"M:SpaceCenter.Part.DockingPort\" /></summary>\n</doc>"
  }
  classes {
    name: "Engine"
    documentation: "<doc>\n  <summary>\nAn engine, including ones of various types.\nFor example liquid fuelled gimballed engines, solid rocket boosters and jet engines.\nObtained by calling <see cref=\"M:SpaceCenter.Part.Engine\" />.\n</summary>\n  <remarks>\nFor RCS thrusters <see cref=\"M:SpaceCenter.Part.RCS\" />.\n</remarks>\n</doc>"
  }
  classes {
    name: "Experiment"
    documentation: "<doc>\n  <summary>\nObtained by calling <see cref=\"M:SpaceCenter.Part.Experiment\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Fairing"
    documentation: "<doc>\n  <summary>\nA fairing. Obtained by calling <see cref=\"M:SpaceCenter.Part.Fairing\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Force"
    documentation: "<doc>\n  <summary>\nObtained by calling <see cref=\"M:SpaceCenter.Part.AddForce\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Intake"
    documentation: "<doc>\n  <summary>\nAn air intake. Obtained by calling <see cref=\"M:SpaceCenter.Part.Intake\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "LandingGear"
    documentation: "<doc>\n  <summary>\nLanding gear with wheels. Obtained by calling <see cref=\"M:SpaceCenter.Part.LandingGear\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "LandingLeg"
    documentation: "<doc>\n  <summary>\nA landing leg. Obtained by calling <see cref=\"M:SpaceCenter.Part.LandingLeg\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "LaunchClamp"
    documentation: "<doc>\n  <summary>\nA launch clamp. Obtained by calling <see cref=\"M:SpaceCenter.Part.LaunchClamp\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Light"
    documentation: "<doc>\n  <summary>\nA light. Obtained by calling <see cref=\"M:SpaceCenter.Part.Light\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Module"
    documentation: "<doc>\n  <summary>\nThis can be used to interact with a specific part module. This includes part modules in stock KSP,\nand those added by mods.\n\nIn KSP, each part has zero or more\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#MODULES\">PartModules</a>\nassociated with it. Each one contains some of the functionality of the part.\nFor example, an engine has a \"ModuleEngines\" part module that contains all the\nfunctionality of an engine.\n</summary>\n</doc>"
  }
  classes {
    name: "Parachute"
    documentation: "<doc>\n  <summary>\nA parachute. Obtained by calling <see cref=\"M:SpaceCenter.Part.Parachute\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Part"
    documentation: "<doc>\n  <summary>\nRepresents an individual part. Vessels are made up of multiple parts.\nInstances of this class can be obtained by several methods in <see cref=\"T:SpaceCenter.Parts\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Parts"
    documentation: "<doc>\n  <summary>\nInstances of this class are used to interact with the parts of a vessel.\nAn instance can be obtained by calling <see cref=\"M:SpaceCenter.Vessel.Parts\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Propellant"
    documentation: "<doc>\n  <summary>\nA propellant for an engine. Obtains by calling <see cref=\"M:SpaceCenter.Engine.Propellants\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "RCS"
    documentation: "<doc>\n  <summary>\nAn RCS block or thruster. Obtained by calling <see cref=\"M:SpaceCenter.Part.RCS\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Radiator"
    documentation: "<doc>\n  <summary>\nA radiator. Obtained by calling <see cref=\"M:SpaceCenter.Part.Radiator\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "ReactionWheel"
    documentation: "<doc>\n  <summary>\nA reaction wheel. Obtained by calling <see cref=\"M:SpaceCenter.Part.ReactionWheel\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "ResourceConverter"
    documentation: "<doc>\n  <summary>\nA resource converter. Obtained by calling <see cref=\"M:SpaceCenter.Part.ResourceConverter\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "ResourceHarvester"
    documentation: "<doc>\n  <summary>\nA resource harvester (drill). Obtained by calling <see cref=\"M:SpaceCenter.Part.ResourceHarvester\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "ScienceData"
    documentation: "<doc>\n  <summary>\nObtained by calling <see cref=\"M:SpaceCenter.Experiment.Data\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "ScienceSubject"
    documentation: "<doc>\n  <summary>\nObtained by calling <see cref=\"M:SpaceCenter.Experiment.ScienceSubject\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Sensor"
    documentation: "<doc>\n  <summary>\nA sensor, such as a thermometer. Obtained by calling <see cref=\"M:SpaceCenter.Part.Sensor\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "SolarPanel"
    documentation: "<doc>\n  <summary>\nA solar panel. Obtained by calling <see cref=\"M:SpaceCenter.Part.SolarPanel\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Thruster"
    documentation: "<doc>\n  <summary>\nThe component of an <see cref=\"T:SpaceCenter.Engine\" /> or <see cref=\"T:SpaceCenter.RCS\" /> part that generates thrust.\nCan obtained by calling <see cref=\"M:SpaceCenter.Engine.Thrusters\" /> or <see cref=\"M:SpaceCenter.RCS.Thrusters\" />.\n</summary>\n  <remarks>\nEngines can consist of multiple thrusters.\nFor example, the S3 KS-25x4 \"Mammoth\" has four rocket nozzels, and so consists of four thrusters.\n</remarks>\n</doc>"
  }
  classes {
    name: "ReferenceFrame"
    documentation: "<doc>\n  <summary>\nRepresents a reference frame for positions, rotations and\nvelocities. Contains:\n<list type=\"bullet\"><item><description>The position of the origin.</description></item><item><description>The directions of the x, y and z axes.</description></item><item><description>The linear velocity of the frame.</description></item><item><description>The angular velocity of the frame.</description></item></list></summary>\n  <remarks>\nThis class does not contain any properties or methods. It is only\nused as a parameter to other functions.\n</remarks>\n</doc>"
  }
  classes {
    name: "Resource"
    documentation: "<doc>\n  <summary>\nAn individual resource stored within a part.\nCreated using methods in the <see cref=\"T:SpaceCenter.Resources\" /> class.\n</summary>\n</doc>"
  }
  classes {
    name: "ResourceTransfer"
    documentation: "<doc>\n  <summary>\nTransfer resources between parts.\n</summary>\n</doc>"
  }
  classes {
    name: "Resources"
    documentation: "<doc>\n  <summary>\nRepresents the collection of resources stored in a vessel, stage or part.\nCreated by calling <see cref=\"M:SpaceCenter.Vessel.Resources\" />,\n<see cref=\"M:SpaceCenter.Vessel.ResourcesInDecoupleStage\" /> or\n<see cref=\"M:SpaceCenter.Part.Resources\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Vessel"
    documentation: "<doc>\n  <summary>\nThese objects are used to interact with vessels in KSP. This includes getting\norbital and flight data, manipulating control inputs and managing resources.\nCreated using <see cref=\"M:SpaceCenter.ActiveVessel\" /> or <see cref=\"M:SpaceCenter.Vessels\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Waypoint"
    documentation: "<doc>\n  <summary>\nRepresents a waypoint. Can be created using <see cref=\"M:SpaceCenter.WaypointManager.AddWaypoint\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "WaypointManager"
    documentation: "<doc>\n  <summary>\nWaypoints are the location markers you can see on the map view showing you where contracts are targeted for. \nWith this structure, you can obtain coordinate data for the locations of these waypoints.\nObtained by calling <see cref=\"M:SpaceCenter.WaypointManager\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "CameraMode"
    values {
      name: "Automatic"
      documentation: "<doc>\n  <summary>\nThe camera is showing the active vessel, in \"auto\" mode.\n</summary>\n</doc>"
    }
    values {
      name: "Free"
      value: 1
      documentation: "<doc>\n  <summary>\nThe camera is showing the active vessel, in \"free\" mode.\n</summary>\n</doc>"
    }
    values {
      name: "Chase"
      value: 2
      documentation: "<doc>\n  <summary>\nThe camera is showing the active vessel, in \"chase\" mode.\n</summary>\n</doc>"
    }
    values {
      name: "Locked"
      value: 3
      documentation: "<doc>\n  <summary>\nThe camera is showing the active vessel, in \"locked\" mode.\n</summary>\n</doc>"
    }
    values {
      name: "Orbital"
      value: 4
      documentation: "<doc>\n  <summary>\nThe camera is showing the active vessel, in \"orbital\" mode.\n</summary>\n</doc>"
    }
    values {
      name: "IVA"
      value: 5
      documentation: "<doc>\n  <summary>\nThe Intra-Vehicular Activity view is being shown.\n</summary>\n</doc>"
    }
    values {
      name: "Map"
      value: 6
      documentation: "<doc>\n  <summary>\nThe map view is being shown.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nSee <see cref=\"M:SpaceCenter.Camera.Mode\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "CargoBayState"
    values {
      name: "Open"
      documentation: "<doc>\n  <summary>\nCargo bay is fully open.\n</summary>\n</doc>"
    }
    values {
      name: "Closed"
      value: 1
      documentation: "<doc>\n  <summary>\nCargo bay closed and locked.\n</summary>\n</doc>"
    }
    values {
      name: "Opening"
      value: 2
      documentation: "<doc>\n  <summary>\nCargo bay is opening.\n</summary>\n</doc>"
    }
    values {
      name: "Closing"
      value: 3
      documentation: "<doc>\n  <summary>\nCargo bay is closing.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe state of a cargo bay. See <see cref=\"M:SpaceCenter.CargoBay.State\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "DockingPortState"
    values {
      name: "Ready"
      documentation: "<doc>\n  <summary>\nThe docking port is ready to dock to another docking port.\n</summary>\n</doc>"
    }
    values {
      name: "Docked"
      value: 1
      documentation: "<doc>\n  <summary>\nThe docking port is docked to another docking port, or docked to\nanother part (from the VAB/SPH).\n</summary>\n</doc>"
    }
    values {
      name: "Docking"
      value: 2
      documentation: "<doc>\n  <summary>\nThe docking port is very close to another docking port,\nbut has not docked. It is using magnetic force to acquire a solid dock.\n</summary>\n</doc>"
    }
    values {
      name: "Undocking"
      value: 3
      documentation: "<doc>\n  <summary>\nThe docking port has just been undocked from another docking port,\nand is disabled until it moves away by a sufficient distance\n(<see cref=\"M:SpaceCenter.DockingPort.ReengageDistance\" />).\n</summary>\n</doc>"
    }
    values {
      name: "Shielded"
      value: 4
      documentation: "<doc>\n  <summary>\nThe docking port has a shield, and the shield is closed.\n</summary>\n</doc>"
    }
    values {
      name: "Moving"
      value: 5
      documentation: "<doc>\n  <summary>\nThe docking ports shield is currently opening/closing.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe state of a docking port. See <see cref=\"M:SpaceCenter.DockingPort.State\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "LandingGearState"
    values {
      name: "Deployed"
      documentation: "<doc>\n  <summary>\nLanding gear is fully deployed.\n</summary>\n</doc>"
    }
    values {
      name: "Retracted"
      value: 1
      documentation: "<doc>\n  <summary>\nLanding gear is fully retracted.\n</summary>\n</doc>"
    }
    values {
      name: "Deploying"
      value: 2
      documentation: "<doc>\n  <summary>\nLanding gear is being deployed.\n</summary>\n</doc>"
    }
    values {
      name: "Retracting"
      value: 3
      documentation: "<doc>\n  <summary>\nLanding gear is being retracted.\n</summary>\n</doc>"
    }
    values {
      name: "Broken"
      value: 4
      documentation: "<doc>\n  <summary>\nLanding gear is broken.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe state of a landing gear. See <see cref=\"M:SpaceCenter.LandingGear.State\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "LandingLegState"
    values {
      name: "Deployed"
      documentation: "<doc>\n  <summary>\nLanding leg is fully deployed.\n</summary>\n</doc>"
    }
    values {
      name: "Retracted"
      value: 1
      documentation: "<doc>\n  <summary>\nLanding leg is fully retracted.\n</summary>\n</doc>"
    }
    values {
      name: "Deploying"
      value: 2
      documentation: "<doc>\n  <summary>\nLanding leg is being deployed.\n</summary>\n</doc>"
    }
    values {
      name: "Retracting"
      value: 3
      documentation: "<doc>\n  <summary>\nLanding leg is being retracted.\n</summary>\n</doc>"
    }
    values {
      name: "Broken"
      value: 4
      documentation: "<doc>\n  <summary>\nLanding leg is broken.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe state of a landing leg. See <see cref=\"M:SpaceCenter.LandingLeg.State\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "ParachuteState"
    values {
      name: "Active"
      documentation: "<doc>\n  <summary>\nThe parachute is still stowed, but ready to semi-deploy.\n</summary>\n</doc>"
    }
    values {
      name: "Cut"
      value: 1
      documentation: "<doc>\n  <summary>\nThe parachute has been cut.\n</summary>\n</doc>"
    }
    values {
      name: "Deployed"
      value: 2
      documentation: "<doc>\n  <summary>\nThe parachute is fully deployed.\n</summary>\n</doc>"
    }
    values {
      name: "SemiDeployed"
      value: 3
      documentation: "<doc>\n  <summary>\nThe parachute has been deployed and is providing some drag,\nbut is not fully deployed yet.\n</summary>\n</doc>"
    }
    values {
      name: "Stowed"
      value: 4
      documentation: "<doc>\n  <summary>\nThe parachute is safely tucked away inside its housing.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe state of a parachute. See <see cref=\"M:SpaceCenter.Parachute.State\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "RadiatorState"
    values {
      name: "Extended"
      documentation: "<doc>\n  <summary>\nRadiator is fully extended.\n</summary>\n</doc>"
    }
    values {
      name: "Retracted"
      value: 1
      documentation: "<doc>\n  <summary>\nRadiator is fully retracted.\n</summary>\n</doc>"
    }
    values {
      name: "Extending"
      value: 2
      documentation: "<doc>\n  <summary>\nRadiator is being extended.\n</summary>\n</doc>"
    }
    values {
      name: "Retracting"
      value: 3
      documentation: "<doc>\n  <summary>\nRadiator is being retracted.\n</summary>\n</doc>"
    }
    values {
      name: "Broken"
      value: 4
      documentation: "<doc>\n  <summary>\nRadiator is being broken.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe state of a radiator. <see cref=\"T:SpaceCenter.RadiatorState\" /></summary>\n</doc>"
  }
  enumerations {
    name: "ResourceConverterState"
    values {
      name: "Running"
      documentation: "<doc>\n  <summary>\nConverter is running.\n</summary>\n</doc>"
    }
    values {
      name: "Idle"
      value: 1
      documentation: "<doc>\n  <summary>\nConverter is idle.\n</summary>\n</doc>"
    }
    values {
      name: "MissingResource"
      value: 2
      documentation: "<doc>\n  <summary>\nConverter is missing a required resource.\n</summary>\n</doc>"
    }
    values {
      name: "StorageFull"
      value: 3
      documentation: "<doc>\n  <summary>\nNo available storage for output resource.\n</summary>\n</doc>"
    }
    values {
      name: "Capacity"
      value: 4
      documentation: "<doc>\n  <summary>\nAt preset resource capacity.\n</summary>\n</doc>"
    }
    values {
      name: "Unknown"
      value: 5
      documentation: "<doc>\n  <summary>\nUnknown state. Possible with modified resource converters.\nIn this case, check <see cref=\"M:SpaceCenter.ResourceConverter.StatusInfo\" /> for more information.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe state of a resource converter. See <see cref=\"M:SpaceCenter.ResourceConverter.State\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "ResourceHarvesterState"
    values {
      name: "Deploying"
      documentation: "<doc>\n  <summary>\nThe drill is deploying.\n</summary>\n</doc>"
    }
    values {
      name: "Deployed"
      value: 1
      documentation: "<doc>\n  <summary>\nThe drill is deployed and ready.\n</summary>\n</doc>"
    }
    values {
      name: "Retracting"
      value: 2
      documentation: "<doc>\n  <summary>\nThe drill is retracting.\n</summary>\n</doc>"
    }
    values {
      name: "Retracted"
      value: 3
      documentation: "<doc>\n  <summary>\nThe drill is retracted.\n</summary>\n</doc>"
    }
    values {
      name: "Active"
      value: 4
      documentation: "<doc>\n  <summary>\nThe drill is running.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe state of a resource harvester. See <see cref=\"M:SpaceCenter.ResourceHarvester.State\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "SolarPanelState"
    values {
      name: "Extended"
      documentation: "<doc>\n  <summary>\nSolar panel is fully extended.\n</summary>\n</doc>"
    }
    values {
      name: "Retracted"
      value: 1
      documentation: "<doc>\n  <summary>\nSolar panel is fully retracted.\n</summary>\n</doc>"
    }
    values {
      name: "Extending"
      value: 2
      documentation: "<doc>\n  <summary>\nSolar panel is being extended.\n</summary>\n</doc>"
    }
    values {
      name: "Retracting"
      value: 3
      documentation: "<doc>\n  <summary>\nSolar panel is being retracted.\n</summary>\n</doc>"
    }
    values {
      name: "Broken"
      value: 4
      documentation: "<doc>\n  <summary>\nSolar panel is broken.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe state of a solar panel. See <see cref=\"M:SpaceCenter.SolarPanel.State\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "ResourceFlowMode"
    values {
      name: "Vessel"
      documentation: "<doc>\n  <summary>\nThe resource flows to any part in the vessel. For example, electric charge.\n</summary>\n</doc>"
    }
    values {
      name: "Stage"
      value: 1
      documentation: "<doc>\n  <summary>\nThe resource flows from parts in the first stage, followed by the second,\nand so on. For example, mono-propellant.\n</summary>\n</doc>"
    }
    values {
      name: "Adjacent"
      value: 2
      documentation: "<doc>\n  <summary>\nThe resource flows between adjacent parts within the vessel. For example,\nliquid fuel or oxidizer.\n</summary>\n</doc>"
    }
    values {
      name: "None"
      value: 3
      documentation: "<doc>\n  <summary>\nThe resource does not flow. For example, solid fuel.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe way in which a resource flows between parts. See <see cref=\"M:SpaceCenter.Resources.FlowMode\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "SASMode"
    values {
      name: "StabilityAssist"
      documentation: "<doc>\n  <summary>\nStability assist mode. Dampen out any rotation.\n</summary>\n</doc>"
    }
    values {
      name: "Maneuver"
      value: 1
      documentation: "<doc>\n  <summary>\nPoint in the burn direction of the next maneuver node.\n</summary>\n</doc>"
    }
    values {
      name: "Prograde"
      value: 2
      documentation: "<doc>\n  <summary>\nPoint in the prograde direction.\n</summary>\n</doc>"
    }
    values {
      name: "Retrograde"
      value: 3
      documentation: "<doc>\n  <summary>\nPoint in the retrograde direction.\n</summary>\n</doc>"
    }
    values {
      name: "Normal"
      value: 4
      documentation: "<doc>\n  <summary>\nPoint in the orbit normal direction.\n</summary>\n</doc>"
    }
    values {
      name: "AntiNormal"
      value: 5
      documentation: "<doc>\n  <summary>\nPoint in the orbit anti-normal direction.\n</summary>\n</doc>"
    }
    values {
      name: "Radial"
      value: 6
      documentation: "<doc>\n  <summary>\nPoint in the orbit radial direction.\n</summary>\n</doc>"
    }
    values {
      name: "AntiRadial"
      value: 7
      documentation: "<doc>\n  <summary>\nPoint in the orbit anti-radial direction.\n</summary>\n</doc>"
    }
    values {
      name: "Target"
      value: 8
      documentation: "<doc>\n  <summary>\nPoint in the direction of the current target.\n</summary>\n</doc>"
    }
    values {
      name: "AntiTarget"
      value: 9
      documentation: "<doc>\n  <summary>\nPoint away from the current target.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe behavior of the SAS auto-pilot. See <see cref=\"M:SpaceCenter.AutoPilot.SASMode\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "SpeedMode"
    values {
      name: "Orbit"
      documentation: "<doc>\n  <summary>\nSpeed is relative to the vessel\'s orbit.\n</summary>\n</doc>"
    }
    values {
      name: "Surface"
      value: 1
      documentation: "<doc>\n  <summary>\nSpeed is relative to the surface of the body being orbited.\n</summary>\n</doc>"
    }
    values {
      name: "Target"
      value: 2
      documentation: "<doc>\n  <summary>\nSpeed is relative to the current target.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe mode of the speed reported in the navball.\nSee <see cref=\"M:SpaceCenter.Control.SpeedMode\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "VesselSituation"
    values {
      name: "PreLaunch"
      documentation: "<doc>\n  <summary>\nVessel is awaiting launch.\n</summary>\n</doc>"
    }
    values {
      name: "Orbiting"
      value: 1
      documentation: "<doc>\n  <summary>\nVessel is orbiting a body.\n</summary>\n</doc>"
    }
    values {
      name: "SubOrbital"
      value: 2
      documentation: "<doc>\n  <summary>\nVessel is on a sub-orbital trajectory.\n</summary>\n</doc>"
    }
    values {
      name: "Escaping"
      value: 3
      documentation: "<doc>\n  <summary>\nEscaping.\n</summary>\n</doc>"
    }
    values {
      name: "Flying"
      value: 4
      documentation: "<doc>\n  <summary>\nVessel is flying through an atmosphere.\n</summary>\n</doc>"
    }
    values {
      name: "Landed"
      value: 5
      documentation: "<doc>\n  <summary>\nVessel is landed on the surface of a body.\n</summary>\n</doc>"
    }
    values {
      name: "Splashed"
      value: 6
      documentation: "<doc>\n  <summary>\nVessel has splashed down in an ocean.\n</summary>\n</doc>"
    }
    values {
      name: "Docked"
      value: 7
      documentation: "<doc>\n  <summary>\nVessel is docked to another.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe situation a vessel is in.\nSee <see cref=\"M:SpaceCenter.Vessel.Situation\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "VesselType"
    values {
      name: "Ship"
      documentation: "<doc>\n  <summary>\nShip.\n</summary>\n</doc>"
    }
    values {
      name: "Station"
      value: 1
      documentation: "<doc>\n  <summary>\nStation.\n</summary>\n</doc>"
    }
    values {
      name: "Lander"
      value: 2
      documentation: "<doc>\n  <summary>\nLander.\n</summary>\n</doc>"
    }
    values {
      name: "Probe"
      value: 3
      documentation: "<doc>\n  <summary>\nProbe.\n</summary>\n</doc>"
    }
    values {
      name: "Rover"
      value: 4
      documentation: "<doc>\n  <summary>\nRover.\n</summary>\n</doc>"
    }
    values {
      name: "Base"
      value: 5
      documentation: "<doc>\n  <summary>\nBase.\n</summary>\n</doc>"
    }
    values {
      name: "Debris"
      value: 6
      documentation: "<doc>\n  <summary>\nDebris.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe type of a vessel.\nSee <see cref=\"M:SpaceCenter.Vessel.Type\" />.\n</summary>\n</doc>"
  }
  enumerations {
    name: "WarpMode"
    values {
      name: "Rails"
      documentation: "<doc>\n  <summary>\nTime warp is active, and in regular \"on-rails\" mode.\n</summary>\n</doc>"
    }
    values {
      name: "Physics"
      value: 1
      documentation: "<doc>\n  <summary>\nTime warp is active, and in physical time warp mode.\n</summary>\n</doc>"
    }
    values {
      name: "None"
      value: 2
      documentation: "<doc>\n  <summary>\nTime warp is not active.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe time warp mode.\nReturned by <see cref=\"T:SpaceCenter.WarpMode\" /></summary>\n</doc>"
  }
  documentation: "<doc>\n  <summary>\nProvides functionality to interact with Kerbal Space Program. This includes controlling\nthe active vessel, managing its resources, planning maneuver nodes and auto-piloting.\n</summary>\n</doc>"
}
services {
  name: "Drawing"
  procedures {
    name: "AddLine"
    parameters {
      name: "start"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "end"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "ParameterType(0).Tuple(double,double,double)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    attributes: "ParameterType(2).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Class(Drawing.Line)"
    documentation: "<doc>\n  <summary>\nDraw a line in the scene.\n</summary>\n  <param name=\"start\">Position of the start of the line.</param>\n  <param name=\"end\">Position of the end of the line.</param>\n  <param name=\"referenceFrame\">Reference frame that the positions are in.</param>\n  <param name=\"visible\">Whether the line is visible.</param>\n</doc>"
  }
  procedures {
    name: "AddDirection"
    parameters {
      name: "direction"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    parameters {
      name: "length"
      type: "float"
      has_default_value: true
      default_value: "\000\000 A"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "ParameterType(0).Tuple(double,double,double)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Class(Drawing.Line)"
    documentation: "<doc>\n  <summary>\nDraw a direction vector in the scene, from the center of mass of the active vessel.\n</summary>\n  <param name=\"direction\">Direction to draw the line in.</param>\n  <param name=\"referenceFrame\">Reference frame that the direction is in.</param>\n  <param name=\"length\">The length of the line.</param>\n  <param name=\"visible\">Whether the line is visible.</param>\n</doc>"
  }
  procedures {
    name: "AddPolygon"
    parameters {
      name: "vertices"
      type: "KRPC.List"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "ParameterType(0).List(Tuple(double,double,double))"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ReturnType.Class(Drawing.Polygon)"
    documentation: "<doc>\n  <summary>\nDraw a polygon in the scene, defined by a list of vertices.\n</summary>\n  <param name=\"vertices\">Vertices of the polygon.</param>\n  <param name=\"referenceFrame\">Reference frame that the vertices are in.</param>\n  <param name=\"visible\">Whether the polygon is visible.</param>\n</doc>"
  }
  procedures {
    name: "AddText"
    parameters {
      name: "text"
      type: "string"
    }
    parameters {
      name: "referenceFrame"
      type: "uint64"
    }
    parameters {
      name: "position"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "rotation"
      type: "KRPC.Tuple"
    }
    parameters {
      name: "visible"
      type: "bool"
      has_default_value: true
      default_value: "\001"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    attributes: "ParameterType(2).Tuple(double,double,double)"
    attributes: "ParameterType(3).Tuple(double,double,double,double)"
    attributes: "ReturnType.Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nDraw text in the scene.\n</summary>\n  <param name=\"text\">The string to draw.</param>\n  <param name=\"referenceFrame\">Reference frame that the text position is in.</param>\n  <param name=\"position\">Position of the text.</param>\n  <param name=\"rotation\">Rotation of the text, as a quaternion.</param>\n  <param name=\"visible\">Whether the text is visible.</param>\n</doc>"
  }
  procedures {
    name: "Clear"
    parameters {
      name: "clientOnly"
      type: "bool"
      has_default_value: true
      default_value: "\000"
    }
    documentation: "<doc>\n  <summary>\nRemove all objects being drawn.\n</summary>\n  <param name=\"clientOnly\">If true, only remove objects created by the calling client.</param>\n</doc>"
  }
  procedures {
    name: "Line_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(Drawing.Line,Remove)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    documentation: "<doc>\n  <summary>\nRemove the object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_get_Start"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(Drawing.Line,Start)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nStart position of the line.\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_set_Start"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(Drawing.Line,Start)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nStart position of the line.\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_get_End"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(Drawing.Line,End)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nEnd position of the line.\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_set_End"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(Drawing.Line,End)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nEnd position of the line.\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_get_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(Drawing.Line,Color)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nSet the color\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_set_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(Drawing.Line,Color)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nSet the color\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_get_Thickness"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(Drawing.Line,Thickness)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    documentation: "<doc>\n  <summary>\nSet the thickness\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_set_Thickness"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(Drawing.Line,Thickness)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    documentation: "<doc>\n  <summary>\nSet the thickness\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_get_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(Drawing.Line,ReferenceFrame)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nReference frame for the positions of the object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_set_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(Drawing.Line,ReferenceFrame)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nReference frame for the positions of the object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_get_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(Drawing.Line,Visible)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    documentation: "<doc>\n  <summary>\nWhether the object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_set_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(Drawing.Line,Visible)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    documentation: "<doc>\n  <summary>\nWhether the object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_get_Material"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(Drawing.Line,Material)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    documentation: "<doc>\n  <summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>"
  }
  procedures {
    name: "Line_set_Material"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(Drawing.Line,Material)"
    attributes: "ParameterType(0).Class(Drawing.Line)"
    documentation: "<doc>\n  <summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(Drawing.Polygon,Remove)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    documentation: "<doc>\n  <summary>\nRemove the object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_get_Vertices"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(Drawing.Polygon,Vertices)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    attributes: "ReturnType.List(Tuple(double,double,double))"
    documentation: "<doc>\n  <summary>\nVertices for the polygon.\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_set_Vertices"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.List"
    }
    attributes: "Class.Property.Set(Drawing.Polygon,Vertices)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    attributes: "ParameterType(1).List(Tuple(double,double,double))"
    documentation: "<doc>\n  <summary>\nVertices for the polygon.\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_get_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(Drawing.Polygon,Color)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nSet the color\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_set_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(Drawing.Polygon,Color)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nSet the color\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_get_Thickness"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(Drawing.Polygon,Thickness)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    documentation: "<doc>\n  <summary>\nSet the thickness\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_set_Thickness"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(Drawing.Polygon,Thickness)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    documentation: "<doc>\n  <summary>\nSet the thickness\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_get_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(Drawing.Polygon,ReferenceFrame)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nReference frame for the positions of the object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_set_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(Drawing.Polygon,ReferenceFrame)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nReference frame for the positions of the object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_get_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(Drawing.Polygon,Visible)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    documentation: "<doc>\n  <summary>\nWhether the object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_set_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(Drawing.Polygon,Visible)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    documentation: "<doc>\n  <summary>\nWhether the object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_get_Material"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(Drawing.Polygon,Material)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    documentation: "<doc>\n  <summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>"
  }
  procedures {
    name: "Polygon_set_Material"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(Drawing.Polygon,Material)"
    attributes: "ParameterType(0).Class(Drawing.Polygon)"
    documentation: "<doc>\n  <summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_Remove"
    parameters {
      name: "this"
      type: "uint64"
    }
    attributes: "Class.Method(Drawing.Text,Remove)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nRemove the object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(Drawing.Text,Position)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nPosition of the text.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Position"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(Drawing.Text,Position)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nPosition of the text.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Rotation"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(Drawing.Text,Rotation)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ReturnType.Tuple(double,double,double,double)"
    documentation: "<doc>\n  <summary>\nRotation of the text as a quaternion.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Rotation"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(Drawing.Text,Rotation)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ParameterType(1).Tuple(double,double,double,double)"
    documentation: "<doc>\n  <summary>\nRotation of the text as a quaternion.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_AvailableFonts"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Class.Property.Get(Drawing.Text,AvailableFonts)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ReturnType.List(string)"
    documentation: "<doc>\n  <summary>\nA list of all available fonts.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Content"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(Drawing.Text,Content)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nThe text string\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Content"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(Drawing.Text,Content)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nThe text string\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Font"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(Drawing.Text,Font)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nName of the font\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Font"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(Drawing.Text,Font)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nName of the font\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Size"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(Drawing.Text,Size)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nFont size.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Size"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(Drawing.Text,Size)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nFont size.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_CharacterSize"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(Drawing.Text,CharacterSize)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nCharacter size.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_CharacterSize"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(Drawing.Text,CharacterSize)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nCharacter size.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Style"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(Drawing.Text,Style)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ReturnType.Enum(UI.FontStyle)"
    documentation: "<doc>\n  <summary>\nFont style.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Style"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(Drawing.Text,Style)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ParameterType(1).Enum(UI.FontStyle)"
    documentation: "<doc>\n  <summary>\nFont style.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Alignment"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(Drawing.Text,Alignment)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ReturnType.Enum(UI.TextAlignment)"
    documentation: "<doc>\n  <summary>\nAlignment.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Alignment"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(Drawing.Text,Alignment)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ParameterType(1).Enum(UI.TextAlignment)"
    documentation: "<doc>\n  <summary>\nAlignment.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_LineSpacing"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "float"
    attributes: "Class.Property.Get(Drawing.Text,LineSpacing)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nLine spacing.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_LineSpacing"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "float"
    }
    attributes: "Class.Property.Set(Drawing.Text,LineSpacing)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nLine spacing.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Anchor"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "int32"
    attributes: "Class.Property.Get(Drawing.Text,Anchor)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ReturnType.Enum(UI.TextAnchor)"
    documentation: "<doc>\n  <summary>\nAnchor.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Anchor"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "int32"
    }
    attributes: "Class.Property.Set(Drawing.Text,Anchor)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ParameterType(1).Enum(UI.TextAnchor)"
    documentation: "<doc>\n  <summary>\nAnchor.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "KRPC.Tuple"
    attributes: "Class.Property.Get(Drawing.Text,Color)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ReturnType.Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nSet the color\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Color"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "KRPC.Tuple"
    }
    attributes: "Class.Property.Set(Drawing.Text,Color)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ParameterType(1).Tuple(double,double,double)"
    documentation: "<doc>\n  <summary>\nSet the color\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "uint64"
    attributes: "Class.Property.Get(Drawing.Text,ReferenceFrame)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ReturnType.Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nReference frame for the positions of the object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_ReferenceFrame"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "uint64"
    }
    attributes: "Class.Property.Set(Drawing.Text,ReferenceFrame)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    attributes: "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
    documentation: "<doc>\n  <summary>\nReference frame for the positions of the object.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "bool"
    attributes: "Class.Property.Get(Drawing.Text,Visible)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nWhether the object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Visible"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "bool"
    }
    attributes: "Class.Property.Set(Drawing.Text,Visible)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nWhether the object is visible.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_get_Material"
    parameters {
      name: "this"
      type: "uint64"
    }
    has_return_type: true
    return_type: "string"
    attributes: "Class.Property.Get(Drawing.Text,Material)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>"
  }
  procedures {
    name: "Text_set_Material"
    parameters {
      name: "this"
      type: "uint64"
    }
    parameters {
      name: "value"
      type: "string"
    }
    attributes: "Class.Property.Set(Drawing.Text,Material)"
    attributes: "ParameterType(0).Class(Drawing.Text)"
    documentation: "<doc>\n  <summary>\nMaterial used to render the object.\nCreates the material from a shader with the given name.\n</summary>\n</doc>"
  }
  classes {
    name: "Line"
    documentation: "<doc>\n  <summary>\nA line. Created using <see cref=\"M:Drawing.AddLine\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Polygon"
    documentation: "<doc>\n  <summary>\nA polygon. Created using <see cref=\"M:Drawing.AddPolygon\" />.\n</summary>\n</doc>"
  }
  classes {
    name: "Text"
    documentation: "<doc>\n  <summary>\nText. Created using <see cref=\"M:Drawing.AddText\" />.\n</summary>\n</doc>"
  }
  documentation: "<doc>\n  <summary>\nProvides functionality for drawing objects in the flight scene.\n</summary>\n  <remarks>\nFor drawing and interacting with the user interface, see the UI service.\n</remarks>\n</doc>"
}
services {
  name: "KRPC"
  procedures {
    name: "GetStatus"
    has_return_type: true
    return_type: "KRPC.Status"
    documentation: "<doc>\n  <summary>\nReturns some information about the server, such as the version.\n</summary>\n</doc>"
  }
  procedures {
    name: "GetServices"
    has_return_type: true
    return_type: "KRPC.Services"
    documentation: "<doc>\n  <summary>\nReturns information on all services, procedures, classes, properties etc. provided by the server.\nCan be used by client libraries to automatically create functionality such as stubs.\n</summary>\n</doc>"
  }
  procedures {
    name: "AddStream"
    parameters {
      name: "request"
      type: "KRPC.Request"
    }
    has_return_type: true
    return_type: "uint32"
    documentation: "<doc>\n  <summary>\nAdd a streaming request and return its identifier.\n</summary>\n</doc>"
  }
  procedures {
    name: "RemoveStream"
    parameters {
      name: "id"
      type: "uint32"
    }
    documentation: "<doc>\n  <summary>\nRemove a streaming request.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_Clients"
    has_return_type: true
    return_type: "KRPC.List"
    attributes: "Property.Get(Clients)"
    attributes: "ReturnType.List(Tuple(bytes,string,string))"
    documentation: "<doc>\n  <summary>\nA list of RPC clients that are currently connected to the server.\nEach entry in the list is a clients identifier, name and address.\n</summary>\n</doc>"
  }
  procedures {
    name: "get_CurrentGameScene"
    has_return_type: true
    return_type: "int32"
    attributes: "Property.Get(CurrentGameScene)"
    attributes: "ReturnType.Enum(KRPC.GameScene)"
    documentation: "<doc>\n  <summary>\nGet the current game scene.\n</summary>\n</doc>"
  }
  enumerations {
    name: "GameScene"
    values {
      name: "SpaceCenter"
      documentation: "<doc>\n  <summary>\nThe game scene showing the Kerbal Space Center buildings.\n</summary>\n</doc>"
    }
    values {
      name: "Flight"
      value: 1
      documentation: "<doc>\n  <summary>\nThe game scene showing a vessel in flight (or on the launchpad/runway).\n</summary>\n</doc>"
    }
    values {
      name: "TrackingStation"
      value: 2
      documentation: "<doc>\n  <summary>\nThe tracking station.\n</summary>\n</doc>"
    }
    values {
      name: "EditorVAB"
      value: 3
      documentation: "<doc>\n  <summary>\nThe Vehicle Assembly Building.\n</summary>\n</doc>"
    }
    values {
      name: "EditorSPH"
      value: 4
      documentation: "<doc>\n  <summary>\nThe Space Plane Hangar.\n</summary>\n</doc>"
    }
    documentation: "<doc>\n  <summary>\nThe game scene. See <see cref=\"M:KRPC.CurrentGameScene\" />.\n</summary>\n</doc>"
  }
  documentation: "<doc>\n  <summary>\nMain kRPC service, used by clients to interact with basic server functionality.\n</summary>\n</doc>"
}
